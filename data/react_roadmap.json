{
  "nodes": [
    {
      "id": "tU4Umtnfu01t9gLlnlK6b",
      "name": "CLI Tools",
      "resources": {
        "description": "# CLI Tools\n\nHere is the list of most common CLI tools for React development:\n\n- [@article@vite](https://vitejs.dev)\n- [@feed@Explore top posts about CLI](https://app.daily.dev/tags/cli?ref=roadmapsh)",
        "resources": [
          {
            "type": "article",
            "title": "vite",
            "url": "https://vitejs.dev"
          },
          {
            "type": "article",
            "title": "Explore top posts about CLI",
            "url": "https://app.daily.dev/tags/cli?ref=roadmapsh"
          }
        ]
      }
    },
    {
      "id": "y9ToYDix-koRbR6FLydFw",
      "name": "Vite",
      "resources": {
        "description": "# Vite\n\nVite is a build tool that aims to provide a faster and leaner development experience for modern web projects.",
        "resources": [
          {
            "type": "course",
            "title": "Vite Website",
            "url": "https://vitejs.dev"
          },
          {
            "type": "course",
            "title": "Vite Documentation",
            "url": "https://vitejs.dev/guide"
          },
          {
            "type": "video",
            "title": "Vite Crash Course",
            "url": "https://youtu.be/LQQ3CR2JTX8"
          },
          {
            "type": "video",
            "title": "Vite Crash Course | Faster Alternative To CRA | 2023",
            "url": "https://www.youtube.com/watch?v=89NJdbYTgJ8"
          },
          {
            "type": "article",
            "title": "Explore top posts about Vite",
            "url": "https://app.daily.dev/tags/vite?ref=roadmapsh"
          }
        ]
      }
    },
    {
      "id": "79K4xgljcoSHkCYI1D55O",
      "name": "Components",
      "resources": {
        "description": "# Components\n\nComponents are the building blocks of React applications. They let us split the UI into independent, reusable pieces, and think about each piece in isolation.",
        "resources": [
          {
            "type": "course",
            "title": "Creating and nesting components",
            "url": "https://react.dev/learn#components"
          },
          {
            "type": "article",
            "title": "Explore the different types of components in React",
            "url": "https://www.robinwieruch.de/react-component-types/"
          },
          {
            "type": "article",
            "title": "What is the difference between components, elements, and instances?",
            "url": "https://www.robinwieruch.de/react-element-component/"
          },
          {
            "type": "video",
            "title": "Components & Templates in React",
            "url": "https://www.youtube.com/watch?v=9D1x7-2FmTA"
          }
        ]
      }
    },
    {
      "id": "8mw4TxlLN4ZKAlLl-_NVV",
      "name": "Functional Components",
      "resources": {
        "description": "# Functional Components\n\nFunctional components are some of the more common components that will come across while working in React. These are simply JavaScript functions. We can create a functional component to React by writing a JavaScript function. These functions may or may not receive data as parameters. In the functional Components, the return value is the JSX code to render to the DOM tree. Functional components can also have state which is managed using React hooks.",
        "resources": [
          {
            "type": "course",
            "title": "Functional Components and Props",
            "url": "https://react.dev/reference/react/Component"
          },
          {
            "type": "course",
            "title": "Your first component",
            "url": "https://react.dev/learn/your-first-component"
          },
          {
            "type": "course",
            "title": "Passing props to a component",
            "url": "https://react.dev/learn/passing-props-to-a-component"
          },
          {
            "type": "article",
            "title": "Functional Components in React",
            "url": "https://www.robinwieruch.de/react-function-component/"
          },
          {
            "type": "video",
            "title": "React JS Functional Components",
            "url": "https://www.youtube.com/watch?v=NJ_qbsLf52w"
          },
          {
            "type": "article",
            "title": "Explore top posts about React",
            "url": "https://app.daily.dev/tags/react?ref=roadmapsh"
          }
        ]
      }
    },
    {
      "id": "WREBxWSNQDD_6fzpHL6CE",
      "name": "JSX",
      "resources": {
        "description": "# JSX\n\nJSX stands for JavaScript XML. It allows writing HTML in JavaScript and converts the HTML tags into React elements.",
        "resources": [
          {
            "type": "course",
            "title": "Writing markup with JSX",
            "url": "https://react.dev/learn/writing-markup-with-jsx"
          },
          {
            "type": "course",
            "title": "JavaScript in JSX with Curly Braces",
            "url": "https://react.dev/learn/javascript-in-jsx-with-curly-braces"
          },
          {
            "type": "article",
            "title": "Working with JSX - React - CodeGuage",
            "url": "https://www.codeguage.com/courses/react/jsx"
          },
          {
            "type": "article",
            "title": "Explore top posts about JSX",
            "url": "https://app.daily.dev/tags/jsx?ref=roadmapsh"
          }
        ]
      }
    },
    {
      "id": "RFuy3Eho3mnW1GpP08BVw",
      "name": "Props vs State",
      "resources": {
        "description": "# Props vs State\n\nProps (short for “properties”) and state are both plain JavaScript objects. While both hold information that influences the output of component render, they are different in one important way: props get passed to the component (similar to function parameters) whereas state is managed within the component (similar to variables declared within a function).",
        "resources": [
          {
            "type": "course",
            "title": "State: A Component's Memory",
            "url": "https://react.dev/learn/state-a-components-memory"
          },
          {
            "type": "article",
            "title": "How to use Props in React",
            "url": "https://www.robinwieruch.de/react-pass-props-to-component/"
          },
          {
            "type": "article",
            "title": "What is the difference between state and props in React?",
            "url": "https://stackoverflow.com/questions/27991366/what-is-the-difference-between-state-and-props-in-react"
          },
          {
            "type": "article",
            "title": "How to update state from props in React",
            "url": "https://www.robinwieruch.de/react-derive-state-props/"
          }
        ]
      }
    },
    {
      "id": "aE6XBgH23135_9QmD4ff2",
      "name": "Conditional Rendering",
      "resources": {
        "description": "# Conditional Rendering\n\nIn React, you can create distinct components that encapsulate behavior you need. Then, you can render only some of them, depending on the state of your application.\n\nConditional rendering in React works the same way conditions work in JavaScript. Use JavaScript operators like [if](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/if...else) or the [conditional operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator) to create elements representing the current state, and let React update the UI to match them.",
        "resources": [
          {
            "type": "course",
            "title": "Conditional Rendering",
            "url": "https://react.dev/learn/conditional-rendering"
          },
          {
            "type": "article",
            "title": "Different techniques for conditional rendering in React",
            "url": "https://www.robinwieruch.de/conditional-rendering-react/"
          },
          {
            "type": "video",
            "title": "Conditional rendering in React",
            "url": "https://www.youtube.com/watch?v=4oCVDkb_EIs"
          }
        ]
      }
    },
    {
      "id": "4T59gdcwdXqj9kCuK7cfp",
      "name": "Composition",
      "resources": {
        "description": "# Composition vs Inheritance\n\nReact has a powerful composition model, and it is recommended to use composition instead of inheritance to reuse code between components.",
        "resources": [
          {
            "type": "article",
            "title": "Composition vs Inheritance",
            "url": "https://reactjs.org/docs/composition-vs-inheritance.html"
          },
          {
            "type": "article",
            "title": "How to perform component composition in React",
            "url": "https://www.robinwieruch.de/react-component-composition/"
          },
          {
            "type": "article",
            "title": "Achieving Reusability With React Composition",
            "url": "https://formidable.com/blog/2021/react-composition/"
          },
          {
            "type": "course",
            "title": "Passing JSX as children",
            "url": "https://react.dev/learn/passing-props-to-a-component#passing-jsx-as-children"
          }
        ]
      }
    },
    {
      "id": "0uiGsC5SWavNdlFqizkKe",
      "name": "Rendering",
      "resources": {
        "description": "# Rendering\n\nReact follows a declarative approach to rendering components, which means that developers specify what a component should look like, and React takes care of rendering the component to the screen. This is in contrast to an imperative approach, where developers would write code to manually manipulate the DOM (Document Object Model) to update the UI.\n\nThe virtual DOM (VDOM) is an important aspect of how React works. It is a lightweight in-memory representation of the DOM (Document Object Model), and it is used to optimize the rendering of components in a React application.\n\n- Components are written as JavaScript classes or functions that define a render method. The render method returns a description of what the component should look like, using JSX syntax.\n- When a component is rendered, React creates a virtual DOM (VDOM) representation of the component. The VDOM is a lightweight in-memory representation of the DOM, and it is used to optimize the rendering of components.\n- React compares the VDOM representation of the component with the previous VDOM representation (if it exists). If there are differences between the two VDOMs, React calculates the minimum number of DOM updates needed to bring the actual DOM into line with the new VDOM.\n- React updates the actual DOM with the minimum number of DOM updates needed to reflect the changes in the VDOM.\n\nThis process is known as reconciliation, and it is an important aspect of how React works. By using a declarative approach and a VDOM, React is able to optimize the rendering of components and improve the performance of web applications.",
        "resources": [
          {
            "type": "course",
            "title": "Render and Commit - Official Docs",
            "url": "https://react.dev/learn/render-and-commit"
          },
          {
            "type": "article",
            "title": "Rendering in React - ui.dev",
            "url": "https://ui.dev/why-react-renders"
          },
          {
            "type": "article",
            "title": "Fix the slow render before you fix the re-render",
            "url": "https://kentcdodds.com/blog/fix-the-slow-render-before-you-fix-the-re-render"
          }
        ]
      }
    },
    {
      "id": "8OBlgDRUg-CTgDXY-QHyO",
      "name": "Component Lifecycle",
      "resources": {
        "description": "# Component Life Cycle\n\nReact components have a lifecycle consisting of three phases: Mounting, Updating, and Unmounting along with several “lifecycle methods” that you can override to run code at particular times in the process.\n\nIt is not recommended to use lifecycle methods manually. Instead, use the useEffect hook with functional components.",
        "resources": [
          {
            "type": "course",
            "title": "Lifecycle of Reactive Effects",
            "url": "https://react.dev/learn/lifecycle-of-reactive-effects"
          },
          {
            "type": "course",
            "title": "Class Component",
            "url": "https://react.dev/reference/react/Component"
          },
          {
            "type": "article",
            "title": "React component lifecycle: React lifecycle methods & hooks",
            "url": "https://tsh.io/blog/react-component-lifecycle-methods-vs-hooks/"
          },
          {
            "type": "article",
            "title": "The React lifecycle: methods and hooks explained",
            "url": "https://retool.com/blog/the-react-lifecycle-methods-and-hooks-explained#react-hooks-and-the-component-lifecycle"
          },
          {
            "type": "article",
            "title": "React Lifecycle: Methods & Hooks In Detail",
            "url": "https://www.bairesdev.com/blog/react-lifecycle-methods-hooks/"
          },
          {
            "type": "article",
            "title": "lifecycle diagram",
            "url": "https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/"
          }
        ]
      }
    },
    {
      "id": "HeWVCPHqVnnbOn6zIim4K",
      "name": "Lists and Keys",
      "resources": {
        "description": "# Lists and Keys\n\nWhen you render lists in React, you can use the `key` prop to specify a unique key for each item. This key is used to identify which item to update when you want to update a specific item.",
        "resources": [
          {
            "type": "course",
            "title": "Lists and Keys",
            "url": "https://react.dev/learn/rendering-lists#keeping-list-items-in-order-with-key"
          },
          {
            "type": "course",
            "title": "Rendering Lists",
            "url": "https://react.dev/learn/rendering-lists"
          },
          {
            "type": "article",
            "title": "List components in React by Example",
            "url": "https://www.robinwieruch.de/react-list-component/"
          },
          {
            "type": "article",
            "title": "Why do we need the key prop in React?",
            "url": "https://www.robinwieruch.de/react-list-key/"
          }
        ]
      }
    },
    {
      "id": "vdumdIglnouf1KyGIGZnc",
      "name": "Render Props",
      "resources": {
        "description": "# Render Props\n\nThe term 'render props' refers to a technique for sharing code between React components using a prop whose value is a function.\n\nA component with a render prop takes a function that returns a React element and calls it instead of implementing its own render logic.",
        "resources": [
          {
            "type": "course",
            "title": "Render Props in React",
            "url": "https://react.dev/learn/passing-props-to-a-component"
          },
          {
            "type": "article",
            "title": "How to create a Render Prop Component",
            "url": "https://www.robinwieruch.de/react-render-props/"
          },
          {
            "type": "article",
            "title": "Render Props Pattern",
            "url": "https://www.patterns.dev/posts/render-props-pattern/"
          }
        ]
      }
    },
    {
      "id": "_zNAOhFWMcWqP4oxNPCXF",
      "name": "Refs",
      "resources": {
        "description": "# Refs\n\nRefs provide a way to access DOM nodes or React elements created in the render method.\n\nIn the typical React dataflow, props are the only way that parent components interact with their children. To modify a child, you re-render it with new props. However, there are a few cases where you need to imperatively modify a child outside of the typical dataflow. The child to be modified could be an instance of a React component, or it could be a DOM element. For both of these cases, React provides an escape hatch.",
        "resources": [
          {
            "type": "course",
            "title": "Referencing Values with Refs",
            "url": "https://react.dev/learn/referencing-values-with-refs"
          },
          {
            "type": "course",
            "title": "Manipulating the DOM with Refs",
            "url": "https://react.dev/learn/manipulating-the-dom-with-refs"
          },
          {
            "type": "article",
            "title": "Examples of using refs in React",
            "url": "https://www.robinwieruch.de/react-ref/"
          },
          {
            "type": "article",
            "title": "The Complete Guide to useRef() and Refs in React",
            "url": "https://dmitripavlutin.com/react-useref-guide/"
          },
          {
            "type": "article",
            "title": "What Exactly Are Refs? - React - CodeGuage",
            "url": "https://www.codeguage.com/courses/react/refs"
          },
          {
            "type": "video",
            "title": "Learn useRef in 11 Minutes - Web Dev Simplified",
            "url": "https://www.youtube.com/watch?v=t2ypzz6gJm0"
          }
        ]
      }
    },
    {
      "id": "Nex2HcTOYIbfqUzXyxSMY",
      "name": "Events",
      "resources": {
        "description": "# Events\n\nHandling events with React elements is very similar to handling events on DOM elements. There are some syntax differences:\n\n- React events are named using camelCase, rather than lowercase.\n- With JSX you pass a function as the event handler, rather than a string.",
        "resources": [
          {
            "type": "course",
            "title": "Responding to Events",
            "url": "https://react.dev/learn/responding-to-events"
          },
          {
            "type": "course",
            "title": "React Event Object (Synthetic Event)",
            "url": "https://react.dev/reference/react-dom/components/common#react-event-object"
          },
          {
            "type": "article",
            "title": "React Event Handler",
            "url": "https://www.robinwieruch.de/react-event-handler/"
          }
        ]
      }
    },
    {
      "id": "zOENl96GUZRw2PP2KxIck",
      "name": "High Order Components",
      "resources": {
        "description": "# High Order Components\n\nA higher-order component (HOC) is an advanced technique in React for reusing component logic. HOCs are not part of the React API, per se. They are a pattern that emerges from React’s compositional nature.\n\nConcretely, a higher-order component is a function that takes a component and returns a new component.\n\nHigher-order components are not commonly used in modern React code. In order to reuse logic, React hooks are mainly used now.",
        "resources": [
          {
            "type": "article",
            "title": "High-Order Components",
            "url": "https://reactjs.org/docs/higher-order-components.html"
          },
          {
            "type": "article",
            "title": "How to create a Higher-Order Component",
            "url": "https://www.robinwieruch.de/react-higher-order-components/"
          },
          {
            "type": "video",
            "title": "Learn React Higher Order Component (HOC) in 10 Minutes",
            "url": "https://youtu.be/J5P0q7EROfw?si=-8s5h1b0mZSGVgLt"
          },
          {
            "type": "video",
            "title": "ReactJS Tutorial - Higher Order Components (Part 1)",
            "url": "https://www.youtube.com/watch?v=B6aNv8nkUSw"
          },
          {
            "type": "video",
            "title": "ReactJS Tutorial - Higher Order Components (Part 2)",
            "url": "https://www.youtube.com/watch?v=rsBQj6X7UK8"
          },
          {
            "type": "video",
            "title": "ReactJS Tutorial - Higher Order Components (Part 3)",
            "url": "https://www.youtube.com/watch?v=l8V59zIdBXU"
          }
        ]
      }
    },
    {
      "id": "LbLQhonBqzxHU6B-L--Vq",
      "name": "Hooks",
      "resources": {
        "description": "# Hooks\n\nHooks were introduced in React 16.8 and they let us use React's features-like managing your component's state and or performing an after effect when certain changes occur in state(s) without writing a class.",
        "resources": [
          {
            "type": "course",
            "title": "Hooks Reference",
            "url": "https://react.dev/reference/react"
          },
          {
            "type": "article",
            "title": "Explore top posts about React Hooks",
            "url": "https://app.daily.dev/tags/react-hooks?ref=roadmapsh"
          }
        ]
      }
    },
    {
      "id": "YEpkbNzEMzS6wAKg85J_N",
      "name": "useState",
      "resources": {
        "description": "# useState",
        "resources": []
      }
    },
    {
      "id": "8OnzX03hkZ9K9i__tjmFX",
      "name": "useEffect",
      "resources": {
        "description": "# useEffect Hook\n\n`useEffect` is a special hook that lets you run side effects in React. It is similar to componentDidMount and componentDidUpdate, but it only runs when the component (or some of its props) changes and during the initial mount.",
        "resources": [
          {
            "type": "course",
            "title": "Using the Effect Hook",
            "url": "https://react.dev/reference/react/useEffect"
          },
          {
            "type": "article",
            "title": "React useEffect Hook by Example",
            "url": "https://www.robinwieruch.de/react-useeffect-hook/"
          }
        ]
      }
    },
    {
      "id": "HX75SExuzR5AP7TQ94qid",
      "name": "Creating Custom Hooks",
      "resources": {
        "description": "# Writing Custom Hooks\n\nBuilding your own Hooks lets you extract component logic into reusable functions.",
        "resources": [
          {
            "type": "course",
            "title": "Reusing Logic with Custom Hooks",
            "url": "https://react.dev/learn/reusing-logic-with-custom-hooks"
          },
          {
            "type": "video",
            "title": "Custom Hooks in React",
            "url": "https://www.youtube.com/watch?v=I2Bgi0Qcdvc"
          },
          {
            "type": "article",
            "title": "How to create a custom Hook (2) followed by Examples",
            "url": "https://www.robinwieruch.de/react-custom-hook/"
          },
          {
            "type": "article",
            "title": "Explore top posts about React Hooks",
            "url": "https://app.daily.dev/tags/react-hooks?ref=roadmapsh"
          }
        ]
      }
    },
    {
      "id": "dgoDNDtW2_q9R9yhkXrcz",
      "name": "useCallback",
      "resources": {
        "description": "# useCallback\n\n`useCallback` is a React hook that returns a memoized version of a callback function. It's used to optimize performance by preventing unnecessary re-renders. Specifically, it helps avoid recreating functions when their dependencies haven't changed, which can be useful when passing callbacks to child components that rely on referential equality to prevent re-rendering.",
        "resources": [
          {
            "type": "course",
            "title": "React Documentation on useCallback",
            "url": "https://react.dev/reference/react/useCallback"
          },
          {
            "type": "article",
            "title": "useCallback Explained in Depth",
            "url": "https://kentcdodds.com/blog/usememo-and-usecallback"
          },
          {
            "type": "article",
            "title": "useCallback Hook: An Introductory Guide",
            "url": "https://dmitripavlutin.com/dont-overuse-react-usecallback/"
          }
        ]
      }
    },
    {
      "id": "t_laNdMmdLApYszqXRdWg",
      "name": "useRef",
      "resources": {
        "description": "# useRef\n\n`useRef` is a React hook that provides a way to create a mutable reference that persists across component re-renders. It stores a value that doesn't cause re-renders when it changes.",
        "resources": [
          {
            "type": "course",
            "title": "useRef",
            "url": "https://react.dev/reference/react/useRef"
          },
          {
            "type": "video",
            "title": "WebDevSimplified",
            "url": "https://www.youtube.com/watch?v=t2ypzz6gJm0"
          }
        ]
      }
    },
    {
      "id": "w3bNp7OkehI1gjx8NzlC8",
      "name": "useMemo",
      "resources": {
        "description": "# useMemo\n\n`useMemo` is a React hook that memoizes the result of a function. It is used to optimize performance by caching the result of a function and returning the cached result when the inputs to the function have not changed.",
        "resources": [
          {
            "type": "course",
            "title": "useMemo Docs",
            "url": "https://react.dev/reference/react/useMemo"
          },
          {
            "type": "article",
            "title": "useMemo and useCallback - Josh W. Comeau",
            "url": "https://www.joshwcomeau.com/react/usememo-and-usecallback/"
          }
        ]
      }
    },
    {
      "id": "v48Mv0wQqjXbvy8x6gDjQ",
      "name": "useReducer",
      "resources": {
        "description": "# useReducer\n\n`useReducer`: An alternative to useState. Accepts a reducer of type (state, action) => newState, and returns the current state paired with a dispatch method. (If you’re familiar with Redux, you already know how this works.)",
        "resources": [
          {
            "type": "course",
            "title": "useReducer Docs",
            "url": "https://react.dev/reference/react/useReducer"
          },
          {
            "type": "article",
            "title": "The React useReducer Hook",
            "url": "https://www.telerik.com/blogs/react-usereducer-hook"
          },
          {
            "type": "article",
            "title": "A guide to the React useReducer Hook",
            "url": "https://blog.logrocket.com/react-usereducer-hook-ultimate-guide/"
          },
          {
            "type": "video",
            "title": "Learn React Hooks: useReducer - Simply Explained!",
            "url": "https://www.youtube.com/watch?v=rgp_iCVS8ys&t"
          }
        ]
      }
    },
    {
      "id": "D5_O-uElftYGQr_bTU_se",
      "name": "useContext",
      "resources": {
        "description": "# useContext\n\nThe `useContext` Hook lets us share data between components without having to pass props down through every level of the component tree.\nThis is particularly useful when many components need to access the same data or when components are deeply nested.",
        "resources": [
          {
            "type": "course",
            "title": "Using useContext",
            "url": "https://react.dev/reference/react/useContext"
          },
          {
            "type": "course",
            "title": "Explore the concept of context",
            "url": "https://react.dev/learn/passing-data-deeply-with-context"
          },
          {
            "type": "video",
            "title": "Learn useContext In 13 Minutes",
            "url": "https://www.youtube.com/watch?v=5LrDIWkK_Bc"
          }
        ]
      }
    },
    {
      "id": "FK59Zsm5ENA9g11XWCan_",
      "name": "useState",
      "resources": {
        "description": "# useState Hook\n\n`useState` hook is used to manage the state of a component in functional components. Calling `useState` returns an array with two elements: the current state value and a function to update the state.",
        "resources": [
          {
            "type": "course",
            "title": "Using the State Hook",
            "url": "https://react.dev/reference/react/useState"
          },
          {
            "type": "article",
            "title": "React useState Hook by Example",
            "url": "https://www.robinwieruch.de/react-usestate-hook/"
          }
        ]
      }
    },
    {
      "id": "mkyU0ug8MXxV4biHuOity",
      "name": "Hooks Best Practices",
      "resources": {
        "description": "# Hooks Best Practices\n\nTo fully leverage the capabilities of React Hooks, it is crucial to adopt best practices that not only enhance code readability but also optimize performance. By adhering to these practices, developers can create cleaner, more maintainable components that make the most of React's powerful features, leading to a more efficient and enjoyable development experience.",
        "resources": [
          {
            "type": "course",
            "title": "Rules of Hooks",
            "url": "https://react.dev/reference/rules/rules-of-hooks/"
          },
          {
            "type": "article",
            "title": "React Hooks Best Practices: Unlocking Efficiency and Elegance",
            "url": "https://medium.com/womenintechnology/react-hooks-best-practices-unlocking-efficiency-and-elegance-da23f7e1418a"
          },
          {
            "type": "article",
            "title": "Mastering React Hooks: Best Practices and Common Pitfalls",
            "url": "https://dev.to/codesensei/mastering-react-hooks-best-practices-and-common-pitfalls-3d9i"
          },
          {
            "type": "article",
            "title": "React Hooks Cheat Sheet: Best Practices with Examples",
            "url": "https://blog.logrocket.com/react-hooks-cheat-sheet-solutions-common-problems/"
          },
          {
            "type": "article",
            "title": "React Custom Hooks: Best Practices and Examples",
            "url": "https://utopia-insights.dev/react-custom-hooks-best-practices-and-examples/"
          }
        ]
      }
    },
    {
      "id": "NStw6bi_pPB49K41BFSgo",
      "name": "Routers",
      "resources": {
        "description": "# Routing\n\nRouting is an essential concept in Single Page Applications (SPA). When your application is divided into separated logical sections, and all of them are under their own URL, your users can easily share links among each other.",
        "resources": [
          {
            "type": "article",
            "title": "How to use Routing in React JS: A Comprehensive Guide.",
            "url": "https://blog.logrocket.com/react-router-v6-guide/"
          },
          {
            "type": "video",
            "title": "React Router 6 – Tutorial for Beginners.",
            "url": "https://www.youtube.com/watch?v=59IXY5IDrBA"
          }
        ]
      }
    },
    {
      "id": "zWL8VLx_g0SWubavJDs6i",
      "name": "Tanstack Router",
      "resources": {
        "description": "# TanStack Router\n\nTanStack Router is a powerful router for building React applications, offering a range of advanced features to streamline development.",
        "resources": [
          {
            "type": "article",
            "title": "TanStack Router Documentation",
            "url": "https://tanstack.com/router/latest/docs/framework/react/overview"
          },
          {
            "type": "video",
            "title": "TanStack Router - Crash Course",
            "url": "https://www.youtube.com/watch?v=4sslBg8LprE&list=PLOQjd5dsGSxJilh0lBofeY8Qib98kzmF5"
          },
          {
            "type": "video",
            "title": "TanStack Router Vite: Ultimate Guide for Beginners",
            "url": "https://www.youtube.com/watch?v=AN9rD7y9MS8"
          }
        ]
      }
    },
    {
      "id": "jvp43wFkKlGQX2y7IxkbM",
      "name": "React Router",
      "resources": {
        "description": "# React Router\n\nReact router is the most famous library when it comes to implementing routing in React applications.",
        "resources": [
          {
            "type": "course",
            "title": "React Router — Official Website",
            "url": "https://reactrouter.com/"
          }
        ]
      }
    },
    {
      "id": "I7_mX4h-Yywp1YyTJRKXI",
      "name": "State Management",
      "resources": {
        "description": "# State Management\n\nApplication state management is the process of maintaining knowledge of an application's inputs across multiple related data flows that form a complete business transaction -- or a session -- to understand the condition of the app at any given moment. In computer science, an input is information put into the program by the user and state refers to the condition of an application according to its stored inputs -- saved as variables or constants. State can also be described as the collection of preserved information that forms a complete session.",
        "resources": [
          {
            "type": "article",
            "title": "What is State Management?",
            "url": "https://www.techtarget.com/searchapparchitecture/definition/state-management"
          },
          {
            "type": "article",
            "title": "Overview of State in React",
            "url": "https://www.robinwieruch.de/react-state/"
          }
        ]
      }
    },
    {
      "id": "10uL0r388lKh8pWYWqRZD",
      "name": "Context",
      "resources": {
        "description": "# Context\n\nContext provides a way to pass data through the component tree without having to pass props down manually at every level.\n\nIn a typical React application, data is passed top-down (parent to child) via props, but such usage can be cumbersome for certain types of props (e.g. locale preference, UI theme) that are required by many components within an application. Context provides a way to share values like these between components without having to explicitly pass a prop through every level of the tree.",
        "resources": [
          {
            "type": "course",
            "title": "Passing Data Deeply with Context",
            "url": "https://react.dev/learn/passing-data-deeply-with-context"
          },
          {
            "type": "video",
            "title": "React Context API Crash Course",
            "url": "https://www.youtube.com/watch?v=t9WmZFnE6Hg"
          },
          {
            "type": "article",
            "title": "State with useContext and useState/useReducer",
            "url": "https://www.robinwieruch.de/react-state-usereducer-usestate-usecontext/"
          }
        ]
      }
    },
    {
      "id": "nl5imPsdY2oEWlg-9TTuk",
      "name": "Zustand",
      "resources": {
        "description": "# Zustand\n\nZustand is a small, fast and scalable bearbones state-management solution using simplified flux principles. Has a comfy api based on hooks, isn't boilerplatey or opinionated.\n\nZustand is often used as an alternative to other state management libraries, such as Redux and MobX, because of its simplicity and small size. It is particularly well-suited for small to medium-sized applications, where the complexity of larger state management libraries is not required.",
        "resources": [
          {
            "type": "tutorial",
            "title": "Zustand - Official Website",
            "url": "https://github.com/pmndrs/zustand"
          },
          {
            "type": "article",
            "title": "Working with Zustand",
            "url": "https://tkdodo.eu/blog/working-with-zustand"
          },
          {
            "type": "article",
            "title": "Zustand - Official Documentation",
            "url": "https://docs.pmnd.rs/zustand/getting-started/introduction"
          },
          {
            "type": "tutorial",
            "title": "Zustand Repository",
            "url": "https://github.com/pmndrs/zustand"
          },
          {
            "type": "video",
            "title": "Zustand Tutorial for Beginners",
            "url": "https://www.youtube.com/watch?v=AYO4qHAnLQI&t"
          }
        ]
      }
    },
    {
      "id": "yI6XiNW04EL78UL4lkVgd",
      "name": "Jotai",
      "resources": {
        "description": "# Jotai\n\nJotai takes an atomic approach to global React state management.\n\nBuild state by combining atoms and renders are automatically optimized based on atom dependency. This solves the extra re-render issue of React context, eliminates the need for memoization, and provides a similar developer experience to signals while maintaining a declarative programming model.\n\nIt scales from a simple useState replacement to an enterprise TypeScript application with complex requirements. Plus there are plenty of utilities and extensions to help you along the way!\n\n- [@official@Official Website: Jotai](https://jotai.org/)\n- [@video@Jotai React - Better Global State Management](https://www.youtube.com/watch?v=ZcKzPZN7Ids)\n- [@article@State Management on React - Jotai](https://dev.to/kevin-uehara/state-management-on-react-part-3-jotai-i7f)",
        "resources": [
          {
            "type": "course",
            "title": "Official Website: Jotai",
            "url": "https://jotai.org/"
          },
          {
            "type": "video",
            "title": "Jotai React - Better Global State Management",
            "url": "https://www.youtube.com/watch?v=ZcKzPZN7Ids"
          },
          {
            "type": "article",
            "title": "State Management on React - Jotai",
            "url": "https://dev.to/kevin-uehara/state-management-on-react-part-3-jotai-i7f"
          }
        ]
      }
    },
    {
      "id": "DfrCkbD-HEHwLymv10zb5",
      "name": "Writing CSS",
      "resources": {
        "description": "# Styling\n\nWhile \"CSS in JS\" is the most predominant way of styling modern frontend applications, there are several different ways to style your React applications whether it is vanilla CSS, [CSS Modules](https://github.com/css-modules/css-modules), or [CSS in JS](https://css-tricks.com/a-thorough-analysis-of-css-in-js/) etc and each has several frameworks available.",
        "resources": [
          {
            "type": "article",
            "title": "Ways to CSS style a React application",
            "url": "https://www.robinwieruch.de/react-css-styling/"
          }
        ]
      }
    },
    {
      "id": "MnDgQq9Vcxsu3wDqv5uh2",
      "name": "Headless Component Libraries",
      "resources": {
        "description": "# Headless Component Libraries\n\nHeadless component libraries have some powerful state, logic and data management tools that do not enforce any UI structure. Consequently, developers are able to build custom UI components with unique styles but that still benefit from strong reusable logics. This kind of library simplifies complex behaviors and accessibility issues in outdoor environments allowing you to create innovative interfaces. With headless components, developers keep code clean and maintainable as a result of the reusability aspect inherent in these, this also guarantees efficient and accessible components enhancing application quality.",
        "resources": [
          {
            "type": "article",
            "title": "What are headless components?",
            "url": "https://dev.to/verthon/headless-ui-libraries-the-key-to-flexible-and-accessible-user-interfaces-546p"
          },
          {
            "type": "video",
            "title": "Rise of Headless Components",
            "url": "https://www.youtube.com/watch?v=_WtVG_pKsxM"
          },
          {
            "type": "article",
            "title": "Headless Components: A Comprehensive Guide",
            "url": "https://blog.logrocket.com/the-complete-guide-to-building-headless-interface-components-in-react/"
          }
        ]
      }
    },
    {
      "id": "KO3viVIJJREtxXxsocN7j",
      "name": "Tailwind CSS",
      "resources": {
        "description": "# Tailwind CSS\n\nCSS Framework that provides atomic CSS classes to help you style components e.g. `flex`, `pt-4`, `text-center` and `rotate-90` that can be composed to build any design, directly in your markup.",
        "resources": [
          {
            "type": "article",
            "title": "Tailwind Website",
            "url": "https://tailwindcss.com"
          },
          {
            "type": "video",
            "title": "Tailwind CSS Full Course for Beginners",
            "url": "https://www.youtube.com/watch?v=lCxcTsOHrjo"
          },
          {
            "type": "video",
            "title": "Tailwind CSS Crash Course",
            "url": "https://www.youtube.com/watch?v=UBOj6rqRUME"
          },
          {
            "type": "video",
            "title": "Should You Use Tailwind CSS?",
            "url": "https://www.youtube.com/watch?v=hdGsFpZ0J2E"
          },
          {
            "type": "video",
            "title": "Official Screencasts",
            "url": "https://www.youtube.com/c/TailwindLabs/videos"
          },
          {
            "type": "article",
            "title": "Explore top posts about Tailwind CSS",
            "url": "https://app.daily.dev/tags/tailwind-css?ref=roadmapsh"
          }
        ]
      }
    },
    {
      "id": "thfnymb_UIiKxakKfiua5",
      "name": "Component / Libraries",
      "resources": {
        "description": "# Component / Libraries\n\nReact component libraries are collections of pre-built, reusable components that can be used to speed up the development process. They can be styled using CSS in various ways, including traditional CSS files, CSS modules, and CSS-in-JS solutions like styled-components.",
        "resources": [
          {
            "type": "article",
            "title": "MUI: React Component Library",
            "url": "https://mui.com/"
          },
          {
            "type": "article",
            "title": "NextUI.org",
            "url": "https://nextui.org/"
          }
        ]
      }
    },
    {
      "id": "akVNUPOqaTXaSHoQFlkP_",
      "name": "Panda CSS",
      "resources": {
        "description": "# Panda CSS\n\nPanda CSS is CSS-in-JS with build time generated styles, RSC compatible, multi-variant support, and best-in-class developer experience.",
        "resources": [
          {
            "type": "course",
            "title": "Official Website",
            "url": "https://panda-css.com"
          },
          {
            "type": "course",
            "title": "Tutorials and videos to get started with Panda!",
            "url": "https://panda-css.com/learn"
          },
          {
            "type": "video",
            "title": "Panda CSS First Impressions | Theo Reacts",
            "url": "https://www.youtube.com/watch?v=UlY-Ixddjm0"
          },
          {
            "type": "article",
            "title": "Panda CSS – CSS-in-JS without Runtime Overhead",
            "url": "https://infinum.com/blog/panda-css-css-in-js-without-runtime-overhead/"
          }
        ]
      }
    },
    {
      "id": "uqphqAnlcJOLnwHZs5jWu",
      "name": "Chakra UI",
      "resources": {
        "description": "# Chakra UI\n\nChakra UI is a simple, modular and accessible component library that gives you the building blocks you need to build your React applications.",
        "resources": [
          {
            "type": "article",
            "title": "Chakra UI Website",
            "url": "https://chakra-ui.com/"
          },
          {
            "type": "article",
            "title": "Chakra UI Official Getting Started",
            "url": "https://chakra-ui.com/docs/getting-started"
          },
          {
            "type": "video",
            "title": "Official Getting Started Video",
            "url": "https://youtu.be/wI2vqXsjsIo"
          },
          {
            "type": "video",
            "title": "Chakra UI Crash Course",
            "url": "https://youtu.be/s-bIsz-NR3c"
          }
        ]
      }
    },
    {
      "id": "gy7eBxPOlwG8BvxHVLDQ9",
      "name": "Material UI",
      "resources": {
        "description": "# Material UI\n\nMaterial UI is an open-source React component library that implements Google's Material Design.\n\nIt includes a comprehensive collection of prebuilt components that are ready for use in production right out of the box, and features a suite of customization options that make it easy to implement your own custom design system on top of our components.\n\n- [@official@Material UI website](https://mui.com/material-ui/getting-started/)\n- [@video@React Material UI Course](https://www.youtube.com/watch?v=BHEPVdfBAqE&list=PLC3y8-rFHvwh-K9mDlrrcDywl7CeVL2rO)\n- [@video@Material UI with React](https://www.youtube.com/watch?v=5cvg2qZwYrI)",
        "resources": [
          {
            "type": "course",
            "title": "Material UI website",
            "url": "https://mui.com/material-ui/getting-started/"
          },
          {
            "type": "video",
            "title": "React Material UI Course",
            "url": "https://www.youtube.com/watch?v=BHEPVdfBAqE&list=PLC3y8-rFHvwh-K9mDlrrcDywl7CeVL2rO"
          },
          {
            "type": "video",
            "title": "Material UI with React",
            "url": "https://www.youtube.com/watch?v=5cvg2qZwYrI"
          }
        ]
      }
    },
    {
      "id": "njKsYNkwTXPQ1NjlGKXab",
      "name": "Shadcn UI",
      "resources": {
        "description": "# Shadcn UI\n\nShadcn is an open-source framework providing pre-built, accessible, and customizable UI components for rapid web application development. It offers a streamlined approach to construct modern user interfaces.",
        "resources": [
          {
            "type": "course",
            "title": "Official Website",
            "url": "https://ui.shadcn.com/"
          },
          {
            "type": "course",
            "title": "Documentation",
            "url": "https://ui.shadcn.com/docs"
          },
          {
            "type": "video",
            "title": "Shadcn Setup and Tutorial",
            "url": "https://www.youtube.com/watch?v=v0_AT8zaLo8"
          },
          {
            "type": "article",
            "title": "Shadcn Guide",
            "url": "https://blog.logrocket.com/shadcn-ui-adoption-guide/"
          }
        ]
      }
    },
    {
      "id": "awoEhwPKjUcR84XGL6Som",
      "name": "CSS Modules",
      "resources": {
        "description": "# CSS Modules\n\nCSS files in which all class names and animation names are scoped locally by default.",
        "resources": [
          {
            "type": "tutorial",
            "title": "Project GitHub Repository",
            "url": "https://github.com/css-modules/css-modules"
          },
          {
            "type": "article",
            "title": "Using CSS Modules In React App",
            "url": "https://medium.com/@ralph1786/using-css-modules-in-react-app-c2079eadbb87"
          },
          {
            "type": "video",
            "title": "CSS Modules: Why are they great?",
            "url": "https://www.youtube.com/watch?v=pKMWU9OrA2s"
          },
          {
            "type": "article",
            "title": "Explore top posts about CSS",
            "url": "https://app.daily.dev/tags/css?ref=roadmapsh"
          }
        ]
      }
    },
    {
      "id": "XL9XOV2h0BAuA5cFcM5L_",
      "name": "Radix UI",
      "resources": {
        "description": "# Radix UI\n\nRadix UI is an open-source library designed to make it easier to create accessible and customizable User Interface (UI) components in React. It provides developers with a range of `unstyled`, fully `accessible` primitives, giving them complete control over the appearance and behavior of their UI elements.",
        "resources": [
          {
            "type": "course",
            "title": "Getting Started with Radix UI",
            "url": "https://www.radix-ui.com/themes/docs/overview/getting-started"
          },
          {
            "type": "course",
            "title": "Official Website",
            "url": "https://www.radix-ui.com/"
          },
          {
            "type": "video",
            "title": "Radix UI Course",
            "url": "https://www.youtube.com/playlist?list=PLlNdnoKwDZdwANQoaakE8-kYMyKFOETlo"
          },
          {
            "type": "article",
            "title": "What is Radix UI?",
            "url": "https://medium.com/@olivier.trinh/what-is-radix-ui-ff535bbb52d5"
          }
        ]
      }
    },
    {
      "id": "RvDfKoa_HIW3QDBfkPv3m",
      "name": "React Aria",
      "resources": {
        "description": "# React Aria\n\nReact Aria is style-free out of the box, allowing you to build custom designs to fit your application or design system using any styling and animation solution. Each component is broken down into individual parts with built-in states, render props, and slots that make styling a breeze.",
        "resources": [
          {
            "type": "course",
            "title": "Getting Started with React Aria",
            "url": "https://react-spectrum.adobe.com/react-aria/"
          },
          {
            "type": "video",
            "title": "Why You Should Use React Aria Components",
            "url": "https://www.youtube.com/watch?v=lTPh6NGLAmk"
          }
        ]
      }
    },
    {
      "id": "kiCTo0U6VgNON8rv_Ktlj",
      "name": "Ark UI",
      "resources": {
        "description": "# Ark UI\n\nIt is a modern and versatile user interface framework designed to streamline the development of responsive and accessible web applications. It provides a `comprehensive set` of components and tools that simplify the process of building user interfaces, allowing developers to focus on functionality and design. With a strong emphasis on flexibility and ease of use, Ark UI enables rapid prototyping and `scalable solutions`, ensuring a consistent and polished user experience across various devices and platforms. Its modular architecture and extensive documentation make it an excellent choice for developers looking to enhance productivity and maintain high standards in their UI design.",
        "resources": [
          {
            "type": "course",
            "title": "Official Website",
            "url": "https://ark-ui.com/"
          },
          {
            "type": "course",
            "title": "Official Website",
            "url": "https://ark-ui.com/react/docs/overview/introduction"
          },
          {
            "type": "video",
            "title": "Hands On ARK UI",
            "url": "https://www.youtube.com/watch?v=zjo-77I0unk"
          },
          {
            "type": "article",
            "title": "What is ARK UI?",
            "url": "https://shaxadd.medium.com/enhance-your-user-interfaces-with-ark-ui-a-comprehensive-guide-7e87dd0a79cf"
          }
        ]
      }
    },
    {
      "id": "b4AP2OggxFAwsQtUwiUJJ",
      "name": "API Calls",
      "resources": {
        "description": "# API Calls\n\nAPIs, short for Application Programming Interfaces, are software-to-software interfaces. Meaning, they allow different applications to talk to each other and exchange information or functionality. This allows businesses to access another business’s data, piece of code, software, or services in order to extend the functionality of their own products — all while saving time and money.\nThere are several options available to make API calls from your React.js applications.",
        "resources": [
          {
            "type": "article",
            "title": "AJAX and APIs",
            "url": "https://reactjs.org/docs/faq-ajax.html"
          },
          {
            "type": "article",
            "title": "How to fetch data in React",
            "url": "https://www.robinwieruch.de/react-hooks-fetch-data/"
          }
        ]
      }
    },
    {
      "id": "8nMbfGxe3STMbrAVcqHHh",
      "name": "Apollo",
      "resources": {
        "description": "# Apollo\n\nApollo is a platform for building a unified graph, a communication layer that helps you manage the flow of data between your application clients (such as web and native apps) and your back-end services.",
        "resources": [
          {
            "type": "article",
            "title": "Apollo Website",
            "url": "https://www.apollographql.com"
          },
          {
            "type": "article",
            "title": "Official Docs",
            "url": "https://www.apollographql.com/docs/"
          },
          {
            "type": "video",
            "title": "Official YouTube Channel",
            "url": "https://www.youtube.com/c/ApolloGraphQL/"
          },
          {
            "type": "video",
            "title": "GraphQL With React Tutorial - Apollo Client",
            "url": "https://www.youtube.com/watch?v=YyUWW04HwKY"
          },
          {
            "type": "article",
            "title": "Explore top posts about Apollo",
            "url": "https://app.daily.dev/tags/apollo?ref=roadmapsh"
          }
        ]
      }
    },
    {
      "id": "cLfM342sZfsCwmPPxQpEI",
      "name": "Relay",
      "resources": {
        "description": "# Relay\n\nRelay is a JavaScript client used in the browser to fetch GraphQL data. It's a JavaScript framework developed by Facebook for managing and fetching data in React applications. It is built with scalability in mind in order to power complex applications like Facebook. The ultimate goal of GraphQL and Relay is to deliver instant UI-response interactions.",
        "resources": [
          {
            "type": "course",
            "title": "Official Website",
            "url": "https://relay.dev/"
          },
          {
            "type": "course",
            "title": "Introduction to Relay modern",
            "url": "https://relay.dev/docs/"
          }
        ]
      }
    },
    {
      "id": "9M5jRu0pj8KMvg9f-2oqZ",
      "name": "urql",
      "resources": {
        "description": "# urql\n\nurql (Universal React Query Library) is a library for managing GraphQL data in React applications. It is developed and maintained by Formidable Labs and is available as open-source software.\n\nurql is designed to be easy to use and flexible, with a simple API for performing GraphQL queries and mutations. It is based on the concept of a client, which is used to manage the GraphQL data for an application. The client provides a set of utilities and APIs for managing GraphQL data, including:\n\n- executeQuery: A utility for executing a GraphQL query.\n- executeMutation: A utility for executing a GraphQL mutation.\n- useQuery: A hook for executing a GraphQL query and accessing the result in a component.\n- useMutation: A hook for executing a GraphQL mutation and accessing the result in a component.\n\nurql is often used as an alternative to other GraphQL libraries, such as Apollo Client, because of its simplicity and lightweight size. It is particularly well-suited for small to medium-sized React applications where the complexity of other GraphQL libraries may not be required.",
        "resources": [
          {
            "type": "article",
            "title": "urql - Formidable Labs",
            "url": "https://formidable.com/open-source/urql/"
          }
        ]
      }
    },
    {
      "id": "-ea1KsXEyz-4voHXklG_J",
      "name": "swr",
      "resources": {
        "description": "# SWR\n\nSWR is a React Hooks library for data fetching.\n\nThe name “SWR” is derived from stale-while-revalidate, a cache invalidation strategy popularized by HTTP RFC 5861. SWR first returns the data from cache (stale), then sends the request (revalidate), and finally comes with the up-to-date data again.\n\nWith just one hook, you can significantly simplify the data fetching logic in your project.",
        "resources": [
          {
            "type": "article",
            "title": "SWR: React Hooks for Data Fetching",
            "url": "https://swr.vercel.app/"
          },
          {
            "type": "article",
            "title": "Explore top posts about Next.js",
            "url": "https://app.daily.dev/tags/nextjs?ref=roadmapsh"
          }
        ]
      }
    },
    {
      "id": "5EPmbiNdP_vhIXclv_GjV",
      "name": "react-query",
      "resources": {
        "description": "# React Query\n\nPowerful asynchronous state management, server-state utilities and data fetching for TS/JS, React, Solid, Svelte and Vue.",
        "resources": [
          {
            "type": "tutorial",
            "title": "TanStack Query",
            "url": "https://github.com/TanStack/query"
          },
          {
            "type": "video",
            "title": "React Query in 100 Seconds",
            "url": "https://www.youtube.com/watch?v=novnyCaa7To"
          },
          {
            "type": "video",
            "title": "React Query Tutorial for Beginners - Complete Playlist",
            "url": "https://www.youtube.com/playlist?list=PLC3y8-rFHvwjTELCrPrcZlo6blLBUspd2"
          },
          {
            "type": "article",
            "title": "Explore top posts about React",
            "url": "https://app.daily.dev/tags/react?ref=roadmapsh"
          }
        ]
      }
    },
    {
      "id": "ElqWQClryfSYdL7P_mgYK",
      "name": "Axios",
      "resources": {
        "description": "# Axios\n\nThe most common way for frontend programs to communicate with servers is through the HTTP protocol. You are probably familiar with the Fetch API and the XMLHttpRequest interface, which allows you to fetch resources and make HTTP requests.\n\nAxios is a client HTTP API based on the XMLHttpRequest interface provided by browsers.",
        "resources": [
          {
            "type": "article",
            "title": "Axios Getting Started",
            "url": "https://axios-http.com/docs/intro"
          },
          {
            "type": "article",
            "title": "How to make HTTP requests with Axios",
            "url": "https://blog.logrocket.com/how-to-make-http-requests-like-a-pro-with-axios/#why"
          },
          {
            "type": "article",
            "title": "Explore top posts about Axios",
            "url": "https://app.daily.dev/tags/axios?ref=roadmapsh"
          }
        ]
      }
    },
    {
      "id": "h49-tjEkKcq7d7ikRHIOx",
      "name": "rtk-query",
      "resources": {
        "description": "# rtk-query\n\n[RTK Query](https://redux-toolkit.js.org/rtk-query/overview) is a data fetching and caching tool that is included in the Redux Toolkit package. It is designed to simplify common use cases for fetching data, including caching, polling, and invalidation.",
        "resources": [
          {
            "type": "article",
            "title": "RTK Query - Official Website",
            "url": "https://redux-toolkit.js.org/rtk-query/overview"
          }
        ]
      }
    },
    {
      "id": "e_lwZ-a72-tAan2KDX6k3",
      "name": "Testing",
      "resources": {
        "description": "# Testing\n\nA key to building software that meets requirements without defects is testing. Software testing helps developers know they are building the right software. When tests are run as part of the development process (often with continuous integration tools), they build confidence and prevent regressions in the code.",
        "resources": [
          {
            "type": "article",
            "title": "What is Software Testing?",
            "url": "https://www.guru99.com/software-testing-introduction-importance.html"
          },
          {
            "type": "article",
            "title": "Testing Pyramid",
            "url": "https://www.browserstack.com/guide/testing-pyramid-for-test-automation"
          },
          {
            "type": "article",
            "title": "Explore top posts about Testing",
            "url": "https://app.daily.dev/tags/testing?ref=roadmapsh"
          }
        ]
      }
    },
    {
      "id": "opa61u9gYgSpoPtxp58wu",
      "name": "Jest",
      "resources": {
        "description": "# Jest\n\nJest is a delightful JavaScript Testing Framework with a focus on simplicity. It works with projects using: Babel, TypeScript, Node, React, Angular, Vue and more!",
        "resources": [
          {
            "type": "course",
            "title": "Jest Website",
            "url": "https://jestjs.io/"
          },
          {
            "type": "article",
            "title": "Explore top posts about Jest",
            "url": "https://app.daily.dev/tags/jest?ref=roadmapsh"
          },
          {
            "type": "article",
            "title": "Testing JavaScript with Jest on Vultr",
            "url": "https://developer.mozilla.org/en-US/blog/test-javascript-with-jest-on-vultr/"
          }
        ]
      }
    },
    {
      "id": "LULjhsPNONyI5912DKzPw",
      "name": "Vitest",
      "resources": {
        "description": "# Vitest\n\nVitest is a fast Vite-native unit test framework with out-of-box ESM, TypeScript and JSX support.\nWorks on React, Vue, Svelte and more projects created with Vite",
        "resources": [
          {
            "type": "course",
            "title": "Vitest Website",
            "url": "https://vitest.dev/"
          },
          {
            "type": "video",
            "title": "Testing with Vitest",
            "url": "https://www.youtube.com/watch?v=cM_AeQHzlGg"
          }
        ]
      }
    },
    {
      "id": "cQllxv7qGbRtM9O5llgN6",
      "name": "react-testing-library",
      "resources": {
        "description": "# React Testing Library\n\nThe React Testing Library is a very lightweight solution for testing React components. It provides light utility functions on top of react-dom and react-dom/test-utils, in a way that encourages better testing practices. Its primary guiding principle is: The more your tests resemble the way your software is used, the more confidence they can give you.",
        "resources": [
          {
            "type": "article",
            "title": "React Testing Library",
            "url": "https://testing-library.com/docs/react-testing-library/intro/"
          },
          {
            "type": "article",
            "title": "How to use React Testing Library",
            "url": "https://www.robinwieruch.de/react-testing-library/"
          },
          {
            "type": "article",
            "title": "Explore top posts about React",
            "url": "https://app.daily.dev/tags/react?ref=roadmapsh"
          }
        ]
      }
    },
    {
      "id": "zN7Ps1puD-YpHbKi1pHH8",
      "name": "Cypress",
      "resources": {
        "description": "# Cypress\n\nCypress framework is a JavaScript-based end-to-end testing framework built on top of Mocha – a feature-rich JavaScript test framework running on and in the browser, making asynchronous testing simple and convenient. It also uses a BDD/TDD assertion library and a browser to pair with any JavaScript testing framework.",
        "resources": [
          {
            "type": "course",
            "title": "Official Website",
            "url": "https://www.cypress.io/"
          },
          {
            "type": "article",
            "title": "Official Documentation",
            "url": "https://docs.cypress.io/guides/overview/why-cypress#Other"
          },
          {
            "type": "video",
            "title": "Cypress End-to-End Testing",
            "url": "https://www.youtube.com/watch?v=7N63cMKosIE"
          },
          {
            "type": "article",
            "title": "Explore top posts about Cypress",
            "url": "https://app.daily.dev/tags/cypress?ref=roadmapsh"
          }
        ]
      }
    },
    {
      "id": "g39P0c6M2sHNoUPs0m8tr",
      "name": "Playwright",
      "resources": {
        "description": "# Playwright\n\nPlaywright Test was created specifically to accommodate the needs of end-to-end testing. Playwright supports all modern rendering engines including Chromium, WebKit, and Firefox. Test on Windows, Linux, and macOS, locally or on CI, headless or headed with native mobile emulation of Google Chrome for Android and Mobile Safari.Playwright leverages the DevTools protocol to write powerful, stable automated tests.Playwright can actually see into and control the browser rather than relying on a middle translation layer, it allows for the simulation of more insightful and relevant user scenarios.",
        "resources": [
          {
            "type": "course",
            "title": "Official Website: Playwright",
            "url": "https://playwright.dev/"
          },
          {
            "type": "video",
            "title": "Get started with end-to-end testing: Playwright",
            "url": "https://www.youtube.com/playlist?list=PLQ6Buerc008ed-F9OksF7ek37wR3y916p"
          },
          {
            "type": "article",
            "title": "Playwright Tutorial: Learn Basics and Setup",
            "url": "https://www.browserstack.com/guide/playwright-tutorial"
          }
        ]
      }
    },
    {
      "id": "W-atg_Msa9uPLr6RXAKSb",
      "name": "Frameworks",
      "resources": {
        "description": "# SSR Frameworks\n\nServer-side rendering (SSR) is a technique for rendering a JavaScript application on the server, rather than in the browser. This can improve the performance and user experience of a web application, as the initial render of the application is done on the server and the content is sent to the browser as a fully-rendered HTML page.\n\nThere are several frameworks and libraries available for server-side rendering React applications, most common being Next.js and Remix:",
        "resources": [
          {
            "type": "article",
            "title": "Next.js",
            "url": "https://nextjs.org/"
          },
          {
            "type": "video",
            "title": "Next.js 14 Full Course 2024",
            "url": "https://www.youtube.com/watch?v=wm5gMKuwSYk"
          },
          {
            "type": "article",
            "title": "Remix",
            "url": "https://remix.run/"
          },
          {
            "type": "video",
            "title": "Remix Crash Course",
            "url": "https://www.youtube.com/watch?v=RBYJTop1e-g"
          }
        ]
      }
    },
    {
      "id": "HdWq9ue0JdwmwqSIN2OD_",
      "name": "Next.js",
      "resources": {
        "description": "# Next.js\n\nNext.js is an open-source development framework built on top of Node.js enabling React based web applications functionalities such as server-side rendering and generating static websites.",
        "resources": [
          {
            "type": "course",
            "title": "Official Website",
            "url": "https://nextjs.org/"
          },
          {
            "type": "course",
            "title": "Official Docs for Getting Started",
            "url": "https://nextjs.org/docs/getting-started"
          },
          {
            "type": "video",
            "title": "Next.js Full course",
            "url": "https://www.youtube.com/watch?v=9P8mASSREYM\\&list=PLC3y8-rFHvwgC9mj0qv972IO5DmD-H0ZH"
          },
          {
            "type": "article",
            "title": "Mastering Next.js",
            "url": "https://masteringnextjs.com/"
          },
          {
            "type": "video",
            "title": "Next.js for Beginners - freeCodeCamp",
            "url": "https://youtu.be/KjY94sAKLlw?si=orve81YcY8Fm2vDy"
          },
          {
            "type": "article",
            "title": "Explore top posts about JavaScript",
            "url": "https://app.daily.dev/tags/javascript?ref=roadmapsh"
          }
        ]
      }
    },
    {
      "id": "_HoZkE7FH-v3wI_722ZTF",
      "name": "Astro",
      "resources": {
        "description": "# Astro\n\nAstro is the web framework for building content-driven websites like blogs, marketing, and e-commerce. Astro is best-known for pioneering a new frontend architecture to reduce JavaScript overhead and complexity compared to other frameworks. If you need a website that loads fast and has great SEO, then Astro is for you.",
        "resources": [
          {
            "type": "course",
            "title": "Astro Website",
            "url": "https://astro.build/"
          },
          {
            "type": "video",
            "title": "Astro Crash Course in 60 Minutes",
            "url": "https://www.youtube.com/watch?v=NniT0vKyn-E"
          },
          {
            "type": "video",
            "title": "How To: Add/Integrate React.js and TailwindCss into Astro framework",
            "url": "https://www.youtube.com/watch?v=d6CsWTVa42o"
          }
        ]
      }
    },
    {
      "id": "-WjJBYCmRRj08n_9HxohY",
      "name": "react-router",
      "resources": {
        "description": "# react-router\n\nThere used to be Remix in this list but they announced to merge Remix into react-router after v7.",
        "resources": [
          {
            "type": "course",
            "title": "Official Website",
            "url": "https://remix.run/"
          },
          {
            "type": "course",
            "title": "Announcement to merge Remix into react-router",
            "url": "https://remix.run/blog/merging-remix-and-react-router"
          }
        ]
      }
    },
    {
      "id": "KHcC5pFN3qLnsbPPKpYd2",
      "name": "Forms",
      "resources": {
        "description": "# Forms\n\nAlthough you can build forms using vanilla React, it normally requires a lot of boilerplate code. This is because the form is built using a combination of state and props. To make it easier to manage forms, we use some sort of library.",
        "resources": [
          {
            "type": "article",
            "title": "How to use Forms in React",
            "url": "https://www.robinwieruch.de/react-form/"
          },
          {
            "type": "video",
            "title": "React Forms: the SIMPLEST way",
            "url": "https://www.youtube.com/watch?v=CT-72lTXdPg"
          }
        ]
      }
    },
    {
      "id": "_5ht0PAdVOJWPzTRS1mVg",
      "name": "React Hook Form",
      "resources": {
        "description": "# React hook form\n\nReact hook form is an opensource form library for react. Performant, flexible and extensible forms with easy-to-use validation.",
        "resources": [
          {
            "type": "article",
            "title": "React Hook Form: Official Website",
            "url": "https://react-hook-form.com/"
          },
          {
            "type": "tutorial",
            "title": "react-hook-form/react-hook-form",
            "url": "https://github.com/react-hook-form/react-hook-form"
          },
          {
            "type": "article",
            "title": "Explore top posts about React",
            "url": "https://app.daily.dev/tags/react?ref=roadmapsh"
          }
        ]
      }
    },
    {
      "id": "gr1CaLvL7tFOkIRywSsID",
      "name": "Formik",
      "resources": {
        "description": "# Formik\n\nFormik is another famous opensource form library that helps with getting values in and out of form state, validation and error messages, and handling form submissions.",
        "resources": [
          {
            "type": "course",
            "title": "Official Website — Formik",
            "url": "https://formik.org/"
          },
          {
            "type": "video",
            "title": "Formik - Building React Forms easier",
            "url": "https://www.youtube.com/watch?v=khGypss-RJs"
          },
          {
            "type": "video",
            "title": "React Formik Tutorial with Yup (React Form Validation)",
            "url": "https://www.youtube.com/watch?v=7Ophfq0lEAY"
          },
          {
            "type": "tutorial",
            "title": "formik/formik",
            "url": "https://github.com/formik/formik"
          }
        ]
      }
    },
    {
      "id": "UNlvRp6k3_RDoTAAIEfJ1",
      "name": "Types & Validation",
      "resources": {
        "description": "# Types & Validation\n\n**Typescript** provides a static type system that helps you in avoiding mistakes during the development and provides other features (e.g. IDE support) that help you improve your productivity.\n\nOne thing you should note is that TypeScript can only help you avoid mistakes during the development. We can't rely on it to validate a client's input. **Zod** is a powerful validation library that allows us to validate: form input, local storage, API contracts and much more using their typesafe implementation.",
        "resources": [
          {
            "type": "article",
            "title": "What is TypeScript and why would I use it in place of JavaScript?",
            "url": "https://stackoverflow.com/questions/12694530/what-is-typescript-and-why-would-i-use-it-in-place-of-javascript"
          },
          {
            "type": "article",
            "title": "When Use Zod",
            "url": "https://www.totaltypescript.com/when-should-you-use-zod"
          }
        ]
      }
    },
    {
      "id": "ElgRwv5LSVg5FXGx-2K2s",
      "name": "TypeScript",
      "resources": {
        "description": "# TypeScript\n\nTypeScript is a strongly typed programming language that builds on JavaScript, giving you better tooling at any scale.",
        "resources": [
          {
            "type": "course",
            "title": "Official Website",
            "url": "https://www.typescriptlang.org/"
          },
          {
            "type": "article",
            "title": "The TypeScript Handbook",
            "url": "https://www.typescriptlang.org/docs/handbook/intro.html"
          },
          {
            "type": "video",
            "title": "TypeScript for Beginners",
            "url": "https://www.youtube.com/watch?v=BwuLxPH8IDs"
          },
          {
            "type": "article",
            "title": "Explore top posts about TypeScript",
            "url": "https://app.daily.dev/tags/typescript?ref=roadmapsh"
          }
        ]
      }
    },
    {
      "id": "K3RZ8ESxWCpLKHePF87Hy",
      "name": "Zod",
      "resources": {
        "description": "# Zod\n\nZod is a TypeScript-first schema declaration and validation library. I'm using the term \"schema\" to broadly refer to any data type, from a simple string to a complex nested object.\n\nZod is designed to be as developer-friendly as possible. The goal is to eliminate duplicate type declarations. With Zod, you declare a validator once and Zod will automatically infer the static TypeScript type. It's easy to compose simpler types into complex data structures.",
        "resources": [
          {
            "type": "course",
            "title": "Zod Website",
            "url": "https://zod.dev/"
          },
          {
            "type": "video",
            "title": "Learn Zod In 30 Minutes",
            "url": "https://www.youtube.com/watch?v=L6BE-U3oy80"
          }
        ]
      }
    },
    {
      "id": "bRpeoo9zXrnZ2IHSI7JX4",
      "name": "Animation",
      "resources": {
        "description": "# Animation\n\nAnimation in React can be achieved using various methods, such as CSS transitions, keyframes, or libraries like `react-spring`, `framer-motion`, and `GSAP` (GreenSock Animation Platform). CSS transitions are ideal for simple animations, where you can toggle classes or manipulate inline styles to create smooth transitions. For more complex and interactive animations, libraries like `react-spring` provide a declarative approach, allowing you to create animations by defining spring physics or interpolating values. `framer-motion` offers a rich API to handle complex animations, gestures, and even layout transitions with ease. `GSAP` is another powerful library that excels at creating high-performance animations, offering fine-grained control over every aspect of the animation process. These tools integrate seamlessly with React's component-driven architecture, enabling you to create responsive and dynamic user interfaces.",
        "resources": [
          {
            "type": "article",
            "title": "Framer Motion Docs",
            "url": "https://www.framer.com/motion/"
          },
          {
            "type": "article",
            "title": "GSAP Docs",
            "url": "https://gsap.com/docs/v3/"
          },
          {
            "type": "article",
            "title": "React Spring Docs",
            "url": "https://www.react-spring.dev/docs/getting-started"
          }
        ]
      }
    },
    {
      "id": "SUeXDkmOLipdRP4fSrZOH",
      "name": "Server APIs",
      "resources": {
        "description": "# Server APIs\n\nThe react-dom/server APIs let you render React components to HTML on the server. These APIs are only used on the server at the top level of your app to generate the initial HTML. A [framework](https://react.dev/learn/start-a-new-react-project#production-grade-react-frameworks) may call them for you. Most of your components don’t need to import or use them.",
        "resources": [
          {
            "type": "course",
            "title": "Documentation For API",
            "url": "https://react.dev/reference/react-dom/server"
          }
        ]
      }
    },
    {
      "id": "H6-XGDjs4f-qbv13v5av0",
      "name": "Framer Motion",
      "resources": {
        "description": "# Framer Motion\n\nFramer Motion is a popular open-source motion library for React that allows developers to create sophisticated animations and interactions with ease. It is designed to be simple to use yet powerful, providing a rich set of tools to animate elements in a declarative way.\n\nIt powers the amazing animations and interactions in Framer, the web builder for creative pros. Zero code, maximum speed.",
        "resources": [
          {
            "type": "course",
            "title": "Framer Motion Website",
            "url": "https://www.framer.com/motion/introduction/"
          },
          {
            "type": "video",
            "title": "Framer Motion Crash Course with React & TS",
            "url": "https://www.youtube.com/watch?v=hjbxaYTMhy0&list=PLA4qBVt61k3Phpwt7uqaptIg9NYZ5aNu_"
          }
        ]
      }
    },
    {
      "id": "WzoB5B6SdOI4Mzv6U51nY",
      "name": "react spring",
      "resources": {
        "description": "# react spring\n\nReact Spring is a popular animation library for React that leverages the principles of spring physics to create smooth, natural-looking animations. Unlike traditional animation libraries that rely on keyframes and linear transitions, React Spring uses spring-based physics to produce fluid and realistic animations that can dynamically respond to user interactions and state changes.",
        "resources": [
          {
            "type": "course",
            "title": "React Spring — Official Website",
            "url": "https://www.react-spring.dev/"
          },
          {
            "type": "video",
            "title": "React Spring Crash Course",
            "url": "https://www.youtube.com/watch?v=f2vdduklY20&list=PLLnpHn493BHGrM7tAQL8qVtqwqzbuuE5_"
          },
          {
            "type": "article",
            "title": "How to Create Interactive Animations Using React Spring",
            "url": "https://www.sitepoint.com/react-spring-interactive-animations/"
          }
        ]
      }
    },
    {
      "id": "y2dI1DVLWKAkv6VRpgaQa",
      "name": "GSock",
      "resources": {
        "description": "# GSock\n\n`GSAP` (GreenSock Animation Platform) is a framework-agnostic JavaScript animation library that turns developers into animation superheroes. Build high-performance animations that work in every major browser. Animate CSS, SVG, canvas, React, Vue, WebGL, colors, strings, motion paths, generic objects...anything JavaScript can touch!",
        "resources": [
          {
            "type": "course",
            "title": "GSAP: Homepage",
            "url": "https://gsap.com/docs/v3/"
          },
          {
            "type": "article",
            "title": "The Beginner's Guide to the GreenSock Animation Platform",
            "url": "https://www.freecodecamp.org/news/the-beginners-guide-to-the-greensock-animation-platform-7dc9fd9eb826/"
          },
          {
            "type": "video",
            "title": "Intro to Greensock Web Animation",
            "url": "https://www.youtube.com/watch?v=EOa7ccPWvXg"
          }
        ]
      }
    },
    {
      "id": "_F3WMxhzaK9F8_-zHDDMF",
      "name": "Suspense",
      "resources": {
        "description": "# Suspense\n\nReact Suspense is a feature in React that allows components to \"suspend\" rendering while they are waiting for something to happen, such as data to be fetched from an API or an image to be loaded. Suspense allows developers to create a more seamless user experience by rendering a placeholder or fallback component while the component is waiting for the required data to be available.\n\nHere is a general overview of how React Suspense works:\n\n- A component that uses Suspense wraps a component that may need to \"suspend\" rendering in a `Suspense` component.\n- The wrapped component throws a promise when it needs to suspend rendering.\n- The `Suspense` component catches the promise and renders a fallback component while the promise is pending.\n- When the promise resolves, the wrapped component is rendered with the required data.",
        "resources": [
          {
            "type": "course",
            "title": "React Suspense",
            "url": "https://react.dev/reference/react/Suspense"
          },
          {
            "type": "article",
            "title": "React Suspense - A complete guide",
            "url": "https://hygraph.com/blog/react-suspense"
          }
        ]
      }
    },
    {
      "id": "DcDggX4OmmwvJGHwuV86t",
      "name": "Portals",
      "resources": {
        "description": "# Portals\n\nPortals provide a first-class way to render children into a DOM node that exists outside the DOM hierarchy of the parent component.",
        "resources": [
          {
            "type": "course",
            "title": "Portals in React",
            "url": "https://react.dev/reference/react-dom/createPortal"
          },
          {
            "type": "video",
            "title": "React Portals",
            "url": "https://www.youtube.com/watch?v=HpHLa-5Wdys"
          }
        ]
      }
    },
    {
      "id": "gMHMjsh0i8paLZUH5mDX3",
      "name": "Error Boundaries",
      "resources": {
        "description": "# Error Boundaries\n\nIn the past, JavaScript errors inside components used to corrupt React’s internal state and cause it to emit cryptic errors on next renders. These errors were always caused by an earlier error in the application code, but React did not provide a way to handle them gracefully in components, and could not recover from them.\n\nError boundaries are React components that catch JavaScript errors anywhere in their child component tree, log those errors, and display a fallback UI instead of the component tree that crashed. Error boundaries catch errors during rendering, in lifecycle methods, and in constructors of the whole tree below them.",
        "resources": [
          {
            "type": "course",
            "title": "Error Boundaries in React",
            "url": "https://react.dev/reference/react/Component#catching-rendering-errors-with-an-error-boundary"
          }
        ]
      }
    },
    {
      "id": "txARr3lgTvy-vJCj5zAb1",
      "name": "Mobile Applications",
      "resources": {
        "description": "# Mobile\n\nReact Native is an open-source UI software framework created by Meta Platforms, Inc. It is used to develop applications for Android, Android TV, iOS, macOS, tvOS, Web, Windows and UWP by enabling developers to use the React framework along with native platform capabilities.\n\n- [@article@React Native Official website](https://reactnative.dev/)\n- [@video@React Native Course for Beginners](https://www.youtube.com/watch?v=ZBCUegTZF7M)",
        "resources": [
          {
            "type": "article",
            "title": "React Native Official website",
            "url": "https://reactnative.dev/"
          },
          {
            "type": "video",
            "title": "React Native Course for Beginners",
            "url": "https://www.youtube.com/watch?v=ZBCUegTZF7M"
          }
        ]
      }
    },
    {
      "id": "NvXAq1vN2wpncdW-yTL4c",
      "name": "React Native",
      "resources": {
        "description": "# React Native\n\nReact Native is an open-source UI software framework created by Meta Platforms, Inc. It is used to develop applications for Android, Android TV, iOS, macOS, tvOS, Web, Windows and UWP by enabling developers to use the React framework along with native platform capabilities.",
        "resources": [
          {
            "type": "course",
            "title": "React Native: Official Website",
            "url": "https://reactnative.dev/"
          },
          {
            "type": "course",
            "title": "Official Getting Started",
            "url": "https://reactnative.dev/docs/getting-started"
          },
          {
            "type": "article",
            "title": "Explore top posts about React",
            "url": "https://app.daily.dev/tags/react?ref=roadmapsh"
          }
        ]
      }
    },
    {
      "id": "1kbrCI5JS0c9wbzxXpgFU",
      "name": "MobX",
      "resources": {
        "description": "# MobX\n\nMobX is a powerful and intuitive state management library that enhances application scalability and simplicity through its use of functional reactive programming. The core philosophy of MobX is rooted in straightforwardness and efficiency. Developers can write minimalistic, boilerplate-free code that clearly expresses their intentions. For instance, updating a record field is as simple as performing a standard JavaScript assignment, with MobX automatically detecting changes and propagating them throughout the application. This eliminates the need for specialized tools in asynchronous data processes.\n\n- [@official@Official Website: MobX](https://mobx.js.org/)\n- [@video@Mobx React - State Management](https://www.youtube.com/watch?v=AgcaGGkYy_8)\n- [@video@MobX Tutorial with React and Typescript](https://www.youtube.com/watch?v=ElgfQdq-Htk)\n- [@article@How to Improve State Management in React with MobX](https://medium.com/whitespectre/how-to-improve-state-management-in-react-with-mobx-568808ff86a4)",
        "resources": [
          {
            "type": "course",
            "title": "Official Website: MobX",
            "url": "https://mobx.js.org/"
          },
          {
            "type": "video",
            "title": "Mobx React - State Management",
            "url": "https://www.youtube.com/watch?v=AgcaGGkYy_8"
          },
          {
            "type": "video",
            "title": "MobX Tutorial with React and Typescript",
            "url": "https://www.youtube.com/watch?v=ElgfQdq-Htk"
          },
          {
            "type": "article",
            "title": "How to Improve State Management in React with MobX",
            "url": "https://medium.com/whitespectre/how-to-improve-state-management-in-react-with-mobx-568808ff86a4"
          }
        ]
      }
    }
  ],
  "edges": [
    {
      "source": "",
      "target": "GV_zWF6rSWg5bqgiXhOEf"
    },
    {
      "source": "",
      "target": "GV_zWF6rSWg5bqgiXhOEf"
    },
    {
      "source": "",
      "target": "GV_zWF6rSWg5bqgiXhOEf"
    },
    {
      "source": "iogwMmOvub2ZF4zgg6WyF",
      "target": "XDvH2t3AJGevS17uM8TO6"
    },
    {
      "source": "tU4Umtnfu01t9gLlnlK6b",
      "target": "y9ToYDix-koRbR6FLydFw"
    },
    {
      "source": "XDvH2t3AJGevS17uM8TO6",
      "target": "tU4Umtnfu01t9gLlnlK6b"
    },
    {
      "source": "79K4xgljcoSHkCYI1D55O",
      "target": "8mw4TxlLN4ZKAlLl-_NVV"
    },
    {
      "source": "tU4Umtnfu01t9gLlnlK6b",
      "target": "79K4xgljcoSHkCYI1D55O"
    },
    {
      "source": "79K4xgljcoSHkCYI1D55O",
      "target": "0uiGsC5SWavNdlFqizkKe"
    },
    {
      "source": "0uiGsC5SWavNdlFqizkKe",
      "target": "LbLQhonBqzxHU6B-L--Vq"
    },
    {
      "source": "LbLQhonBqzxHU6B-L--Vq",
      "target": "HX75SExuzR5AP7TQ94qid"
    },
    {
      "source": "LbLQhonBqzxHU6B-L--Vq",
      "target": "mkyU0ug8MXxV4biHuOity"
    },
    {
      "source": "LbLQhonBqzxHU6B-L--Vq",
      "target": "NStw6bi_pPB49K41BFSgo"
    },
    {
      "source": "NStw6bi_pPB49K41BFSgo",
      "target": "jvp43wFkKlGQX2y7IxkbM"
    },
    {
      "source": "NStw6bi_pPB49K41BFSgo",
      "target": "I7_mX4h-Yywp1YyTJRKXI"
    },
    {
      "source": "I7_mX4h-Yywp1YyTJRKXI",
      "target": "yI6XiNW04EL78UL4lkVgd"
    },
    {
      "source": "KO3viVIJJREtxXxsocN7j",
      "target": "DfrCkbD-HEHwLymv10zb5"
    },
    {
      "source": "I7_mX4h-Yywp1YyTJRKXI",
      "target": "DfrCkbD-HEHwLymv10zb5"
    },
    {
      "source": "DfrCkbD-HEHwLymv10zb5",
      "target": "thfnymb_UIiKxakKfiua5"
    },
    {
      "source": "MnDgQq9Vcxsu3wDqv5uh2",
      "target": "XL9XOV2h0BAuA5cFcM5L_"
    },
    {
      "source": "MnDgQq9Vcxsu3wDqv5uh2",
      "target": "RvDfKoa_HIW3QDBfkPv3m"
    },
    {
      "source": "MnDgQq9Vcxsu3wDqv5uh2",
      "target": "kiCTo0U6VgNON8rv_Ktlj"
    },
    {
      "source": "MnDgQq9Vcxsu3wDqv5uh2",
      "target": "b4AP2OggxFAwsQtUwiUJJ"
    },
    {
      "source": "b4AP2OggxFAwsQtUwiUJJ",
      "target": "-AKmITUmSGIflJG-eGkm5"
    },
    {
      "source": "b4AP2OggxFAwsQtUwiUJJ",
      "target": "e_lwZ-a72-tAan2KDX6k3"
    },
    {
      "source": "e_lwZ-a72-tAan2KDX6k3",
      "target": "cQllxv7qGbRtM9O5llgN6"
    },
    {
      "source": "e_lwZ-a72-tAan2KDX6k3",
      "target": "zN7Ps1puD-YpHbKi1pHH8"
    },
    {
      "source": "W-atg_Msa9uPLr6RXAKSb",
      "target": "HdWq9ue0JdwmwqSIN2OD_"
    },
    {
      "source": "e_lwZ-a72-tAan2KDX6k3",
      "target": "W-atg_Msa9uPLr6RXAKSb"
    },
    {
      "source": "W-atg_Msa9uPLr6RXAKSb",
      "target": "KHcC5pFN3qLnsbPPKpYd2"
    },
    {
      "source": "KHcC5pFN3qLnsbPPKpYd2",
      "target": "_5ht0PAdVOJWPzTRS1mVg"
    },
    {
      "source": "KHcC5pFN3qLnsbPPKpYd2",
      "target": "UNlvRp6k3_RDoTAAIEfJ1"
    },
    {
      "source": "UNlvRp6k3_RDoTAAIEfJ1",
      "target": "K3RZ8ESxWCpLKHePF87Hy"
    },
    {
      "source": "UNlvRp6k3_RDoTAAIEfJ1",
      "target": "ydxyne6RzIDPHij1Z3CsN"
    },
    {
      "source": "ydxyne6RzIDPHij1Z3CsN",
      "target": "bRpeoo9zXrnZ2IHSI7JX4"
    },
    {
      "source": "bRpeoo9zXrnZ2IHSI7JX4",
      "target": "H6-XGDjs4f-qbv13v5av0"
    },
    {
      "source": "bRpeoo9zXrnZ2IHSI7JX4",
      "target": "gMHMjsh0i8paLZUH5mDX3"
    },
    {
      "source": "DcDggX4OmmwvJGHwuV86t",
      "target": "txARr3lgTvy-vJCj5zAb1"
    },
    {
      "source": "txARr3lgTvy-vJCj5zAb1",
      "target": "NvXAq1vN2wpncdW-yTL4c"
    },
    {
      "source": "txARr3lgTvy-vJCj5zAb1",
      "target": "GV_zWF6rSWg5bqgiXhOEf"
    }
  ]
}