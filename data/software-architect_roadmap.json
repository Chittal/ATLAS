{
  "nodes": [
    {
      "id": "4zicbh7Wg2lmKSRhb6E-L",
      "name": "Understand the Basics",
      "resources": {
        "description": "# Software Architect Basics\n\nUnderstand different concepts such as what is software architecture, software architect, different types of architects and so on.",
        "resources": []
      }
    },
    {
      "id": "EGG99VA-PEdWdVxNDLtG_",
      "name": "What is Software Architecture",
      "resources": {
        "description": "# What is Software Architecture?\n\nDescribes how an application is built including its components, how they interact with each other, environment in which they operate and so on.",
        "resources": [
          {
            "type": "article",
            "title": "What is Software Architecture in Software Engineering?",
            "url": "https://www.computer.org/resources/software-architecture"
          },
          {
            "type": "article",
            "title": "Software Architecture: It might not be what you think it is",
            "url": "https://www.infoq.com/articles/what-software-architecture/"
          },
          {
            "type": "article",
            "title": "Explore top posts about Architecture",
            "url": "https://app.daily.dev/tags/architecture?ref=roadmapsh"
          }
        ]
      }
    },
    {
      "id": "eG38hT0rotYJ3G-t9df9R",
      "name": "What is a Software Architect",
      "resources": {
        "description": "# What is Software Architect?\n\nAn expert developer who design software solutions from the ground up, making high-level decisions about each stage of the process including technical standards, tools, design principles, platforms to be used, etc., leading a team of engineers to create the final product.",
        "resources": [
          {
            "type": "article",
            "title": "12 Skills a Software Architect Needs",
            "url": "https://www.redhat.com/architect/what-is-software-architect"
          }
        ]
      }
    },
    {
      "id": "2sR4KULvAUUoOtopvsEBs",
      "name": "Levels of Architecture",
      "resources": {
        "description": "# Levels of Architecture\n\nArchitecture can be done on several “levels” of abstractions. The level influences the importance of necessary skills. As there are many categorizations possible my favorite segmentation includes these 3 levels:\n\n- **Application Level:** The lowest level of architecture. Focus on one single application. Very detailed, low level design. Communication is usually within one development team.\n- **Solution Level:** The mid-level of architecture. Focus on one or more applications which fulfill a business need (business solution). Some high, but mainly low-level design. Communication is between multiple development teams.\n- **Enterprise Level:** The highest level of architecture. Focus on multiple solutions. High level, abstract design, which needs to be detailed out by solution or application architects. Communication is across the organization.",
        "resources": []
      }
    },
    {
      "id": "Lqe47l4j-C4OwkbkwPYry",
      "name": "Application Architecture",
      "resources": {
        "description": "# Application Level Architecture\n\nThe lowest level of architecture. Focus on one single application. Very detailed, low level design. Communication is usually within one development team.",
        "resources": [
          {
            "type": "article",
            "title": "Application Architecture",
            "url": "https://www.codesee.io/learning-center/application-architecture"
          }
        ]
      }
    },
    {
      "id": "uGs-9xE3DMJxKhenltbFK",
      "name": "Solution Architecture",
      "resources": {
        "description": "# Solution Level Architecture\n\nThe mid-level of architecture. Focus on one or more applications which fulfill a business need (business solution). Some high, but mainly low-level design. Communication is between multiple development teams.",
        "resources": [
          {
            "type": "article",
            "title": "Solution Architecture",
            "url": "https://www.leanix.net/en/wiki/it-architecture/solution-architecture"
          }
        ]
      }
    },
    {
      "id": "vlW07sc-FQnxPMjDMn8_F",
      "name": "Enterprise Architecture",
      "resources": {
        "description": "# Enterprise Level Architecture\n\nThe highest level of architecture. Focus on multiple solutions. High level, abstract design, which needs to be detailed out by solution or application architects. Communication is across the organization.",
        "resources": [
          {
            "type": "article",
            "title": "Enterprise Software Architecture",
            "url": "https://medium.com/@hsienwei/enterprise-software-architecture-957288829daa"
          },
          {
            "type": "article",
            "title": "Enterprise Architect vs Software Architect",
            "url": "https://www.linkedin.com/pulse/enterprise-architect-vs-software-who-you-luigi-saggese/"
          },
          {
            "type": "article",
            "title": "Explore top posts about Architecture",
            "url": "https://app.daily.dev/tags/architecture?ref=roadmapsh"
          }
        ]
      }
    },
    {
      "id": "rUxbG2S2nJuA1YVY6sjiX",
      "name": "Responsibilities",
      "resources": {
        "description": "# Architect Responsibilities\n\nTo understand the necessary skills an architect needs, we first need to understand typical activities. The following list contains from my perspective the most important activities:\n\n- Define and decide development technology and platform\n- Define development standards, e.g., coding standards, tools, review processes, test approach, etc.\n- Support identifying and understanding business requirements\n- Design systems and take decisions based on requirements\n- Document and communicate architectural definitions, design and decisions\n- Check and review architecture and code, e.g., check if defined patterns and coding standards are implemented properly\n- Collaborate with other architects and stakeholders\n- Coach and consult developers\n- Make sure that as implementation takes place, the architecture is being adhered to\n- Play a key part in reviewing code\n- Detail out and refine higher level design into lower level design",
        "resources": [
          {
            "type": "article",
            "title": "Software Architect",
            "url": "https://en.wikipedia.org/wiki/Software_architect"
          }
        ]
      }
    },
    {
      "id": "lBtlDFPEQvQ_xtLtehU0S",
      "name": "Important Skills to Learn",
      "resources": {
        "description": "# Important Skills\n\nTo support the laid-out activities specific skills are required. From my experience, read books and discussions we can boil this down to these ten skills every software architect should have:\n\n- Design\n- Decide\n- Simplify\n- Code\n- Document\n- Communicate\n- Estimate\n- Balance\n- Consult\n- Market",
        "resources": []
      }
    },
    {
      "id": "fBd2m8tMJmhuNSaakrpg4",
      "name": "Design & Architecture",
      "resources": {
        "description": "# Design and Architecture\n\nGood design in software architecture blends theoretical knowledge with practical experience. Theoretically, architects should master fundamental design patterns, such as those detailed in *\"Design Patterns: Elements of Reusable Object-Oriented Software\"*, which remain foundational for modern architecture. Advanced knowledge of patterns and anti-patterns, like those in *\"Enterprise Integration Patterns\"*, extends this understanding. Architects must also focus on quality measures, ensuring designs meet non-functional requirements like scalability, security, and adaptability.  \n\nPractically, architects improve by experimenting with various technology stacks, gaining insights into their strengths and limitations. Exploring frameworks like Angular reveals real-world pattern applications, such as Observables, and fosters deeper understanding through hands-on coding. Attending user groups and engaging in communities, like those on Meetup, broadens perspectives and encourages curiosity, enabling architects to stay updated and continuously refine their craft.",
        "resources": [
          {
            "type": "article",
            "title": "Visit Dedicated Software Design Roadmap",
            "url": "https://roadmap.sh/software-design-architecture"
          },
          {
            "type": "tutorial",
            "title": "Design Patterns for Humans",
            "url": "https://github.com/kamranahmedse/design-patterns-for-humans"
          }
        ]
      }
    },
    {
      "id": "MSDo0nPk_ghRYkZS4MAQ_",
      "name": "Decision Making",
      "resources": {
        "description": "# Decision Making\n\nEffective decision-making is crucial for architects to guide projects and organizations in the right direction. Focus on what’s important by emphasizing **conceptual integrity** (sticking to consistent decisions for simplicity and maintainability) and **uniformity** (ensuring standards like naming conventions are applied consistently). Prioritize critical decisions early to avoid costly workarounds or project delays, using tools like the Weighted Shortest Job First (WSJF) model for prioritization. Stay within your scope of competence to maintain credibility, collaborate with peers, and clarify responsibilities within the architectural hierarchy.\n\nWhen making decisions, evaluate multiple options to ensure thorough analysis and foster stakeholder confidence. Comparing options based on measurable criteria, such as cost or feasibility, leads to better, fact-driven decisions. This process not only supports sustainable outcomes but also prepares you with strong arguments during discussions, ensuring alignment across teams and stakeholders.",
        "resources": [
          {
            "type": "article",
            "title": "Decision Making - Wikipedia",
            "url": "https://en.wikipedia.org/wiki/Decision-making"
          }
        ]
      }
    },
    {
      "id": "lrtgF1RTaS4TCKww0aY6C",
      "name": "Simplifying Things",
      "resources": {
        "description": "# Simplifying Things\n\nSimplifying solutions is critical for effective problem-solving, aligning with Occam’s Razor, which favors simplicity by reducing unnecessary assumptions. To achieve this, “shake” your solution by analyzing it from different perspectives and questioning its assumptions. After complex discussions, take a step back to review the big picture and refactor if needed, giving your brain time to process ideas. Apply the *divide and conquer* method to break problems into smaller parts and validate their integration afterward. Finally, remember that refactoring is a valuable process to improve overly complex solutions, provided there’s adequate test coverage and stakeholder support.",
        "resources": [
          {
            "type": "article",
            "title": "Simplifying Things",
            "url": "https://www.infoq.com/articles/driving-architectural-simplicity/"
          }
        ]
      }
    },
    {
      "id": "77KvWCA1oHSGgDKBTwjv7",
      "name": "How to Code",
      "resources": {
        "description": "# How to Code\n\nEven as an Enterprise Architect, staying connected to coding practices is essential to understand developers’ challenges and earn their trust. Maintaining a **side project** allows you to explore new technologies, tools, and methodologies hands-on, building practical experience beyond theoretical knowledge. This helps in forming informed decisions and keeping pace with evolving trends in development. \n\nTo prioritize what to explore, structured resources like ThoughtWorks’ Technology Radar can guide you. It categorizes technologies into **Adopt**, **Trial**, **Assess**, and **Hold**, helping architects focus on impactful and enterprise-ready innovations. Staying informed and involved ensures better collaboration and alignment with developers.",
        "resources": [
          {
            "type": "article",
            "title": "How to Code",
            "url": "https://www.thoughtworks.com/insights/blog/how-to-code"
          },
          {
            "type": "article",
            "title": "Technology Radar",
            "url": "https://www.thoughtworks.com/radar"
          }
        ]
      }
    },
    {
      "id": "5D-kbQ520k1D3fCtD01T7",
      "name": "Documentation",
      "resources": {
        "description": "# Documentation\n\nArchitectural documentation is sometimes more and sometimes less important. Important documents are for example architectural decisions or code guidelines. Initial documentation is often required before coding starts and need to be refined continuously. Other documentation can be automatically generated as code can also be documentation, e.g. UML class diagrams.",
        "resources": [
          {
            "type": "article",
            "title": "Wikipedia",
            "url": "https://en.wikipedia.org/wiki/Documentation"
          },
          {
            "type": "article",
            "title": "The Ultimate Guide To Software Architecture Documentation",
            "url": "https://www.workingsoftware.dev/software-architecture-documentation-the-ultimate-guide/"
          }
        ]
      }
    },
    {
      "id": "Ac49sOlQKblYK4FZuFHDR",
      "name": "Communication",
      "resources": {
        "description": "# Communication\n\nFrom my observations this is one of the most underestimated skill. If you are brilliant in design but cannot communicate your ideas, your thoughts are likely to have less impact or even fail to succeed.\n\nCommunication is a critical yet often underestimated skill, especially for architects. It involves clearly conveying ideas, structuring discussions effectively, and driving meetings. Tools like “UZMO — Thinking With Your Pen” can enhance visual communication skills. Public speaking, whether to small or large groups, requires practice and stepping out of one’s comfort zone. Tailoring communication to the audience is essential—developers focus on details, while managers prioritize cost and outcomes. Regular, transparent communication ensures alignment across all levels, making the rationale behind decisions clear. Always being prepared with key slides and answers can boost confidence and efficiency during interactions.",
        "resources": [
          {
            "type": "article",
            "title": "Communication Skills",
            "url": "https://en.wikipedia.org/wiki/Communication"
          }
        ]
      }
    },
    {
      "id": "m0ZYdqPFDoHOPo18wKyvV",
      "name": "Estimate and Evaluate",
      "resources": {
        "description": "# Estimate and Evaluate\n\nEstimation and evaluation are critical skills for architects and lead developers. Architects must understand basic project management principles to provide estimates for timelines, resources, and costs, considering all project phases like requirements, testing, and debugging. Using past data or models like COCOMO helps refine estimates. For agile projects, resources like *\"Agile Estimating and Planning\"* by Mike Cohn can offer valuable guidance. \n\nEvaluating \"unknown\" architectures involves assessing their suitability for current and future contexts through prepared questions. These should cover design practices (e.g., patterns and structure), development practices (e.g., code guidelines and deployment), quality assurance (e.g., test automation and peer reviews), and security measures (e.g., built-in security and penetration tests). This structured approach ensures informed decisions and promotes robust, maintainable solutions.",
        "resources": [
          {
            "type": "article",
            "title": "Evaluating Software Architectures",
            "url": "https://medium.com/oolooroo/evaluating-digital-architectures-a-deep-dive-into-modern-software-systems-analysis-dff3b0d2da8f"
          },
          {
            "type": "article",
            "title": "How to Evaluate Software Architecture: Methods and Tools",
            "url": "https://www.linkedin.com/advice/0/what-most-common-software-architecture-evaluation"
          }
        ]
      }
    },
    {
      "id": "otHQ6ye1xgkI1qb4tEHVF",
      "name": "Balance",
      "resources": {
        "description": "# Balance\n\nAchieving balance in architecture requires managing trade-offs between quality, cost, and development speed, avoiding over-engineering while aligning functional and non-functional requirements. Architects must navigate conflicting goals, like balancing short-term simplicity with long-term vision, ensuring solutions fit future needs while involving developers, businesses, and managers in understanding the financial and strategic impact. Additionally, architects often mediate between diverse groups, resolving conflicts and aligning strategies through effective communication, such as the “Four-Ears Model” by Schulze von Thun, which aids in fostering collaboration and achieving balanced, strategic outcomes.",
        "resources": [
          {
            "type": "article",
            "title": "Wikipedia",
            "url": "https://en.wikipedia.org/wiki/Balance_(architecture"
          }
        ]
      }
    },
    {
      "id": "LSWlk9A3b6hco9Il_elao",
      "name": "Consult & Coach",
      "resources": {
        "description": "# Consult and Coach\n\nProactive consulting and coaching are essential to prevent architectural issues from escalating. Architects must anticipate future needs and prepare the organization by setting a clear vision of mid- and long-term goals, often using maturity models to provide structure and measure progress against SMART criteria. Building a **Community of Practice (CoP)** fosters collaboration, standardization, and knowledge sharing among professionals with shared interests, such as developers and architects, enhancing individual and organizational growth. Open-door sessions, held regularly without a strict agenda, encourage open communication, resolve minor issues promptly, and address complex topics through follow-ups, reducing misconceptions and ambiguity.",
        "resources": [
          {
            "type": "article",
            "title": "Wikipedia",
            "url": "https://en.wikipedia.org/wiki/Consulting"
          }
        ]
      }
    },
    {
      "id": "YW6j3Sg511dXToTcwSnOS",
      "name": "Marketing Skills",
      "resources": {
        "description": "# Marketing Skills\n\nMarketing skills are essential for promoting your ideas effectively, especially when others may not immediately embrace them. To convince others, it's crucial to motivate them by demonstrating the value and benefits of your ideas in an easily digestible format, such as through prototypes or videos. Persistence is key; if you're convinced of your idea’s worth, you need to fight for it, even if it's met with resistance. Establishing allies who support your ideas can also make it easier to gain traction, so start building a network. Repeating your message regularly can help, but be cautious not to overdo it, as credibility is essential for long-term success.",
        "resources": [
          {
            "type": "article",
            "title": "Marketing Skills for Architects",
            "url": "https://openasset.com/blog/marketing-for-architects/"
          }
        ]
      }
    },
    {
      "id": "hFx3mLqh5omNxqI9lfaAQ",
      "name": "Technical Skills",
      "resources": {
        "description": "# Technical Skills\n\n- Experience in software development\n- Experience in project management\n- Knowledge of one or more programming languages, such as Java, Python, JavaScript, Ruby, Rust, and C\n- Knowledge of different development platforms\n- Understanding of web applications, cybersecurity, and open source technologies\n- Proficiency in analyzing code for issues and errors\n- Experience in database platforms\n- Experience with Operations and DevOps Skills",
        "resources": []
      }
    },
    {
      "id": "uoDtVFThaV6OMK2wXGfP5",
      "name": "Programming Languages",
      "resources": {
        "description": "# Programming Languages\n\nA programming language is a system of notation for writing computer programs. Programming languages are described in terms of their syntax and semantics, usually defined by a formal language. Languages usually provide features such as a type system, variables, and mechanisms for error handling.",
        "resources": [
          {
            "type": "article",
            "title": "Programming Language",
            "url": "https://en.wikipedia.org/wiki/Programming_language"
          }
        ]
      }
    },
    {
      "id": "a5DB_hsD4bAf8BtHNFNPo",
      "name": "Java / Kotlin / Scala",
      "resources": {
        "description": "# Java/Kotlin/Scala\n\n- **Java**: Java is a widely-used, object-oriented programming language known for its platform independence, reliability, and scalability. It’s commonly used for building large-scale enterprise applications, Android development, and web services. Java’s extensive libraries, frameworks, and strong community support make it a popular choice for developers.\n\n- **Scala**: Scala is a statically-typed programming language that combines object-oriented and functional programming paradigms. It runs on the Java Virtual Machine (JVM) and is known for its concise syntax, expressive power, and compatibility with Java. Scala is often used in data engineering, backend services, and applications requiring high concurrency.\n\n- **Kotlin**: Kotlin is a modern, statically-typed programming language designed to be fully interoperable with Java while offering more concise and expressive syntax. It is particularly popular for Android development due to its simplicity and safety features, such as null safety, and is gaining traction in backend development as well.",
        "resources": [
          {
            "type": "article",
            "title": "Visit Dedicated Java Roadmap",
            "url": "https://roadmap.sh/java"
          },
          {
            "type": "course",
            "title": "Scala",
            "url": "https://www.scala-lang.org/"
          },
          {
            "type": "course",
            "title": "Scala Documentation",
            "url": "https://docs.scala-lang.org/"
          },
          {
            "type": "course",
            "title": "Kotlin",
            "url": "https://kotlinlang.org/"
          },
          {
            "type": "course",
            "title": "Kotlin Documentation",
            "url": "https://kotlinlang.org/docs/home.html"
          },
          {
            "type": "course",
            "title": "Java",
            "url": "https://www.java.com/"
          },
          {
            "type": "article",
            "title": "Explore top posts about Java",
            "url": "https://app.daily.dev/tags/java?ref=roadmapsh"
          }
        ]
      }
    },
    {
      "id": "j2Ph2QcKwmKlbaMHz1l_i",
      "name": "Python",
      "resources": {
        "description": "# Python\n\nPython is a multi-paradigm language. Being an interpreted language, code is executed as soon as it is written and the Python syntax allows for writing code in functional, procedural or object-oriented programmatic ways. Python is frequently recommended as the first language new coders should learn, because of its focus on readability, consistency, and ease of use. This comes with some downsides, as the language is not especially performant in most production tasks.",
        "resources": [
          {
            "type": "article",
            "title": "Visit Dedicated Python Roadmap",
            "url": "https://roadmap.sh/python"
          },
          {
            "type": "course",
            "title": "Python Website",
            "url": "https://www.python.org/"
          },
          {
            "type": "course",
            "title": "Python Getting Started",
            "url": "https://www.python.org/about/gettingstarted/"
          },
          {
            "type": "article",
            "title": "Automate the Boring Stuff",
            "url": "https://automatetheboringstuff.com/"
          },
          {
            "type": "article",
            "title": "Python Crash Course",
            "url": "https://ehmatthes.github.io/pcc/"
          },
          {
            "type": "article",
            "title": "Explore top posts about Python",
            "url": "https://app.daily.dev/tags/python?ref=roadmapsh"
          }
        ]
      }
    },
    {
      "id": "U_Hmzfjjs1jVtu2CZ0TlG",
      "name": "Ruby",
      "resources": {
        "description": "# Ruby\n\nRuby is a high-level, interpreted programming language that blends Perl, Smalltalk, Eiffel, Ada, and Lisp. Ruby focuses on simplicity and productivity along with a syntax that reads and writes naturally. Ruby supports procedural, object-oriented and functional programming and is dynamically typed.",
        "resources": [
          {
            "type": "course",
            "title": "Ruby",
            "url": "https://www.ruby-lang.org/en/"
          },
          {
            "type": "course",
            "title": "Learn Ruby in 20 minutes",
            "url": "https://www.ruby-lang.org/en/documentation/quickstart/"
          },
          {
            "type": "article",
            "title": "Explore top posts about Ruby",
            "url": "https://app.daily.dev/tags/ruby?ref=roadmapsh"
          }
        ]
      }
    },
    {
      "id": "nKlM9k4qAh4wBFXqM-2kC",
      "name": "Go",
      "resources": {
        "description": "# Go\n\nGo is an open source programming language supported by Google. Go can be used to write cloud services, CLI tools, used for API development, and much more.",
        "resources": [
          {
            "type": "article",
            "title": "Visit Dedicated Go Roadmap",
            "url": "https://roadmap.sh/golang"
          },
          {
            "type": "course",
            "title": "A Tour of Go – Go Basics",
            "url": "https://go.dev/tour/welcome/1"
          },
          {
            "type": "course",
            "title": "Go Reference Documentation",
            "url": "https://go.dev/doc/"
          },
          {
            "type": "article",
            "title": "Go by Example - annotated example programs",
            "url": "https://gobyexample.com/"
          },
          {
            "type": "article",
            "title": "Explore top posts about Golang",
            "url": "https://app.daily.dev/tags/golang?ref=roadmapsh"
          }
        ]
      }
    },
    {
      "id": "bhP5gMpRVebSFpCeHVXBj",
      "name": "JavaScript / TypeScript",
      "resources": {
        "description": "# JavaScript\n\nJavaScript allows you to add interactivity to your pages. Common examples that you may have seen on the websites are sliders, click interactions, popups and so on. Apart from being used on the frontend in browsers, there is Node.js which is an open-source, cross-platform, back-end JavaScript runtime environment that runs on the V8 engine and executes JavaScript code outside a web browser. TypeScript adds optional types to JavaScript that support tools for large-scale JavaScript applications for any browser, for any host, on any OS. TypeScript compiles to readable, standards-based JavaScript.",
        "resources": [
          {
            "type": "article",
            "title": "Visit Dedicated JavaScript Roadmap",
            "url": "https://roadmap.sh/javascript"
          },
          {
            "type": "article",
            "title": "Visit Dedicated TypedScript Roadmap",
            "url": "https://roadmap.sh/typescript"
          },
          {
            "type": "course",
            "title": "TypeScript",
            "url": "https://www.typescriptlang.org/"
          },
          {
            "type": "course",
            "title": "TypeScript Docs for Deep Dives",
            "url": "https://www.typescriptlang.org/docs/"
          },
          {
            "type": "article",
            "title": "The Modern JavaScript Tutorial",
            "url": "https://javascript.info/"
          },
          {
            "type": "video",
            "title": "JavaScript Crash Course for Beginners",
            "url": "https://youtu.be/hdI2bqOjy3c"
          },
          {
            "type": "video",
            "title": "Node.js Crash Course",
            "url": "https://www.youtube.com/watch?v=fBNz5xF-Kx4"
          },
          {
            "type": "video",
            "title": "Node.js Tutorial for Beginners",
            "url": "https://www.youtube.com/watch?v=TlB_eWDSMt4"
          },
          {
            "type": "video",
            "title": "TypeScript for Beginners",
            "url": "https://www.youtube.com/watch?v=BwuLxPH8IDs"
          },
          {
            "type": "article",
            "title": "Explore top posts about JavaScript",
            "url": "https://app.daily.dev/tags/javascript?ref=roadmapsh"
          }
        ]
      }
    },
    {
      "id": "D1IXOBUrrXf5bXhVu9cmI",
      "name": ".NET Framework Based",
      "resources": {
        "description": "# .NET Framework\n\n.NET is an open-source platform with tools and libraries for building web, mobile, desktop, games, IoT, cloud, and microservices.\n\nOfficially supported languages in .NET: C#, F#, Visual Basic.",
        "resources": [
          {
            "type": "course",
            "title": ".NET Website",
            "url": "https://dotnet.microsoft.com/en-us/"
          },
          {
            "type": "course",
            "title": "What is .NET?",
            "url": "https://dotnet.microsoft.com/en-us/learn/dotnet/what-is-dotnet"
          },
          {
            "type": "course",
            "title": "Why Choose .NET?",
            "url": "https://dotnet.microsoft.com/en-us/platform/why-choose-dotnet"
          },
          {
            "type": "course",
            "title": "C# Documentation",
            "url": "https://learn.microsoft.com/en-us/dotnet/csharp/?WT.mc_id=dotnet-35129-website"
          },
          {
            "type": "course",
            "title": "F# Documentation",
            "url": "https://learn.microsoft.com/en-us/dotnet/fsharp/?WT.mc_id=dotnet-35129-website"
          },
          {
            "type": "course",
            "title": "Visual Basic Documentation",
            "url": "https://learn.microsoft.com/en-us/dotnet/visual-basic/?WT.mc_id=dotnet-35129-website"
          },
          {
            "type": "article",
            "title": "Explore top posts about .NET",
            "url": "https://app.daily.dev/tags/.net?ref=roadmapsh"
          }
        ]
      }
    },
    {
      "id": "_U0VoTkqM1d6NR13p5azS",
      "name": "Patterns & Design Principles",
      "resources": {
        "description": "# Patterns and design principles\n\nIn the realm of software architecture, patterns and design principles are foundational tools that enable architects to create robust, scalable, and maintainable systems. They offer proven solutions to common problems and guide decision-making throughout the software development lifecycle. Understanding these concepts is essential for anyone following a software architect roadmap, as they bridge the gap between high-level architecture and practical implementation.",
        "resources": []
      }
    },
    {
      "id": "AMDLJ_Bup-AY1chl_taV3",
      "name": "OOP",
      "resources": {
        "description": "# OOP\n\nObject-oriented programming (OOP) is a computer programming model that organizes software design around data, or objects, rather than functions and logic. An object can be defined as a data field that has unique attributes and behavior.",
        "resources": [
          {
            "type": "article",
            "title": "OOP - Wikipedia",
            "url": "https://en.wikipedia.org/wiki/Object-oriented_programming"
          },
          {
            "type": "article",
            "title": "Basic Concepts of Object-Oriented Programming",
            "url": "https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Object-oriented_programming"
          },
          {
            "type": "video",
            "title": "FreeCodeCamp - (OOP) in C++",
            "url": "https://www.youtube.com/watch?v=wN0x9eZLix4"
          },
          {
            "type": "video",
            "title": "FreeCodeCamp - (OPP) in Python",
            "url": "https://www.youtube.com/watch?v=Ej_02ICOIgs"
          }
        ]
      }
    },
    {
      "id": "jj5otph6mEYiR-oU5WVtT",
      "name": "MVC, MVP, MVVM",
      "resources": {
        "description": "# MVC MVP MVVM\n\nModel-view-controller, or MVC, is a pattern used to separate user-interface, data and application logic.\nIt does this by separating an application into three parts: Model, View, and Controller. The model holds the data, the view encompasses the user-interface, and the controller acts as a mediator between the two.\n\nModel-view-presenter, or MVP, was designed to ease automated unit testing and improve the separation of concerns in presentation logic. MVP is a variant of the MVC pattern, though differs in that it divides the application into the user-interface (view), data (model) and presentation logic (presenter). While the model and the view represent stay the same as in the model-view-controller pattern, the presenter differs from the controller in that it manipulates the model and updates the view.\n\nAnother variant of the MVC is the model-view-viewmodel pattern. The Model-view-viewmodel, or MVVM, separates the application into three core components: Model, View, and View Model. While the view and model represent all that they did in their parent pattern, the view model acts as a link between the model and view, retrieves data from the model and exposes it to the view through two-way data binding and can manipulate the model's data.",
        "resources": [
          {
            "type": "article",
            "title": "MVC, MVP and MVVM Design Pattern",
            "url": "https://medium.com/@ankit.sinhal/mvc-mvp-and-mvvm-design-pattern-6e169567bbad"
          },
          {
            "type": "article",
            "title": "Explore top posts about General Programming",
            "url": "https://app.daily.dev/tags/general-programming?ref=roadmapsh"
          }
        ]
      }
    },
    {
      "id": "RsnN5bt8OhSMjSFmVgw-X",
      "name": "CQRS, Eventual Consistency",
      "resources": {
        "description": "# CQRS eventual consistency\n\nCQRS (Segregation of Responsibility for Command Queries) is an architecture pattern that comes with the idea of separating read and write operations into two distinct logical processes.",
        "resources": [
          {
            "type": "article",
            "title": "CQRS",
            "url": "https://martinfowler.com/bliki/CQRS.html"
          },
          {
            "type": "article",
            "title": "Introduction to CQRS",
            "url": "https://learn.microsoft.com/en-us/azure/architecture/patterns/cqrs"
          }
        ]
      }
    },
    {
      "id": "AoWO2BIKG5X4JWir6kh5r",
      "name": "Actors",
      "resources": {
        "description": "# Actors\n\nActor Model is a model that represents actors as the basic unit of a system, they can only communicate through messages and have their own private state, and they can also manage other actors, resulting in an encapsulated and fault-tolerant system.",
        "resources": [
          {
            "type": "video",
            "title": "Actor Model Explained",
            "url": "https://www.youtube.com/watch?v=ELwEdb_pD0k"
          },
          {
            "type": "article",
            "title": "The actor model in 10 minutes",
            "url": "https://www.brianstorti.com/the-actor-model/"
          }
        ]
      }
    },
    {
      "id": "bbKEEk7dvfFZBBJaIjm0j",
      "name": "ACID, CAP Theorem",
      "resources": {
        "description": "# ACID & CAP Theorem\n\nACID (Atomicity, Consistency, Isolation, Durability) and CAP (Consistency, Availability, Partition Tolerance) are essential concepts in distributed systems. They are often used to explain the trade-offs between consistency and availability.\n\nCAP is an acronym for Consistency, Availability, and Partition Tolerance. According to the CAP theorem, any distributed system can only guarantee two of the three properties at any time. You can't guarantee all three properties at once.\n\nACID is an acronym that stands for Atomicity, Consistency, Isolation, Durability. ACID is a set of properties of database transactions intended to guarantee validity even in the event of errors, power failures, etc.",
        "resources": [
          {
            "type": "article",
            "title": "What is CAP Theorem?",
            "url": "https://www.bmc.com/blogs/cap-theorem/"
          },
          {
            "type": "article",
            "title": "CAP Theorem - Wikipedia",
            "url": "https://en.wikipedia.org/wiki/CAP_theorem"
          },
          {
            "type": "article",
            "title": "An Illustrated Proof of the CAP Theorem",
            "url": "https://mwhittaker.github.io/blog/an_illustrated_proof_of_the_cap_theorem/"
          },
          {
            "type": "article",
            "title": "CAP Theorem and its applications in NoSQL Databases",
            "url": "https://www.ibm.com/uk-en/cloud/learn/cap-theorem"
          },
          {
            "type": "video",
            "title": "What is CAP Theorem?",
            "url": "https://www.youtube.com/watch?v=_RbsFXWRZ10"
          },
          {
            "type": "article",
            "title": "ACID - Wikipedia",
            "url": "https://en.wikipedia.org/wiki/ACID"
          }
        ]
      }
    },
    {
      "id": "QNG-KP01WQnq8o1-In1-n",
      "name": "SOLID",
      "resources": {
        "description": "# SOLID\n\nSOLID is a set of principles applied to object-oriented design (OOD) to create maintainable, understandable, and flexible code, while avoiding code smells and defects. The principles are:\n\n- Single Responsibility\n- Open/Closed\n- Liskov Substitution\n- Interface Segregation\n- Dependency Inversion",
        "resources": [
          {
            "type": "article",
            "title": "SOLID Principles",
            "url": "https://www.baeldung.com/solid-principles"
          },
          {
            "type": "article",
            "title": "SOLID: The First 5 Principles of Object Oriented Design",
            "url": "https://www.digitalocean.com/community/conceptual_articles/s-o-l-i-d-the-first-five-principles-of-object-oriented-design"
          }
        ]
      }
    },
    {
      "id": "DnP66pjK3b8tCtYr05n2G",
      "name": "TDD",
      "resources": {
        "description": "# Test Driven Development\n\nTest driven development (TDD) is the process of writing tests for software's requirements which will fail until the software is developed to meet those requirements. Once those tests pass, then the cycle repeats to refactor code or develop another feature/requirement. In theory, this ensures that software is written to meet requirements in the simplest form, and avoids code defects.",
        "resources": [
          {
            "type": "article",
            "title": "What is Test Driven Development (TDD)?",
            "url": "https://www.guru99.com/test-driven-development.html"
          },
          {
            "type": "article",
            "title": "Test-driven development",
            "url": "https://www.ibm.com/garage/method/practices/code/practice_test_driven_development/"
          },
          {
            "type": "video",
            "title": "Agile in Practice: Test Driven Development",
            "url": "https://youtu.be/uGaNkTahrIw"
          },
          {
            "type": "article",
            "title": "Explore top posts about TDD",
            "url": "https://app.daily.dev/tags/tdd?ref=roadmapsh"
          }
        ]
      }
    },
    {
      "id": "IIelzs8XYMPnXabFKRI51",
      "name": "DDD",
      "resources": {
        "description": "# Domain-Driven Design\n\nDomain-driven design (DDD) is a software design approach focusing on modeling software to match a domain according to input from that domain's experts.\n\nIn terms of object-oriented programming, it means that the structure and language of software code (class names, class methods, class variables) should match the business domain. For example, if a software processes loan applications, it might have classes like LoanApplication and Customer, and methods such as AcceptOffer and Withdraw.\n\nDDD connects the implementation to an evolving model and it is predicated on the following goals:\n\n- Placing the project's primary focus on the core domain and domain logic;\n- Basing complex designs on a model of the domain;\n- Initiating a creative collaboration between technical and domain experts to iteratively refine a conceptual model that addresses particular domain problems.",
        "resources": [
          {
            "type": "article",
            "title": "DDD Starter Modelling Process",
            "url": "https://github.com/ddd-crew/ddd-starter-modelling-process/"
          },
          {
            "type": "article",
            "title": "Domain Driven Design Quickly",
            "url": "https://web.archive.org/web/20230606035225/https://matfrs2.github.io/RS2/predavanja/literatura/Avram%20A,%20Marinescu%20F.%20-%20Domain%20Driven%20Design%20Quickly.pdf"
          },
          {
            "type": "article",
            "title": "Explore top posts about Architecture",
            "url": "https://app.daily.dev/tags/architecture?ref=roadmapsh"
          }
        ]
      }
    },
    {
      "id": "diu8MyHxZuZSdhavYVj1T",
      "name": "Tools",
      "resources": {}
    },
    {
      "id": "ZEzYb-i55hBe9kK3bla94",
      "name": "Git",
      "resources": {
        "description": "# Git\n\nGit is a distributed version control system designed to handle projects of any size with speed and efficiency. Created by Linus Torvalds in 2005, Git tracks changes in source code during software development, allowing multiple developers to work together on non-linear development. It provides strong support for branching, merging, and distributed development workflows. Git maintains a complete history of all changes, enabling easy rollbacks and comparisons between versions. Its distributed nature means each developer has a full copy of the repository, allowing for offline work and backup. Git's speed, flexibility, and robust branching and merging capabilities have made it the most widely used version control system in software development, particularly for open-source projects.",
        "resources": [
          {
            "type": "article",
            "title": "Visit Dedicated Git & GitHub Roadmap",
            "url": "https://roadmap.sh/git-github"
          },
          {
            "type": "video",
            "title": "Git & GitHub Crash Course For Beginners",
            "url": "https://www.youtube.com/watch?v=SWYqp7iY_Tc"
          },
          {
            "type": "article",
            "title": "Git Cheat Sheet",
            "url": "https://cs.fyi/guide/git-cheatsheet"
          },
          {
            "type": "article",
            "title": "Tutorial: Git for Absolutely Everyone",
            "url": "https://thenewstack.io/tutorial-git-for-absolutely-everyone/"
          },
          {
            "type": "article",
            "title": "Explore top posts about Git",
            "url": "https://app.daily.dev/tags/git?ref=roadmapsh"
          }
        ]
      }
    },
    {
      "id": "CYnUg_okOcRrD7fSllxLW",
      "name": "Slack",
      "resources": {
        "description": "# Slack\n\nSlack is a messaging app for business that connects people to the information that they need. By bringing people together to work as one unified team, Slack transforms the way that organisations communicate.",
        "resources": [
          {
            "type": "course",
            "title": "Slack",
            "url": "https://slack.com"
          },
          {
            "type": "course",
            "title": "Getting Started with Slack",
            "url": "https://slack.com/intl/en-in/help/categories/360000049043"
          },
          {
            "type": "video",
            "title": "What is Slack?",
            "url": "https://www.youtube.com/watch?v=q19RtuCHt1Q"
          },
          {
            "type": "article",
            "title": "Explore top posts about Slack",
            "url": "https://app.daily.dev/tags/slack?ref=roadmapsh"
          }
        ]
      }
    },
    {
      "id": "a6joS9WXg-rbw29_KfBd9",
      "name": "Trello",
      "resources": {
        "description": "# Trello\n\nTrello is the visual tool that empowers your team to manage any type of project, workflow, or task tracking.",
        "resources": [
          {
            "type": "course",
            "title": "Trello",
            "url": "https://trello.com"
          },
          {
            "type": "course",
            "title": "Trello Guide",
            "url": "https://trello.com/guide"
          },
          {
            "type": "video",
            "title": "A Tour Of Trello",
            "url": "https://www.youtube.com/watch?v=AyfupeWS0yY"
          }
        ]
      }
    },
    {
      "id": "3bpd0iZTd3G-H8A7yrExY",
      "name": "Atlassian Tools",
      "resources": {
        "description": "# Atlassian Tools\n\nAtlassian tools offer a suite of solutions designed to streamline collaboration, project management, and incident handling for various teams. Jira serves as the core workflow engine, allowing organizations to track tasks through customizable workflows with granular permissions. Specialized tools like Jira Service Desk cater to help desk teams for managing incoming requests, while Jira Core enables business teams to organize and execute task-oriented projects across departments like marketing, HR, and operations. For enhanced collaboration, Confluence acts as a knowledge-sharing wiki, allowing teams to create, share, and audit content changes seamlessly. Bitbucket provides Git repository management for enterprise teams, fostering efficient collaboration on codebases.\n\nOther tools cater to more specific needs. **Statuspage** focuses on communication during outages or maintenance, keeping users informed from investigation to resolution. **Opsgenie** ensures smooth incident management for always-on services, helping dev and ops teams stay in control of alerts. **Advanced Roadmaps** for Jira assists multiple teams in capacity planning and dependency tracking, while **Jira Align** supports enterprise-level agile planning to align strategy with execution and drive digital transformation. Together, these tools empower teams to improve efficiency, transparency, and adaptability across various workflows.",
        "resources": [
          {
            "type": "course",
            "title": "Jira Service Desk",
            "url": "https://www.atlassian.com/software/jira/service-management/features/service-desk"
          },
          {
            "type": "course",
            "title": "Jira Core",
            "url": "https://www.atlassian.com/software/jira/work-management"
          },
          {
            "type": "course",
            "title": "Confluence",
            "url": "https://www.atlassian.com/wac/software/confluence?"
          },
          {
            "type": "course",
            "title": "Bitbucket",
            "url": "https://bitbucket.org/product/"
          },
          {
            "type": "course",
            "title": "Statuspage",
            "url": "https://www.atlassian.com/software/statuspage"
          },
          {
            "type": "course",
            "title": "Opsgenie",
            "url": "https://www.atlassian.com/software/opsgenie"
          },
          {
            "type": "course",
            "title": "Advanced Roadmaps for Jira",
            "url": "https://www.atlassian.com/software/jira/features/roadmaps"
          },
          {
            "type": "course",
            "title": "Jira Align",
            "url": "https://www.atlassian.com/software/jira/align"
          },
          {
            "type": "article",
            "title": "Explore top posts about Atlassian",
            "url": "https://app.daily.dev/tags/atlassian?ref=roadmapsh"
          }
        ]
      }
    },
    {
      "id": "PyTuVs08_z4EhLwhTYzFu",
      "name": "GitHub",
      "resources": {
        "description": "# GitHub\n\nGitHub has become a central hub for open-source projects and is widely used by developers, companies, and organizations for both private and public repositories. It was acquired by Microsoft in 2018 but continues to operate as a relatively independent entity. GitHub's popularity has made it an essential tool in modern software development workflows and a key platform for showcasing coding projects and contributing to open-source software.",
        "resources": [
          {
            "type": "article",
            "title": "Visit Dedicated Git & GitHub Roadmap",
            "url": "https://roadmap.sh/git-github"
          },
          {
            "type": "course",
            "title": "GitHub",
            "url": "https://github.com"
          },
          {
            "type": "course",
            "title": "GitHub: Quickstart",
            "url": "https://docs.github.com/en/get-started/quickstart/hello-world"
          },
          {
            "type": "course",
            "title": "GitHub Documentation",
            "url": "https://docs.github.com/en/get-started/quickstart"
          },
          {
            "type": "course",
            "title": "Learn GitHub by doing",
            "url": "https://skills.github.com/"
          },
          {
            "type": "video",
            "title": "What is GitHub?",
            "url": "https://www.youtube.com/watch?v=w3jLJU7DT5E"
          },
          {
            "type": "article",
            "title": "Explore top posts about GitHub",
            "url": "https://app.daily.dev/tags/github?ref=roadmapsh"
          }
        ]
      }
    },
    {
      "id": "SuMhTyaBS9vwASxAt39DH",
      "name": "Tools",
      "resources": {
        "description": "# Architect Tools\n\nArchitect tools are software tools that help architects to design, document, and manage software architectures. These tools can be used to create architecture diagrams, generate code, and automate the software development process.",
        "resources": []
      }
    },
    {
      "id": "OaLmlfkZid7hKqJ9G8oNV",
      "name": "Architecture",
      "resources": {
        "description": "# Architectures\n\nArchitecture refers to the approach of designing and implementing software architecture with a focus on the tools and technologies that will be used during the development process. This perspective emphasizes that the selection of tools can significantly influence architectural decisions and the overall design of the system.",
        "resources": []
      }
    },
    {
      "id": "FAXKxl3fWUFShYmoCsInZ",
      "name": "Serverless",
      "resources": {
        "description": "# Serverless\n\nServerless architecture (also known as serverless computing or function as a service, FaaS) is a software design pattern where applications are hosted by a third-party service, eliminating the need for server software and hardware management by the developer. Applications are broken up into individual functions that can be invoked and scaled individually.",
        "resources": [
          {
            "type": "article",
            "title": "Serverless Architectures By AWS",
            "url": "https://aws.amazon.com/lambda/serverless-architectures-learn-more/"
          },
          {
            "type": "article",
            "title": "Serverless in Detail",
            "url": "https://martinfowler.com/articles/serverless.html"
          },
          {
            "type": "article",
            "title": "Explore top posts about Serverless",
            "url": "https://app.daily.dev/tags/serverless?ref=roadmapsh"
          }
        ]
      }
    },
    {
      "id": "mka_DwiboH5sGFhXhk6ez",
      "name": "Client / Server",
      "resources": {
        "description": "# Client-Server Architecture\n\nClient-server architecture is a computing model that separates tasks or workloads between service providers (servers) and service requesters (clients). This architecture is widely used in networked applications, including web applications, where clients interact with servers to access resources, services, and data.",
        "resources": [
          {
            "type": "article",
            "title": "What is Client-Server Architecture",
            "url": "https://www.simplilearn.com/what-is-client-server-architecture-article"
          },
          {
            "type": "article",
            "title": "Explore top posts about Architecture",
            "url": "https://app.daily.dev/tags/architecture?ref=roadmapsh"
          }
        ]
      }
    },
    {
      "id": "05hLO2_A8Tr6cLJGFRhOh",
      "name": "Layered",
      "resources": {
        "description": "# Layered Architecture\n\nLayered architecture is a software design pattern where an application is divided into distinct layers, each with a specific responsibility, such as presentation, business logic, and data access. This approach promotes modularity, easier maintenance, testing, and component reusability. The most common implementation is the three-tier architecture, which separates concerns between the user interface, business rules, and data handling. However, it can introduce complexity, performance issues, tight coupling, and overhead if not carefully implemented. Despite these challenges, layered architecture is widely used in scalable and maintainable systems, particularly in enterprise applications.",
        "resources": [
          {
            "type": "article",
            "title": "Wikipedia",
            "url": "https://en.wikipedia.org/wiki/Layered_architecture"
          }
        ]
      }
    },
    {
      "id": "j7OP6RD_IAU6HsyiGaynx",
      "name": "Distributed Systems",
      "resources": {
        "description": "# Distributed Systems\n\nDistributed systems are a type of computing architecture where components located on networked computers communicate and coordinate their actions by passing messages. These systems are designed to work together to achieve a common goal, often providing services or processing data in a collaborative manner.",
        "resources": [
          {
            "type": "article",
            "title": "Free Distributed Systems book from Maarten van Steen",
            "url": "https://www.distributed-systems.net/index.php/books/ds3/"
          },
          {
            "type": "article",
            "title": "Distributed Architectures",
            "url": "https://estuary.dev/distributed-architecture/"
          },
          {
            "type": "article",
            "title": "Explore top posts about Architecture",
            "url": "https://app.daily.dev/tags/architecture?ref=roadmapsh"
          }
        ]
      }
    },
    {
      "id": "6uvmMgvOwGyuLC5TOhjFu",
      "name": "Service Oriented",
      "resources": {
        "description": "# Service oriented\n\nService-oriented architecture (SOA) is an enterprise-wide approach to software development of application components that takes advantage of reusable software components, or services.\n\nSOA provides four different service types:\n\n1. Functional services (i.e., business services), which are critical for business applications.\n2. Enterprise services, which serve to implement functionality.\n3. Application services, which are used to develop and deploy apps.\n4. Infrastructure services, which are instrumental for backend processes like security and authentication.",
        "resources": [
          {
            "type": "article",
            "title": "SOA Architecture By AWS",
            "url": "https://aws.amazon.com/what-is/service-oriented-architecture/"
          }
        ]
      }
    },
    {
      "id": "IzFTn5-tQuF_Z0cG_w6CW",
      "name": "Security",
      "resources": {
        "description": "# Security\n\nSecurity is a broad field that encompasses various measures and practices designed to protect information, systems, and networks from unauthorized access, damage, or theft. It is essential in safeguarding sensitive data and maintaining the integrity and availability of resources.",
        "resources": [
          {
            "type": "article",
            "title": "Security - Wikipedia",
            "url": "https://en.wikipedia.org/wiki/Security"
          },
          {
            "type": "article",
            "title": "Architect Security",
            "url": "https://aws.amazon.com/blogs/architecture/lets-architect-security-in-software-architectures/"
          }
        ]
      }
    },
    {
      "id": "7tBAD0ox9hTK4D483GTRo",
      "name": "Hashing Algorithms",
      "resources": {
        "description": "# Hashing Algorithms\n\nHashing algorithms are used to generate a unique value for a given input. This value is called a hash. Hashing algorithms are used to verify the integrity of data, to store passwords, and to generate unique identifiers for data.",
        "resources": [
          {
            "type": "article",
            "title": "What is Hashing?",
            "url": "https://www.codecademy.com/resources/blog/what-is-hashing/"
          },
          {
            "type": "video",
            "title": "Hashing Algorithms and Security - Computerphile",
            "url": "https://www.youtube.com/watch?v=b4b8ktEV4Bg"
          },
          {
            "type": "video",
            "title": "Top Hashing Algorithms In Cryptography | MD5 and SHA 256 Algorithms Expalined | Simplilearn",
            "url": "https://www.youtube.com/watch?v=Plp4F3ZfC7A"
          },
          {
            "type": "video",
            "title": "SHA: Secure Hashing Algorithm - Computerphile",
            "url": "https://www.youtube.com/watch?v=DMtFhACPnTY"
          },
          {
            "type": "article",
            "title": "Explore top posts about Algorithms",
            "url": "https://app.daily.dev/tags/algorithms?ref=roadmapsh"
          }
        ]
      }
    },
    {
      "id": "OpL2EqvHbUmFgnpuhtZPr",
      "name": "PKI",
      "resources": {
        "description": "# PKI\n\nA public key infrastructure (PKI) is a set of roles, policies, hardware, software, and procedures to create, manage, distribute, use, store and revoke digital certificates and public-key encryption. The purpose of a PKI is to facilitate the secure electronic transfer of information for a range of network activities such as e-commerce, internet banking, and confidential email. It is required for activities where simple passwords are an inadequate authentication method, and the more rigorous proof is required to confirm the identity of the parties involved in the communication and to validate the information being transferred.",
        "resources": [
          {
            "type": "article",
            "title": "PKI - Wikipedia",
            "url": "https://en.wikipedia.org/wiki/Public_key_infrastructure"
          },
          {
            "type": "article",
            "title": "PKI - DoD Cyber Exchange",
            "url": "https://public.cyber.mil/pki-pke/"
          }
        ]
      }
    },
    {
      "id": "KhqUK-7jdClu9M2Pq7x--",
      "name": "OWASP",
      "resources": {
        "description": "# OWASP\n\nOWASP or Open Web Application Security Project is an online community that produces freely-available articles, methodologies, documentation, tools, and technologies in the field of web application security.",
        "resources": [
          {
            "type": "tutorial",
            "title": "OWASP Web Application Security Testing Checklist",
            "url": "https://github.com/0xRadi/OWASP-Web-Checklist"
          },
          {
            "type": "article",
            "title": "Wikipedia - OWASP",
            "url": "https://en.wikipedia.org/wiki/OWASP"
          },
          {
            "type": "article",
            "title": "OWASP Top 10 Security Risks",
            "url": "https://sucuri.net/guides/owasp-top-10-security-vulnerabilities-2021/"
          },
          {
            "type": "article",
            "title": "OWASP Cheatsheets",
            "url": "https://cheatsheetseries.owasp.org/cheatsheets/AJAX_Security_Cheat_Sheet.html"
          }
        ]
      }
    },
    {
      "id": "KiwFXB6yd0go30zAFMTJt",
      "name": "Auth Strategies",
      "resources": {
        "description": "# Authentication Strategies\n\nAuthentication strategies are essential for ensuring secure access to applications and systems. They define how users are verified before being granted access to resources. Here are some common authentication strategies:\n\nPassword-Based Authentication\n\nMulti-Factor Authentication (MFA)\n\nOAuth and OpenID Connect\n\nToken-Based Authentication:\n\nBiometric Authentication\n\nCertificate-Based Authentication",
        "resources": [
          {
            "type": "article",
            "title": "JSON Web Token - Handbook",
            "url": "https://auth0.com/resources/ebooks/jwt-handbook"
          },
          {
            "type": "article",
            "title": "Authentication vs Authorization",
            "url": "https://www.cerbos.dev/blog/authentication-vs-authorization"
          },
          {
            "type": "video",
            "title": "SAML Overview",
            "url": "https://www.youtube.com/watch?v=i8wFExDSZv0"
          },
          {
            "type": "video",
            "title": "A Developers Guide to SAML",
            "url": "https://www.youtube.com/watch?v=l-6QSEqDJPo"
          },
          {
            "type": "video",
            "title": "SAML 2.0: Technical Overview",
            "url": "https://www.youtube.com/watch?v=SvppXbpv-5k"
          },
          {
            "type": "video",
            "title": "An Illustrated Guide to OAuth and OpenID Connect",
            "url": "https://www.youtube.com/watch?v=t18YB3xDfXI"
          },
          {
            "type": "video",
            "title": "OAuth 2.0 & OpenID Connect (OIDC): Technical Overview",
            "url": "https://www.youtube.com/watch?v=rTzlF-U9Y6Y"
          }
        ]
      }
    },
    {
      "id": "YCJYRA3b-YSm8vKmGUFk5",
      "name": "Working with Data",
      "resources": {
        "description": "# Working with Databases\n\nWorking with databases involves storing, managing, and retrieving data efficiently to support applications and business processes. Databases can be relational, like MySQL and PostgreSQL, which use structured tables and SQL for querying, or non-relational (NoSQL), like MongoDB and Cassandra, which handle unstructured or semi-structured data. Effective database management requires designing normalized schemas for relational databases, ensuring data integrity, and optimizing queries for performance. For NoSQL databases, it's important to choose the right type (e.g., document, key-value, columnar) based on application needs. Additionally, managing transactions, indexing, backups, and security are crucial for maintaining reliable and scalable database systems.",
        "resources": [
          {
            "type": "article",
            "title": "Introduction to Databases",
            "url": "https://www.digitalocean.com/community/conceptual-articles/an-introduction-to-databases"
          }
        ]
      }
    },
    {
      "id": "92GG4IRZ3FijumC94aL-T",
      "name": "Hadoop, Spark, MapReduce",
      "resources": {
        "description": "# Spark, Hadoop MapReduce\n\nSpark is a data processing framework that can quickly perform processing tasks on very large data sets, and can also distribute data processing tasks across multiple computers, either on its own or in tandem with other distributed computing tools.\n\nHadoop MapReduce is a software framework for easily writing applications which process vast amounts of data (multi-terabyte data-sets) in-parallel on large clusters (thousands of nodes) of commodity hardware in a reliable, fault-tolerant manner.",
        "resources": [
          {
            "type": "course",
            "title": "Apache Spark",
            "url": "https://spark.apache.org/"
          },
          {
            "type": "article",
            "title": "Spark vs Hadoop MapReduce",
            "url": "https://www.integrate.io/blog/apache-spark-vs-hadoop-mapreduce"
          },
          {
            "type": "video",
            "title": "Hadoop explained in 5 minutes",
            "url": "https://www.youtube.com/watch?v=aReuLtY0YMI"
          },
          {
            "type": "article",
            "title": "Explore top posts about Apache Spark",
            "url": "https://app.daily.dev/tags/spark?ref=roadmapsh"
          }
        ]
      }
    },
    {
      "id": "JUFE4OQhnXOt1J_MG-Sjf",
      "name": "ETL, Datawarehouses",
      "resources": {
        "description": "# ETL Datawarehouses\n\nETL (Extract, Transform, Load) is a key process in data warehousing, enabling the integration of data from multiple sources into a centralized database. The process begins by **extracting** data from original sources, followed by **transforming** it to ensure quality, deduplication, and combination, and finally **loading** it into the target database. ETL tools streamline this process, allowing companies to consolidate diverse data types and ensure seamless integration for effective data analysis and decision-making.",
        "resources": [
          {
            "type": "article",
            "title": "What is ETL?",
            "url": "https://www.snowflake.com/guides/what-etl"
          },
          {
            "type": "video",
            "title": "ETL Explained",
            "url": "https://www.youtube.com/watch?v=OW5OgsLpDCQ"
          },
          {
            "type": "article",
            "title": "Explore top posts about ETL",
            "url": "https://app.daily.dev/tags/etl?ref=roadmapsh"
          }
        ]
      }
    },
    {
      "id": "n5AcBt_u8qtTe3PP9svPZ",
      "name": "SQL Databases",
      "resources": {
        "description": "# Sql databases\n\nSQL stands for Structured Query Language. It's used for relational databases. A SQL database is a collection of tables that stores a specific set of structured data. Examples of SQL Databases includes MariaDB, MySQL and PostgreSQL.",
        "resources": [
          {
            "type": "article",
            "title": "Visit Dedicated SQL Roadmap",
            "url": "https://roadmap.sh/sql"
          },
          {
            "type": "article",
            "title": "What is SQL? - AWS",
            "url": "https://aws.amazon.com/what-is/sql/"
          },
          {
            "type": "article",
            "title": "SQL Databases",
            "url": "https://www.openlogic.com/blog/what-sql-database"
          },
          {
            "type": "article",
            "title": "Explore top posts about SQL",
            "url": "https://app.daily.dev/tags/sql?ref=roadmapsh"
          }
        ]
      }
    },
    {
      "id": "57liQPaPyVpE-mdLnsbi0",
      "name": "NoSQL Databases",
      "resources": {
        "description": "# Nosql databases\n\nNoSQL databases (aka \"not only SQL\") are non-tabular databases and store data differently than relational tables. NoSQL databases come in a variety of types based on their data model. The main types are document, key-value, wide-column, and graph. They provide flexible schemas and scale easily with large amounts of data and high user loads.\n\nTypes of NoSQL databases\n\n- Document databases Ex. MongoDB\n- Key-value databases Ex. Redis\n- Wide-column databases Ex. Cassandra\n- Graph databases Ex. Neo4J",
        "resources": [
          {
            "type": "article",
            "title": "NoSQL Database - AWS",
            "url": "https://aws.amazon.com/nosql/"
          },
          {
            "type": "article",
            "title": "NoSQL Databases",
            "url": "https://www.mongodb.com/resources/basics/databases/nosql-explained"
          },
          {
            "type": "article",
            "title": "Explore top posts about NoSQL",
            "url": "https://app.daily.dev/tags/nosql?ref=roadmapsh"
          }
        ]
      }
    },
    {
      "id": "a0baFv7hVWZGvS5VLh5ig",
      "name": "Apache Spark",
      "resources": {
        "description": "# Apache spark\n\nApache Spark is a multi-language engine for executing data engineering, data science, and machine learning on single-node machines or clusters.",
        "resources": [
          {
            "type": "course",
            "title": "Apache Spark",
            "url": "https://spark.apache.org/"
          },
          {
            "type": "article",
            "title": "Explore top posts about Apache",
            "url": "https://app.daily.dev/tags/apache?ref=roadmapsh"
          }
        ]
      }
    },
    {
      "id": "I_VjjmMK52_tS8qjQUspN",
      "name": "Hadoop",
      "resources": {
        "description": "# Hadoop\n\nThe Apache Hadoop software library is a framework that allows for the distributed processing of large data sets across clusters of computers using simple programming models.",
        "resources": [
          {
            "type": "course",
            "title": "Apache Hadoop",
            "url": "https://hadoop.apache.org/"
          },
          {
            "type": "article",
            "title": "Apache Hadoop - Wikipedia",
            "url": "https://en.wikipedia.org/wiki/Apache_Hadoop"
          },
          {
            "type": "article",
            "title": "Explore top posts about Apache Hadoop",
            "url": "https://app.daily.dev/tags/apache-hadoop?ref=roadmapsh"
          }
        ]
      }
    },
    {
      "id": "B5YtP8C1A0jB3MOdg0c_q",
      "name": "Datawarehouse Principles",
      "resources": {
        "description": "# Datawarehouses Principles\n\nIt is based on the assumption that every system should take care of a concern in a way that such concern should be encapsulated by the system itself.",
        "resources": [
          {
            "type": "article",
            "title": "Toptal Developers Website",
            "url": "https://www.toptal.com/data-science/data-warehouse-concepts-principles"
          }
        ]
      }
    },
    {
      "id": "Ocn7-ctpnl71ZCZ_uV-uD",
      "name": "APIs & Integrations",
      "resources": {
        "description": "# APIs and Integrations\n\nAPIs (Application Programming Interfaces) are essential for enabling communication between different software applications, allowing them to share data and functionality seamlessly. They serve as the bridge that connects disparate systems, making it possible for applications to interact without needing to know the internal workings of one another. Integration, on the other hand, refers to the process of connecting these systems to work together effectively, often utilizing APIs to facilitate data exchange and process automation. By leveraging APIs in integrations, organizations can enhance operational efficiency, reduce data silos, and improve user experiences through seamless data flow between applications.",
        "resources": [
          {
            "type": "article",
            "title": "What is API Integration",
            "url": "https://www.ibm.com/topics/api-integration"
          },
          {
            "type": "article",
            "title": "API Integration - Postman",
            "url": "https://www.postman.com/api-platform/api-integration/"
          },
          {
            "type": "article",
            "title": "API First Integration",
            "url": "https://www.infoq.com/articles/api-first-integration/"
          }
        ]
      }
    },
    {
      "id": "priDGksAvJ05YzakkTFtM",
      "name": "gRPC",
      "resources": {
        "description": "# gRPC\n\ngRPC is a platform agnostic serialization protocol that is used to communicate between services. Designed by Google in 2015, it is a modern alternative to REST APIs. It is a binary protocol that uses HTTP/2 as a transport layer. It is a high performance, open source, general-purpose RPC framework that puts mobile and HTTP/2 first.\n\nIt's main use case is for communication between two different languages within the same application. You can use Python to communicate with Go, or Java to communicate with C#.\ngRPC uses the protocol buffer language to define the structure of the data that is",
        "resources": [
          {
            "type": "course",
            "title": "gRPC Website",
            "url": "https://grpc.io/"
          },
          {
            "type": "course",
            "title": "gRPC Introduction",
            "url": "https://grpc.io/docs/what-is-grpc/introduction/"
          },
          {
            "type": "course",
            "title": "gRPC Core Concepts",
            "url": "https://grpc.io/docs/what-is-grpc/core-concepts/"
          },
          {
            "type": "video",
            "title": "Stephane Maarek - gRPC Introduction",
            "url": "https://youtu.be/XRXTsQwyZSU"
          },
          {
            "type": "article",
            "title": "Explore top posts about gRPC",
            "url": "https://app.daily.dev/tags/grpc?ref=roadmapsh"
          }
        ]
      }
    },
    {
      "id": "fELnBA0eOoE-d9rSmDJ8l",
      "name": "ESB, SOAP",
      "resources": {
        "description": "# ESB and SOAP\n\nESB (Enterprise Service Bus) and SOAP (Simple Object Access Protocol) are two technologies that enable communication between different systems. ESB is a software architecture that allows for the integration of various systems, such as databases, web services, and mobile applications. SOAP is a messaging protocol that enables the exchange of structured data between systems over the internet.",
        "resources": [
          {
            "type": "article",
            "title": "Understanding SOAP: The Old Guard of Web Services",
            "url": "https://mariomthree.medium.com/understanding-soap-the-old-guard-of-web-services-6ca89d8ec312"
          },
          {
            "type": "article",
            "title": "Enterprise Service Bus",
            "url": "https://en.wikipedia.org/wiki/Enterprise_service_bus"
          },
          {
            "type": "article",
            "title": "ESB - IBM",
            "url": "https://www.ibm.com/topics/esb"
          }
        ]
      }
    },
    {
      "id": "Sp3FdPT4F9YnTGvlE_vyq",
      "name": "GraphQL",
      "resources": {
        "description": "# Graphql\n\nGraphQL is a query language and runtime for APIs, developed by Facebook. GraphQL's flexibility and efficiency make it popular for building complex applications, especially those with diverse client requirements. It's particularly useful for mobile applications where bandwidth efficiency is crucial. While it requires a paradigm shift from REST, many developers and organizations find GraphQL's benefits outweigh the learning curve, especially for large-scale or rapidly evolving APIs.",
        "resources": [
          {
            "type": "article",
            "title": "visit Dedicated GraphQL Roadmap",
            "url": "https://roadmap.sh/graphql"
          },
          {
            "type": "course",
            "title": "Introduction to GraphQL",
            "url": "https://graphql.org/learn/"
          },
          {
            "type": "video",
            "title": "GraphQL Course for Beginners",
            "url": "https://www.youtube.com/watch?v=ed8SzALpx1Q"
          },
          {
            "type": "article",
            "title": "Introduction to GraphQL",
            "url": "https://thenewstack.io/introduction-to-graphql/"
          },
          {
            "type": "article",
            "title": "How to Execute a Simple GraphQL Query",
            "url": "https://thenewstack.io/how-to-execute-a-simple-graphql-query/"
          },
          {
            "type": "article",
            "title": "Explore top posts about GraphQL",
            "url": "https://app.daily.dev/tags/graphql?ref=roadmapsh"
          }
        ]
      }
    },
    {
      "id": "Ss43xwK1ydEToj6XmmCt7",
      "name": "REST",
      "resources": {
        "description": "# REST\n\nREST, or REpresentational State Transfer, is an architectural style for providing standards between computer systems on the web, making it easier for systems to communicate with each other.",
        "resources": [
          {
            "type": "article",
            "title": "What is a REST API?",
            "url": "https://www.redhat.com/en/topics/api/what-is-a-rest-api"
          },
          {
            "type": "article",
            "title": "Roy Fieldings dissertation chapter, Representational State Transfer (REST)",
            "url": "https://www.ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm"
          },
          {
            "type": "article",
            "title": "Learn REST: A RESTful Tutorial",
            "url": "https://restapitutorial.com/"
          },
          {
            "type": "article",
            "title": "Explore top posts about REST API",
            "url": "https://app.daily.dev/tags/rest-api?ref=roadmapsh"
          }
        ]
      }
    },
    {
      "id": "DwNda95-fE7LWnDA6u1LU",
      "name": "BPM, BPEL",
      "resources": {
        "description": "# BPM BPEL\n\n## BPM: Business Process Management\n\nMedium or large enterprises needs robust processes to streamline their business needs by reducing the cost incurred per process and diminishing the turn around time for each activity.\nTo achieve the above, there are various BPM tools like PEGA, IBM BPM, Appian, etc. Basically these tools automate the processes through a robust process modelling and implementation.\n\n## BPMN: Business Process Management Notations\n\nIts is a standard for representing business processes graphically. While modelling the process, the notations used are complied with BPMN (there are other like EPC, etc.). So BPMN is a standard notation that BPM consultants follow to model the business process. BPMN has versions and now BPMN 2.0 is the standard one.\n\n## BPEL : Business Process Execution Language\n\nProgrammers use BPEL to define how a business process that involves web services will be executed. BPEL messages are typically used to invoke remote services, orchestrate process execution and manage events and exceptions. BPEL is often associated with Business Process Management Notation. In many organizations, analysts use BPMN to visualize business processes and developers transform the visualizations to BPEL for execution.",
        "resources": [
          {
            "type": "article",
            "title": "What is BPM?",
            "url": "https://www.redhat.com/en/topics/automation/what-is-business-process-management"
          },
          {
            "type": "article",
            "title": "BPEL described",
            "url": "https://www.ibm.com/docs/en/baw/19.x?topic=SS8JB4_19.x/com.ibm.wbpm.wid.main.doc/prodoverview/topics/cbpelproc.html"
          },
          {
            "type": "video",
            "title": "BPM vs BPEL",
            "url": "https://www.youtube.com/watch?v=V6nr5dnb1JQ"
          }
        ]
      }
    },
    {
      "id": "4NVdEbmpQVHpBc7582S6E",
      "name": "Messaging Queues",
      "resources": {
        "description": "# Messaging queues\n\nMessage queuing makes it possible for applications to communicate asynchronously, by sending messages to each other via a queue. A message queue provides temporary storage between the sender and the receiver so that the sender can keep operating without interruption when the destination program is busy or not connected.",
        "resources": [
          {
            "type": "article",
            "title": "Messaging Queues",
            "url": "https://aws.amazon.com/message-queue/"
          },
          {
            "type": "article",
            "title": "Messaging Queues Tutorial",
            "url": "https://www.tutorialspoint.com/inter_process_communication/inter_process_communication_message_queues.htm"
          }
        ]
      }
    },
    {
      "id": "j9Y2YbBKi3clO_sZ2L_hQ",
      "name": "Web, Mobile",
      "resources": {
        "description": "# Web and Mobile\n\nWeb apps and mobile apps are two distinct types of software applications designed to run on different platforms. Web apps are accessed through web browsers and run on various devices using internet connectivity. They are platform-independent, making them easy to update and maintain, but often require an active internet connection. Mobile apps, on the other hand, are specifically developed for mobile operating systems like Android and iOS, providing enhanced performance, offline functionality, and seamless access to device features such as GPS, cameras, and sensors. While web apps prioritize accessibility and cost-effectiveness, mobile apps focus on delivering a tailored and optimized user experience.",
        "resources": [
          {
            "type": "article",
            "title": "Web vs Mobile",
            "url": "https://buildfire.com/difference-between-web-app-and-mobile-app/"
          }
        ]
      }
    },
    {
      "id": "6FDGecsHbqY-cm32yTZJa",
      "name": "Functional Programming",
      "resources": {
        "description": "# Functional Programming\n\nFunctional programming is a programming paradigm designed to handle pure mathematical functions. This paradigm is totally focused on writing more compounded and pure functions.",
        "resources": [
          {
            "type": "article",
            "title": "Functional Programming",
            "url": "https://en.wikipedia.org/wiki/Functional_programming"
          },
          {
            "type": "video",
            "title": "Learning Functional Programming",
            "url": "https://youtube.com/watch?v=e-5obm1G_FY"
          },
          {
            "type": "article",
            "title": "Functional Programming with JavaScript",
            "url": "https://www.telerik.com/blogs/functional-programming-javascript"
          }
        ]
      }
    },
    {
      "id": "mCiYCbKIOVU34qil_q7Hg",
      "name": "React, Vue, Angular",
      "resources": {
        "description": "# React\n\nReact is the most popular front-end JavaScript library for building user interfaces. React can also render on the server using Node and power mobile apps using React Native.\n\nVue.js is a progressive JavaScript framework designed for building user interfaces and single-page applications.\n\nAngular is a TypeScript-based open-source front-end web application framework led by the Angular Team at Google.",
        "resources": [
          {
            "type": "article",
            "title": "Visit Dedicated React Roadmap",
            "url": "https://roadmap.sh/react"
          },
          {
            "type": "article",
            "title": "Visit Dedicated Vue Roadmap",
            "url": "https://roadmap.sh/vue"
          },
          {
            "type": "article",
            "title": "Visit Dedicated Angular Roadmap",
            "url": "https://roadmap.sh/angular"
          },
          {
            "type": "course",
            "title": "React",
            "url": "https://react.dev/"
          },
          {
            "type": "course",
            "title": "Vue.js",
            "url": "https://vuejs.org/"
          },
          {
            "type": "course",
            "title": "Angular",
            "url": "https://angular.dev/"
          },
          {
            "type": "video",
            "title": "React JS Course for Beginners",
            "url": "https://www.youtube.com/watch?v=nTeuhbP7wdE"
          },
          {
            "type": "video",
            "title": "Vue.js Course for Beginners",
            "url": "https://www.youtube.com/watch?v=FXpIoQ_rT_c"
          },
          {
            "type": "video",
            "title": "Angular Course for Beginners",
            "url": "https://www.youtube.com/watch?v=3qBXWUpoPHo"
          },
          {
            "type": "article",
            "title": "Explore top posts about Angular",
            "url": "https://app.daily.dev/tags/angular?ref=roadmapsh"
          }
        ]
      }
    },
    {
      "id": "ulwgDCQi_BYx5lmll7pzU",
      "name": "SPA, SSR, SSG",
      "resources": {
        "description": "# SPA vs SSG vs SSR\n\n- **SPA**: A single page application loads only a single web document from the server and then updates the content of that document on demand via `Javascript APIs` without reloading the entire document. React, Vue, Angular are the top frameworks used to create single page applications.\n- **SSR**: This technique uses a server like `Node.js` to fully render the web document upon the receival of a request and then send it back to the client. This way the user get an interactive document with all the necessary information without having to wait for any JavaScript or CSS files to load.\n- **SSG**: Static site generation renders the web document in the server(like SSR), however the page is rendered at **build time**. So, instead of rendering the page on the server upon the receival of a request, the page is already rendered in the server, waiting to be served to the client.",
        "resources": [
          {
            "type": "article",
            "title": "Web Design Patterns — SSR, SSG, and SPA",
            "url": "https://medium.com/codex/web-design-patterns-ssr-ssg-and-spa-fadad7673dfe"
          },
          {
            "type": "article",
            "title": "Rendering on the Web",
            "url": "https://web.dev/rendering-on-the-web/"
          },
          {
            "type": "article",
            "title": "Explore top posts about Web Development",
            "url": "https://app.daily.dev/tags/webdev?ref=roadmapsh"
          }
        ]
      }
    },
    {
      "id": "vpko5Kyf6BZ5MHpxXOKaf",
      "name": "Microfrontends",
      "resources": {
        "description": "# Microfrontends\n\nMicrofrontends is an architectural style where independently deliverable frontend applications built by different teams using different technologies are composed into a greater whole. Simply, a Micro-Frontend is a portion of a webpage (not the entire page). There is a “Host” or a “Container” page in the Micro-Frontend Architecture page that can host one or more Micro-Frontends.",
        "resources": [
          {
            "type": "article",
            "title": "Micro Frontends",
            "url": "https://micro-frontends.org/"
          },
          {
            "type": "video",
            "title": "Micro-Frontends Course - Beginner to Expert",
            "url": "https://www.youtube.com/watch?v=lKKsjpH09dU"
          },
          {
            "type": "article",
            "title": "Explore top posts about Web Development",
            "url": "https://app.daily.dev/tags/webdev?ref=roadmapsh"
          }
        ]
      }
    },
    {
      "id": "s0RvufK2PLMXtlsn2KAUN",
      "name": "W3C and WHATWG",
      "resources": {
        "description": "# W3c and WHATWG Standards\n\nWorld Wide Web Consortium (W3C) standards define the best practices for web development to enable developers to build rich interactive experiences that are available on any device. Theses standards range from recommended web technologies such as HTML, CSS, XML to the generally accepted principles of web architecture, semantics and services.\n\nWeb Hypertext Application Technology Working Group (WHATWG) is another set of web standards that came into existence after W3C announced that it was going to be focusing on XHTML over HTML.",
        "resources": [
          {
            "type": "course",
            "title": "W3C Standards",
            "url": "https://www.w3.org/standards/"
          },
          {
            "type": "course",
            "title": "WHATWG Standards",
            "url": "https://spec.whatwg.org/"
          }
        ]
      }
    },
    {
      "id": "C0g_kQFlte5siHMHwlHQb",
      "name": "Reactive Programming",
      "resources": {
        "description": "# Reactive Programming\n\nReactive programming describes a design paradigm that relies on asynchronous programming logic to handle real-time updates to otherwise static content. It provides an efficient means -- the use of automated data streams -- to handle data updates to content whenever a user makes an inquiry.",
        "resources": [
          {
            "type": "article",
            "title": "What is Reactive Programming?",
            "url": "https://www.techtarget.com/searchapparchitecture/definition/reactive-programming"
          }
        ]
      }
    },
    {
      "id": "hjlkxYZS7Zf9En3IUS-Wm",
      "name": "Frameworks",
      "resources": {
        "description": "# Architect Frameworks\n\nArchitect frameworks are tools that provide a structured approach to software architecture. They help architects organize their work, manage dependencies, and ensure consistency across projects. Some popular frameworks include:",
        "resources": [
          {
            "type": "article",
            "title": "Architect Frameworks",
            "url": "https://www.techtarget.com/searchapparchitecture/definition/enterprise-architecture-framework"
          },
          {
            "type": "article",
            "title": "Common Software Architecture Frameworks",
            "url": "https://medium.com/@publicapplicationcenter/tutorial-notes-common-software-architecture-frameworks-1a9915e1d806"
          }
        ]
      }
    },
    {
      "id": "LQlzVxUxM3haWRwbhYHKY",
      "name": "BABOK",
      "resources": {
        "description": "# Babok\n\nThe guide to the Business Analysis Body of Knowledge (BABOK Guide) is a book from the International Institute of Business Analysis (IIBA) that provides business analysts (BAs) with strategies for using data to improve an organization's workflow processes, technology, products and services.",
        "resources": [
          {
            "type": "course",
            "title": "Babok",
            "url": "https://www.iiba.org/career-resources/a-business-analysis-professionals-foundation-for-success/babok/"
          },
          {
            "type": "article",
            "title": "Wikipedia",
            "url": "https://en.wikipedia.org/wiki/A_Guide_to_the_Business_Analysis_Body_of_Knowledge"
          }
        ]
      }
    },
    {
      "id": "wFu9VO48EYbIQrsM8YUCj",
      "name": "IAF",
      "resources": {
        "description": "# Iaf\n\nThe Integrated Architecture Framework (IAF) is an enterprise architecture framework that covers business, information, information system and technology infrastructure.",
        "resources": [
          {
            "type": "article",
            "title": "Wikipedia",
            "url": "https://en.wikipedia.org/wiki/Integrated_Architecture_Framework"
          },
          {
            "type": "article",
            "title": "IAF PDF",
            "url": "https://www.capgemini.com/wp-content/uploads/2018/03/architecture-for-the-information-age.pdf"
          }
        ]
      }
    },
    {
      "id": "8FTKnAKNL9LnZBrw9YXqK",
      "name": "UML",
      "resources": {
        "description": "# UML\n\nThe Unified Modeling Language, or UML, is a modeling language that is intended to provide a standard way to visualize and describe the design of a system.",
        "resources": [
          {
            "type": "course",
            "title": "UML Website",
            "url": "https://www.uml.org"
          },
          {
            "type": "article",
            "title": "UML Pattern - IBM",
            "url": "https://www.ibm.com/docs/en/rational-soft-arch/9.6.1?topic=files-uml-pattern-frameworks"
          },
          {
            "type": "article",
            "title": "The Unified Modeling Language Reference Manual (Second Edition)",
            "url": "https://personal.utdallas.edu/~chung/Fujitsu/UML_2.0/Rumbaugh--UML_2.0_Reference_CD.pdf"
          },
          {
            "type": "article",
            "title": "Wikipedia",
            "url": "https://en.wikipedia.org/wiki/Unified_Modeling_Language"
          }
        ]
      }
    },
    {
      "id": "5TDTU22Fla2mRr6JeOcaY",
      "name": "TOGAF",
      "resources": {
        "description": "# Togaf\n\nThe TOGAF content framework provides a detailed model of architectural work products, including deliverables, artifacts within deliverables, and the architectural building blocks that artifacts represent.",
        "resources": [
          {
            "type": "course",
            "title": "Togaf",
            "url": "https://www.opengroup.org/togaf"
          },
          {
            "type": "article",
            "title": "Wikipedia",
            "url": "https://en.wikipedia.org/wiki/The_Open_Group_Architecture_Framework"
          }
        ]
      }
    },
    {
      "id": "UyIwiIiKaa6LTQaqzbCam",
      "name": "Management",
      "resources": {
        "description": "# Management\n\nManagement in software architects encompasses various responsibilities and practices that ensure the successful design, development, and implementation of software systems. Software architects play a critical role in bridging the gap between business requirements and technical implementation.",
        "resources": [
          {
            "type": "article",
            "title": "Wikipedia",
            "url": "https://en.wikipedia.org/wiki/Management"
          }
        ]
      }
    },
    {
      "id": "hRug9yJKYacB9X_2cUalR",
      "name": "PMI",
      "resources": {
        "description": "# PMI\n\nThe PMI certification (Project Management Institute) is an internationally recognized credential in project management. The most well-known is the PMP® (Project Management Professional), which validates the skills and knowledge of professionals to manage projects effectively by applying best practices and standards defined in the PMBOK® (Project Management Body of Knowledge) guide.",
        "resources": [
          {
            "type": "course",
            "title": "Project Management Institute",
            "url": "https://www.pmi.org/"
          }
        ]
      }
    },
    {
      "id": "Rq1Wi-cHjS54SYo-Btp-e",
      "name": "ITIL",
      "resources": {
        "description": "# ITIL\n\n**ITIL (Information Technology Infrastructure Library)** is a set of best practices for IT service management, designed to align IT services with business needs. Its primary focus is the efficient and effective delivery of value through managing the IT service lifecycle, which includes five phases: `Strategy`, `Design`, `Transition`, `Operation`, and `Continual Service Improvement`. ITIL includes key processes such as incident management, problem management, change management, configuration management, and service level agreements (SLAs). These practices aim to optimize performance, service quality, and customer satisfaction. Adopting ITIL helps organizations improve operational efficiency, reduce risks, and maintain clear control over IT services over time.",
        "resources": [
          {
            "type": "course",
            "title": "ITIL Documentation",
            "url": "https://www.axelos.com/certifications/itil-service-management/itil-4-foundation"
          },
          {
            "type": "video",
            "title": "What is ITIL?",
            "url": "https://www.youtube.com/watch?v=wgnpfMK8vDk"
          }
        ]
      }
    },
    {
      "id": "SJ5lrlvyXgtAwOx4wvT2W",
      "name": "Prince2",
      "resources": {
        "description": "# Prince2\n\nPrince2 is a structured project management method and practitioner certification programme. Prince2 emphasizes dividing projects into manageable and controllable stages. It is adopted in many countries worldwide, including the UK, Western European countries, and Australia.",
        "resources": [
          {
            "type": "course",
            "title": "Prince2 Certification",
            "url": "https://www.axelos.com/certifications/propath/prince2-project-management"
          },
          {
            "type": "course",
            "title": "Prince2 Project Management Course",
            "url": "https://www.simplilearn.com/project-management/prince2-foundation-and-practitioner-certification-training"
          }
        ]
      }
    },
    {
      "id": "7rudOREGG-TTkCosU0hNw",
      "name": "RUP",
      "resources": {
        "description": "# RUP\n\nThe RUP (**Rational Unified Process**) is not a widely recognized certification like PMP or Scrum, but rather a software development framework created by Rational Software (now IBM). It follows an iterative and incremental approach to project development, based on best practices for delivering high-quality software on time and within budget.",
        "resources": [
          {
            "type": "course",
            "title": "IBM Certified Solution Designer RUP",
            "url": "https://www.ibm.com/training/certification/ibm-certified-solution-designer-ibm-rational-unified-process-v70-38008003"
          }
        ]
      }
    },
    {
      "id": "qwpsGRFgzAYstM7bJA2ZJ",
      "name": "LeSS",
      "resources": {
        "description": "# Less\n\n**LeSS** (Large-Scale-Scrum) is an agile framework designed to scale Scrum across multiple teams working on a single product. It adheres to Scrum's principles, emphasizing simplicity and continuous improvement. LeSS encourages coordination between teams by using a single backlog and a common Product Owner. Each team is responsible for parts of the product, but they collaborate in its joint development, with frequent feedback loops to adjust project direction. Its goal is to minimize bureaucracy and maximize value delivery in an agile and efficient way.",
        "resources": [
          {
            "type": "course",
            "title": "LeSS Framework",
            "url": "https://less.works/less/framework"
          },
          {
            "type": "video",
            "title": "Introduction to LeSS",
            "url": "https://www.youtube.com/watch?v=1BZf_Oa7W94"
          }
        ]
      }
    },
    {
      "id": "Bg7ru1q1j6pNB43HGxnHT",
      "name": "SaFE",
      "resources": {
        "description": "# SAFe\n\n**SAFe** is an agile framework designed to scale agile practices in large and complex organizations. Unlike LeSS, SAFe is more structured and provides a formal approach to coordinating multiple teams, programs, and portfolios. It incorporates elements of `Lean`, `DevOps`, and `agile principles`, and defines additional roles, ceremonies, and artifacts to align teams' goals with the business strategy. SAFe enables **large-scale planning**, **continuous delivery**, and **improvement of organizational efficiency**, offering a comprehensive framework for agile transformation at the corporate level.",
        "resources": [
          {
            "type": "course",
            "title": "SAFe 6.0",
            "url": "https://scaledagileframework.com/SAFE"
          },
          {
            "type": "video",
            "title": "SAFe explained in five minutes",
            "url": "https://www.youtube.com/watch?v=aW2m-BtCJyE&t=2s"
          }
        ]
      }
    },
    {
      "id": "O7H6dt3Z7EKohxfJzwbPM",
      "name": "Kanban",
      "resources": {
        "description": "# Kanban\n\n`Kanban` is a popular agile methodology that focuses on visualizing workflow and continuously improving that flow. It's a more flexible approach than Scrum, without the rigid framework.",
        "resources": [
          {
            "type": "article",
            "title": "What Is Kanban? A Simple Guide to Improve Efficiency.",
            "url": "https://businessmap.io/kanban-resources/getting-started/what-is-kanban"
          },
          {
            "type": "article",
            "title": "Kanban Methodology: The Simplest Agile Framework ",
            "url": "https://kissflow.com/project/agile/kanban-methodology/"
          },
          {
            "type": "article",
            "title": "What is Kanban Methodology? The Ultimate Guide",
            "url": "https://www.wrike.com/kanban-guide/what-is-kanban/"
          }
        ]
      }
    },
    {
      "id": "PKqwKvoffm0unwcFwpojk",
      "name": "Scrum",
      "resources": {
        "description": "# Scrum\n\n`Scrum` is a popular agile framework used for project management, particularly in software development. It emphasizes iterative development, collaboration, and flexibility to deliver high-quality products.\n\nKey elements of Scrum:\n\n- **Sprints**: Time-boxed iterations (usually 2-4 weeks) where teams work on specific goals.\n- **Product Backlog**: Prioritized list of features or requirements for the product.\n- **Sprint Backlog**: Selected items from the Product Backlog to be completed during a Sprint.\n- **Daily Scrum (Stand-up)**: Brief daily meeting where team members share progress, challenges, and plans for the day.\n- **Sprint Review**: Meeting at the end of a Sprint to demonstrate completed work and gather feedback.\n- **Sprint Retrospective**: Meeting to reflect on the Sprint, identify improvements, and adjust processes for the next Sprint.",
        "resources": [
          {
            "type": "article",
            "title": "What is Scrum and How to Get Started",
            "url": "https://www.atlassian.com/agile/scrum."
          },
          {
            "type": "article",
            "title": "Scrum Methodology: The Complete Guide & Best Practices",
            "url": "https://thedigitalprojectmanager.com/projects/pm-methodology/scrum-methodology-complete-guide/"
          },
          {
            "type": "article",
            "title": "Essential Topics for the Scrum Product Owner",
            "url": "https://www.scrum.org/resources/blog/essential-topics-scrum-product-owner"
          },
          {
            "type": "article",
            "title": "Scrum • Topics - Thriving Technologist",
            "url": "https://thrivingtechnologist.com/topics/scrum/"
          }
        ]
      }
    },
    {
      "id": "7fL9lSu4BD1wRjnZy9tM9",
      "name": "XP",
      "resources": {
        "description": "# Extreme Programming (XP)\n\n\n`Extreme Programming (XP)` is a popular agile software development framework that emphasizes speed, simplicity, and quality. It was developed by Kent Beck in the late 1990s and is based on five values:\n\n- **Communication**: Open and honest communication among team members and stakeholders is essential.\n- **Simplicity**: The simplest solution that works is always preferred.\n- **Feedback**: Continuous feedback from customers and team members is used to improve the product.\n- **Courage**: Team members must be willing to make changes and take risks.\n- **Respect**: Everyone on the team is treated with respect.",
        "resources": [
          {
            "type": "article",
            "title": "What is Extreme Programming (XP)?",
            "url": "https://www.agilealliance.org/glossary/xp/"
          },
          {
            "type": "article",
            "title": "It's Values, Principles, And Practices",
            "url": "https://www.nimblework.com/agile/extreme-programming-xp/"
          },
          {
            "type": "article",
            "title": "Extreme Programming (XP)",
            "url": "https://scrum-master.org/en/extreme-programming-xp-a-beginners-guide-to-the-agile-method/"
          }
        ]
      }
    },
    {
      "id": "cBWJ6Duw99tSKr7U6OW3A",
      "name": "Networks",
      "resources": {
        "description": "# Networks\n\nA computer network is a set of computers sharing resources located on or provided by network nodes. Computers use common communication protocols over digital interconnections to communicate with each other. These interconnections are made up of telecommunication network technologies based on physically wired, optical, and wireless radio-frequency methods that may be arranged in a variety of network topologies.",
        "resources": [
          {
            "type": "article",
            "title": "Networking - IBM",
            "url": "https://www.ibm.com/topics/networking"
          },
          {
            "type": "article",
            "title": "Networking - Wikipedia",
            "url": "https://en.wikipedia.org/wiki/Networking"
          },
          {
            "type": "article",
            "title": "Networking Basics",
            "url": "https://www.cisco.com/c/en/us/solutions/small-business/resource-center/networking/networking-basics.html"
          }
        ]
      }
    },
    {
      "id": "Mt5W1IvuHevNXVRlh7z26",
      "name": "OSI",
      "resources": {
        "description": "# OSI and TCP/IP Models\n\nThe OSI and TCP/IP model is used to help the developer to design their system for interoperability. The OSI model has 7 layers while the TCP/IP model has a more summarized form of the OSI model only consisting 4 layers. This is important if you're trying to design a system to communicate with other systems.",
        "resources": [
          {
            "type": "article",
            "title": "Cloudflare - What is the OSI model",
            "url": "https://www.cloudflare.com/learning/ddos/glossary/open-systems-interconnection-model-osi/"
          }
        ]
      }
    },
    {
      "id": "UCCT7-E_QUKPg3jAsjobx",
      "name": "TCP/IP Model",
      "resources": {
        "description": "# TCP/IP Model\n\nThe `TCP/IP model` defines how devices should transmit data between them and enables communication over networks and large distances. The model represents how data is exchanged and organized over networks. It is split into four layers, which set the standards for data exchange and represent how data is handled and packaged when being delivered between applications, devices, and servers.\n\n- **Network Access Layer**: The network access layer is a group of applications requiring network communications. This layer is responsible for generating the data and requesting connections.\n\n- **Internet Layer**: The internet layer is responsible for sending packets from a network and controlling their movement across a network to ensure they reach their destination. \n\n- **Transport Layer**: The transport layer is responsible for providing a solid and reliable data connection between the original application or device and its intended destination. \n\n- **Application Layer**: The application layer refers to programs that need TCP/IP to help them communicate with each other.",
        "resources": [
          {
            "type": "article",
            "title": "What is Transmission Control Protocol TCP/IP? - Fortinet",
            "url": "https://www.fortinet.com/resources/cyberglossary/tcp-ip#:~:text=The%20TCP%2FIP%20model%20defines,exchanged%20and%20organized%20over%20networks."
          },
          {
            "type": "article",
            "title": "What is TCP/IP and How Does it Work?",
            "url": "https://www.techtarget.com/searchnetworking/definition/TCP-IP"
          }
        ]
      }
    },
    {
      "id": "Nq6o6Ty8VyNRsvg-UWp7D",
      "name": "HTTP, HTTPS",
      "resources": {
        "description": "# Http Https\n\nHTTP is the `TCP/IP` based application layer communication protocol which standardizes how the client and server communicate with each other. It defines how the content is requested and transmitted across the internet.\n\nHTTPS (Hypertext Transfer Protocol Secure) is the secure version of HTTP, which is the primary protocol used to send data between a web browser and a website.\n\n`HTTPS = HTTP + SSL/TLS`",
        "resources": [
          {
            "type": "article",
            "title": "What is HTTPS?",
            "url": "https://www.cloudflare.com/en-gb/learning/ssl/what-is-https/"
          },
          {
            "type": "article",
            "title": "What is HTTP?",
            "url": "https://www.cloudflare.com/en-gb/learning/ddos/glossary/hypertext-transfer-protocol-http/"
          },
          {
            "type": "article",
            "title": "Overview of HTTP",
            "url": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Overview"
          },
          {
            "type": "article",
            "title": "Everything you need to know about HTTP",
            "url": "https://cs.fyi/guide/http-in-depth"
          },
          {
            "type": "article",
            "title": "HTTP/3 From A To Z: Core Concepts",
            "url": "https://www.smashingmagazine.com/2021/08/http3-core-concepts-part1/"
          },
          {
            "type": "article",
            "title": "Why HTTPS Matters",
            "url": "https://developers.google.com/web/fundamentals/security/encrypt-in-transit/why-https"
          },
          {
            "type": "article",
            "title": "Enabling HTTPS on Your Servers",
            "url": "https://developers.google.com/web/fundamentals/security/encrypt-in-transit/enable-https"
          },
          {
            "type": "video",
            "title": "HTTP Crash Course & Exploration",
            "url": "https://www.youtube.com/watch?v=iYM2zFP3Zn0"
          }
        ]
      }
    },
    {
      "id": "6_EOmU5GYGDGzmNoLY8cB",
      "name": "Proxies",
      "resources": {
        "description": "# Proxies\n\nIn computer networking, a proxy server is a server application that acts as an intermediary between a client requesting a resource and the server providing that resource.",
        "resources": [
          {
            "type": "article",
            "title": "Proxy Server",
            "url": "https://en.wikipedia.org/wiki/Proxy_server"
          }
        ]
      }
    },
    {
      "id": "Hqk_GGsFi14SI5fgPSoGV",
      "name": "Firewalls",
      "resources": {
        "description": "# Firewalls\n\nA Firewall is a network security device that monitors and filters incoming and outgoing network traffic based on an organization's previously established security policies. Firewalls usually sit between a trusted network and an untrusted network; oftentimes the untrusted network is the Internet. For example, office networks often use a firewall to protect their network from online threats.",
        "resources": [
          {
            "type": "article",
            "title": "What is a Firewall? - Cloudflare",
            "url": "https://www.cloudflare.com/learning/security/what-is-a-firewall/"
          },
          {
            "type": "article",
            "title": "Firewall - Cisco",
            "url": "https://www.cisco.com/site/us/en/learn/topics/security/what-is-a-firewall.html"
          }
        ]
      }
    },
    {
      "id": "EdJhuNhMSWjeVxGW-RZtL",
      "name": "Operations Knowledge",
      "resources": {
        "description": "# Operations Knowledge\n\nOperational knowledge refers to the understanding and insights that software architects need to effectively design, implement, and manage software systems throughout their lifecycle. This knowledge encompasses various aspects of software development, deployment, and maintenance, and it is crucial for ensuring that systems operate efficiently, reliably, and securely.",
        "resources": []
      }
    },
    {
      "id": "igf9yp1lRdAlN5gyQ8HHC",
      "name": "Infrastructure as Code",
      "resources": {
        "description": "# Infrastructure as Code\n\nSometimes referred to as IaC, this section refers to the techniques and tools used to define infrastructure, typically in a markup language like YAML or JSON. Infrastructure as code allows DevOps Engineers to use the same workflows used by software developers to version, roll back, and otherwise manage changes.\n\nThe term Infrastructure as Code encompasses everything from bootstrapping to configuration to orchestration, and it is considered a best practice in the industry to manage all infrastructure as code. This technique precipitated the explosion in system complexity seen in modern DevOps organizations.",
        "resources": [
          {
            "type": "article",
            "title": "What is Infrastructure as Code",
            "url": "https://www.redhat.com/en/topics/automation/what-is-infrastructure-as-code-iac"
          },
          {
            "type": "article",
            "title": "GUIs, CLI, APIs: Learn Basic Terms of Infrastructure-as-Code",
            "url": "https://thenewstack.io/guis-cli-apis-learn-basic-terms-of-infrastructure-as-code/"
          },
          {
            "type": "video",
            "title": "What is Infrastructure as Code?",
            "url": "https://www.youtube.com/watch?v=zWw2wuiKd5o"
          },
          {
            "type": "video",
            "title": "What is Infrastructure as Code? Difference of Infrastructure as Code Tools",
            "url": "https://www.youtube.com/watch?v=POPP2WTJ8es"
          },
          {
            "type": "video",
            "title": "Introduction to Infrastructure as Code",
            "url": "https://www.youtube.com/watch?v=zWw2wuiKd5o"
          },
          {
            "type": "article",
            "title": "Explore top posts about Infrastructure",
            "url": "https://app.daily.dev/tags/infrastructure?ref=roadmapsh"
          }
        ]
      }
    },
    {
      "id": "C0rKd5Rr27Z1_GleoEZxF",
      "name": "Cloud Providers",
      "resources": {
        "description": "# Cloud Providers\n\nCloud providers provide a layer of APIs to abstract infrastructure and provision it based on security and billing boundaries. The cloud runs on servers in data centers, but the abstractions cleverly give the appearance of interacting with a single “platform” or large application. The ability to quickly provision, configure, and secure resources with cloud providers has been key to both the tremendous success and complexity of modern DevOps.",
        "resources": [
          {
            "type": "article",
            "title": "Cloud Service Provider",
            "url": "https://www.techtarget.com/searchitchannel/definition/cloud-service-provider-cloud-provider"
          },
          {
            "type": "article",
            "title": "What are Cloud Providers?",
            "url": "https://www.redhat.com/en/topics/cloud-computing/what-are-cloud-providers"
          },
          {
            "type": "article",
            "title": "Explore top posts about Cloud",
            "url": "https://app.daily.dev/tags/cloud?ref=roadmapsh"
          }
        ]
      }
    },
    {
      "id": "WoXoVwkSqXTP5U8HtyJOL",
      "name": "Serverless Concepts",
      "resources": {
        "description": "# Serverless Concepts\n\nServerless is a cloud-native development model that allows developers to build and run applications without having to manage servers. There are still servers in serverless, but they are abstracted away from app development. A cloud provider handles the routine work of provisioning, maintaining, and scaling the server infrastructure. Developers can simply package their code in containers for deployment.",
        "resources": [
          {
            "type": "article",
            "title": "What is Serverless?",
            "url": "https://www.redhat.com/en/topics/cloud-native-apps/what-is-serverless"
          },
          {
            "type": "article",
            "title": "What is Serverless Computing?",
            "url": "https://www.cloudflare.com/learning/serverless/what-is-serverless/"
          },
          {
            "type": "article",
            "title": "Serverless on AWS",
            "url": "https://aws.amazon.com/serverless/"
          },
          {
            "type": "article",
            "title": "Explore top posts about Serverless",
            "url": "https://app.daily.dev/tags/serverless?ref=roadmapsh"
          }
        ]
      }
    },
    {
      "id": "XnvlRrOhdoMsiGwGEhBro",
      "name": "Linux / Unix",
      "resources": {
        "description": "# Linux / Unix\n\nKnowledge of UNIX is a must for almost all kind of development as most of the codes that you write is most likely going to be finally deployed on a UNIX/Linux machine. Linux has been the backbone of the free and open source software movement, providing a simple and elegant operating system for almost all your needs.",
        "resources": [
          {
            "type": "article",
            "title": "Visit Dedicated Linux Roadmap",
            "url": "https://roadmap.sh/linux"
          },
          {
            "type": "video",
            "title": "Linux Operating System - Crash Course",
            "url": "https://www.youtube.com/watch?v=ROjZy1WbCIA"
          },
          {
            "type": "article",
            "title": "Unix & Linux Tutorial",
            "url": "https://www.tutorialspoint.com/unix/index.htm"
          },
          {
            "type": "article",
            "title": "Linux Basics ",
            "url": "https://dev.to/rudrakshi99/linux-basics-2onj"
          },
          {
            "type": "course",
            "title": "Coursera - Unix Courses",
            "url": "https://www.coursera.org/courses?query=unix"
          },
          {
            "type": "article",
            "title": "Explore top posts about Linux",
            "url": "https://app.daily.dev/tags/linux?ref=roadmapsh"
          }
        ]
      }
    },
    {
      "id": "OErbfM-H3laFm47GCHNPI",
      "name": "Service Mesh",
      "resources": {
        "description": "# Service Mesh\n\nA Service Mesh is a dedicated infrastructure layer for handling service-to-service communication. It’s responsible for the reliable delivery of requests through the complex topology of services that comprise a modern, cloud native application. In layman's terms, it's a tool which helps you to control how different services communicate with each other.",
        "resources": [
          {
            "type": "video",
            "title": "Service Mesh explained in 15 Minutes",
            "url": "https://youtu.be/16fgzklcF7Y"
          },
          {
            "type": "article",
            "title": "Red Hat - What is a Service Mesh?",
            "url": "https://www.redhat.com/en/topics/microservices/what-is-a-service-mesh"
          },
          {
            "type": "article",
            "title": "Kubernetes Service Mesh - Blog Post",
            "url": "https://platform9.com/blog/kubernetes-service-mesh-a-comparison-of-istio-linkerd-and-consul/"
          },
          {
            "type": "article",
            "title": "Explore top posts about Service Mesh",
            "url": "https://app.daily.dev/tags/service-mesh?ref=roadmapsh"
          }
        ]
      }
    },
    {
      "id": "isavRe4ANVn77ZX6gNSLH",
      "name": "CI / CD",
      "resources": {
        "description": "# CI / CD\n\nCI/CD is a method to frequently deliver apps to customers by introducing automation into the stages of app development. The main concepts attributed to CI/CD are continuous integration, continuous delivery, and continuous deployment. CI/CD is a solution to the problems integrating new code can cause for development and operations teams (AKA \"integration hell\").",
        "resources": [
          {
            "type": "article",
            "title": "CI/CID - GitHub",
            "url": "https://github.com/resources/articles/devops/ci-cd"
          },
          {
            "type": "article",
            "title": "What is CI/CD? - Redhat",
            "url": "https://www.redhat.com/en/topics/devops/what-is-ci-cd"
          },
          {
            "type": "article",
            "title": "Continuous Integration and Continuous Delivery Explained",
            "url": "https://www.infoworld.com/article/3271126/what-is-cicd-continuous-integration-and-continuous-delivery-explained.html"
          },
          {
            "type": "article",
            "title": "Explore top posts about CI/CD",
            "url": "https://app.daily.dev/tags/cicd?ref=roadmapsh"
          }
        ]
      }
    },
    {
      "id": "l3oeo65FyV5HHvw5n_1wa",
      "name": "Containers",
      "resources": {
        "description": "# Containers\n\nContainers are a construct in which cgroups, namespaces, and chroot are used to fully encapsulate and isolate a process. This encapsulated process, called a container image, shares the kernel of the host with other containers, allowing containers to be significantly smaller and faster than virtual machines. These images are designed for portability, allowing for full local testing of a static image, and easy deployment to a container management platform.",
        "resources": [
          {
            "type": "article",
            "title": "cgroups",
            "url": "https://en.wikipedia.org/wiki/Cgroups"
          },
          {
            "type": "article",
            "title": "namespaces",
            "url": "https://en.wikipedia.org/wiki/Linux_namespaces"
          },
          {
            "type": "article",
            "title": "chroot",
            "url": "https://en.wikipedia.org/wiki/Chroot"
          },
          {
            "type": "article",
            "title": "What are Containers?",
            "url": "https://cloud.google.com/learn/what-are-containers"
          },
          {
            "type": "article",
            "title": "What is a Container?",
            "url": "https://www.docker.com/resources/what-container/"
          },
          {
            "type": "video",
            "title": "What are Containers?",
            "url": "https://www.youtube.com/playlist?list=PLawsLZMfND4nz-WDBZIj8-nbzGFD4S9oz"
          },
          {
            "type": "article",
            "title": "Articles about Containers - The New Stack",
            "url": "https://thenewstack.io/category/containers/"
          },
          {
            "type": "article",
            "title": "Explore top posts about Containers",
            "url": "https://app.daily.dev/tags/containers?ref=roadmapsh"
          }
        ]
      }
    },
    {
      "id": "CxceVdaNCyKDhs0huDtcL",
      "name": "Cloud Design Patterns",
      "resources": {
        "description": "# Cloud Design Patterns\n\nThese design patterns are useful for building reliable, scalable, secure applications in the cloud. The cloud design patterns where each pattern describes the problem that the pattern addresses, considerations for applying the pattern, and an example based on Microsoft Azure. Most patterns include code samples or snippets that show how to implement the pattern on Azure. However, most patterns are relevant to any distributed system, whether hosted on Azure or other cloud platforms.",
        "resources": [
          {
            "type": "article",
            "title": "Cloud Design Patterns",
            "url": "https://learn.microsoft.com/en-us/azure/architecture/patterns/"
          },
          {
            "type": "article",
            "title": "Explore top posts about Cloud",
            "url": "https://app.daily.dev/tags/cloud?ref=roadmapsh"
          }
        ]
      }
    },
    {
      "id": "8yALyPVUZPtd7LX3GrO1e",
      "name": "Enterprise Software",
      "resources": {
        "description": "# Enterprise Software\n\nEnterprise software refers to software applications that are designed to meet the needs of large organizations or enterprises. These applications are typically complex, scalable, and capable of integrating with other systems to support a wide range of business functions. Enterprise software is used to improve efficiency, streamline processes, and enhance productivity across various departments within an organization.",
        "resources": [
          {
            "type": "article",
            "title": "Enterprise Softwares",
            "url": "https://en.wikipedia.org/wiki/Enterprise_software"
          }
        ]
      }
    },
    {
      "id": "gdtI0H_PzzTj_aFQn_NeA",
      "name": "MS Dynamics",
      "resources": {
        "description": "# MS Dynamics\n\nMicrosoft Dynamics 365 is a combination of both Enterprise Resource Planning (ERP) software and Customer Relationship Management (CRM) software.",
        "resources": [
          {
            "type": "article",
            "title": "Everything you ever wanted to know about Microsoft Dynamics",
            "url": "https://www.nigelfrank.com/insights/everything-you-ever-wanted-to-know-about-dynamics-crm"
          },
          {
            "type": "video",
            "title": "What is Microsoft Dynamics?",
            "url": "https://www.youtube.com/watch?v=ogfclHWgqgE"
          }
        ]
      }
    },
    {
      "id": "TxWAznp1tUtZ1MvThf9M1",
      "name": "SAP ERP, HANA, Business Objects",
      "resources": {
        "description": "# SAP ERP, HANA, Business Objects\n\nSAP (Systems, Applications, and Products in Data Processing) is a leading enterprise resource planning (ERP) software provider that helps organizations manage their business operations and customer relations effectively. SAP ERP integrates various business processes, such as finance, sales, procurement, and human resources, into a unified system, enabling real-time data access and improved decision-making. SAP HANA (High-Performance Analytic Appliance) is an in-memory database and application development platform that allows businesses to process large volumes of data quickly and efficiently, supporting advanced analytics and real-time reporting. BusinessObjects, part of the SAP Business Intelligence suite, provides powerful tools for data visualization, reporting, and analysis, enabling users to transform raw data into actionable insights. Together, these solutions empower organizations to streamline operations, enhance productivity, and drive strategic decision-making through data-driven insights.",
        "resources": [
          {
            "type": "course",
            "title": "SAP",
            "url": "https://www.sap.com/"
          }
        ]
      }
    },
    {
      "id": "YfYviOXqGVp9C6DuhqBrn",
      "name": "EMC DMS",
      "resources": {
        "description": "# EMC and DMS\n\nEMC (Enterprise Metadata Catalog) and DMS (Document Management System) are two distinct concepts in the realm of data management and information systems. Below is an overview of each:\n\nAn Enterprise Metadata Catalog (EMC) is a centralized repository that stores metadata about data assets within an organization. This metadata provides context, meaning, and structure to the data, enabling better data management and utilization.\n\nA Document Management System (DMS) is a software solution that helps organizations capture, store, manage, and track electronic documents and images of paper-based information. DMS solutions are essential for organizing and securing documents in a digital format.",
        "resources": [
          {
            "type": "article",
            "title": "DMS",
            "url": "https://www.opentext.com/products/documentum-content-management"
          },
          {
            "type": "article",
            "title": "EMC Softwares",
            "url": "https://www.spiceworks.com/collaboration/content-collaboration/articles/top-10-enterprise-content-management-software-systems/"
          }
        ]
      }
    },
    {
      "id": "5EVecZmvor09LjD7WR_Y9",
      "name": "IBM BPM",
      "resources": {
        "description": "# IBM BPM\n\nIBM BPM is a comprehensive business process management platform. It provides a robust set of tools to author, test, and deploy business processes, as well as full visibility and insight to managing those business processes.",
        "resources": [
          {
            "type": "course",
            "title": "Overview BPM",
            "url": "https://www.ibm.com/docs/en/bpm/8.5.5?topic=manager-business-process-overview"
          },
          {
            "type": "video",
            "title": "BPM Demo",
            "url": "https://www.youtube.com/watch?v=6yn4nCWMNLI"
          },
          {
            "type": "article",
            "title": "Explore top posts about IBM",
            "url": "https://app.daily.dev/tags/ibm?ref=roadmapsh"
          }
        ]
      }
    },
    {
      "id": "mOXyzdNn8W-9R99ffcnor",
      "name": "Salesforce",
      "resources": {
        "description": "# Salesforce\n\nSalesforce is a cloud platform helping companies to manage relationships with their customers",
        "resources": [
          {
            "type": "article",
            "title": "What is Salesforce and what is it used for?",
            "url": "https://ascendix.com/blog/what-is-salesforce-what-salesforce-is-used-for/"
          },
          {
            "type": "video",
            "title": "What is Salesforce?",
            "url": "https://www.youtube.com/watch?v=xx2sK-QiBjw"
          },
          {
            "type": "article",
            "title": "Explore top posts about Salesforce",
            "url": "https://app.daily.dev/tags/salesforce?ref=roadmapsh"
          }
        ]
      }
    },
    {
      "id": "b6lCGw82qKpUmsxe1r1f5",
      "name": "Microservices",
      "resources": {
        "description": "# Microservices\n\nMicroservice architecture is a pattern in which highly cohesive, loosely coupled services are separately developed, maintained, and deployed. Each component handles an individual function, and when combined, the application handles an overall business function.",
        "resources": [
          {
            "type": "course",
            "title": "Pattern: Microservice Architecture",
            "url": "https://microservices.io/patterns/microservices.html"
          },
          {
            "type": "article",
            "title": "What is Microservices?",
            "url": "https://smartbear.com/solutions/microservices/"
          },
          {
            "type": "article",
            "title": "Microservices 101",
            "url": "https://thenewstack.io/microservices-101/"
          },
          {
            "type": "article",
            "title": "Primer: Microservices Explained",
            "url": "https://thenewstack.io/primer-microservices-explained/"
          },
          {
            "type": "article",
            "title": "Articles about Microservices",
            "url": "https://thenewstack.io/category/microservices/"
          },
          {
            "type": "article",
            "title": "Explore top posts about Microservices",
            "url": "https://app.daily.dev/tags/microservices?ref=roadmapsh"
          }
        ]
      }
    }
  ],
  "edges": [
    {
      "source": "iogwMmOvub2ZF4zgg6WyF",
      "target": "_hYN0gEi9BL24nptEtXWU"
    },
    {
      "source": "_hYN0gEi9BL24nptEtXWU",
      "target": "idLHBxhvcIqZTqmh_E8Az"
    },
    {
      "source": "_hYN0gEi9BL24nptEtXWU",
      "target": "os3Pa6W9SSNEzgmlBbglQ"
    },
    {
      "source": "_hYN0gEi9BL24nptEtXWU",
      "target": "3oInpqvTSSC5_K6i7j8N7"
    },
    {
      "source": "_hYN0gEi9BL24nptEtXWU",
      "target": "YKhuRbcUFzo0hTvuTq-Yl"
    },
    {
      "source": "jZ67HhVRelJaxjsCckSSI",
      "target": "hWA7RtuqltMTmHdcCnmES"
    },
    {
      "source": "",
      "target": "NMznG9mo2wzNFnjhg990f"
    },
    {
      "source": "",
      "target": "gc_7cuIO2_joKlQRAPDfX"
    },
    {
      "source": "rrrvATyhXqRgJGWI3z0WF",
      "target": "AvbMQ5vY3ip1oX_6Yq4ie"
    },
    {
      "source": "hWA7RtuqltMTmHdcCnmES",
      "target": "1AJv95mTLpR7L8KBoGym8"
    },
    {
      "source": "hWA7RtuqltMTmHdcCnmES",
      "target": "0etAs56EeBfh_0IlAaSra"
    },
    {
      "source": "jZ67HhVRelJaxjsCckSSI",
      "target": "h6ceO0kiBIxNRkPzN3hBY"
    },
    {
      "source": "jZ67HhVRelJaxjsCckSSI",
      "target": "_JlT9oKQ6Yu4UX6l19G8P"
    },
    {
      "source": "_hYN0gEi9BL24nptEtXWU",
      "target": "jZ67HhVRelJaxjsCckSSI"
    },
    {
      "source": "tbmunGk2lG74hVWv_W8lN",
      "target": "4zicbh7Wg2lmKSRhb6E-L"
    },
    {
      "source": "4zicbh7Wg2lmKSRhb6E-L",
      "target": "EGG99VA-PEdWdVxNDLtG_"
    },
    {
      "source": "4zicbh7Wg2lmKSRhb6E-L",
      "target": "eG38hT0rotYJ3G-t9df9R"
    },
    {
      "source": "4zicbh7Wg2lmKSRhb6E-L",
      "target": "2sR4KULvAUUoOtopvsEBs"
    },
    {
      "source": "2sR4KULvAUUoOtopvsEBs",
      "target": "Lqe47l4j-C4OwkbkwPYry"
    },
    {
      "source": "4zicbh7Wg2lmKSRhb6E-L",
      "target": "rUxbG2S2nJuA1YVY6sjiX"
    },
    {
      "source": "lBtlDFPEQvQ_xtLtehU0S",
      "target": "77KvWCA1oHSGgDKBTwjv7"
    },
    {
      "source": "lBtlDFPEQvQ_xtLtehU0S",
      "target": "5D-kbQ520k1D3fCtD01T7"
    },
    {
      "source": "lBtlDFPEQvQ_xtLtehU0S",
      "target": "hFx3mLqh5omNxqI9lfaAQ"
    },
    {
      "source": "uoDtVFThaV6OMK2wXGfP5",
      "target": "D1IXOBUrrXf5bXhVu9cmI"
    },
    {
      "source": "hFx3mLqh5omNxqI9lfaAQ",
      "target": "uoDtVFThaV6OMK2wXGfP5"
    },
    {
      "source": "uoDtVFThaV6OMK2wXGfP5",
      "target": "_U0VoTkqM1d6NR13p5azS"
    },
    {
      "source": "_U0VoTkqM1d6NR13p5azS",
      "target": "jj5otph6mEYiR-oU5WVtT"
    },
    {
      "source": "_U0VoTkqM1d6NR13p5azS",
      "target": "diu8MyHxZuZSdhavYVj1T"
    },
    {
      "source": "diu8MyHxZuZSdhavYVj1T",
      "target": "ZEzYb-i55hBe9kK3bla94"
    },
    {
      "source": "diu8MyHxZuZSdhavYVj1T",
      "target": "CYnUg_okOcRrD7fSllxLW"
    },
    {
      "source": "diu8MyHxZuZSdhavYVj1T",
      "target": "a6joS9WXg-rbw29_KfBd9"
    },
    {
      "source": "diu8MyHxZuZSdhavYVj1T",
      "target": "3bpd0iZTd3G-H8A7yrExY"
    },
    {
      "source": "SuMhTyaBS9vwASxAt39DH",
      "target": "OaLmlfkZid7hKqJ9G8oNV"
    },
    {
      "source": "IzFTn5-tQuF_Z0cG_w6CW",
      "target": "7tBAD0ox9hTK4D483GTRo"
    },
    {
      "source": "IzFTn5-tQuF_Z0cG_w6CW",
      "target": "OpL2EqvHbUmFgnpuhtZPr"
    },
    {
      "source": "IzFTn5-tQuF_Z0cG_w6CW",
      "target": "KiwFXB6yd0go30zAFMTJt"
    },
    {
      "source": "OaLmlfkZid7hKqJ9G8oNV",
      "target": "IzFTn5-tQuF_Z0cG_w6CW"
    },
    {
      "source": "IzFTn5-tQuF_Z0cG_w6CW",
      "target": "YCJYRA3b-YSm8vKmGUFk5"
    },
    {
      "source": "YCJYRA3b-YSm8vKmGUFk5",
      "target": "57liQPaPyVpE-mdLnsbi0"
    },
    {
      "source": "YCJYRA3b-YSm8vKmGUFk5",
      "target": "n5AcBt_u8qtTe3PP9svPZ"
    },
    {
      "source": "YCJYRA3b-YSm8vKmGUFk5",
      "target": "JUFE4OQhnXOt1J_MG-Sjf"
    },
    {
      "source": "YCJYRA3b-YSm8vKmGUFk5",
      "target": "92GG4IRZ3FijumC94aL-T"
    },
    {
      "source": "YCJYRA3b-YSm8vKmGUFk5",
      "target": "Ocn7-ctpnl71ZCZ_uV-uD"
    },
    {
      "source": "Ocn7-ctpnl71ZCZ_uV-uD",
      "target": "priDGksAvJ05YzakkTFtM"
    },
    {
      "source": "Ocn7-ctpnl71ZCZ_uV-uD",
      "target": "j9Y2YbBKi3clO_sZ2L_hQ"
    },
    {
      "source": "j9Y2YbBKi3clO_sZ2L_hQ",
      "target": "C0g_kQFlte5siHMHwlHQb"
    },
    {
      "source": "j9Y2YbBKi3clO_sZ2L_hQ",
      "target": "6FDGecsHbqY-cm32yTZJa"
    },
    {
      "source": "j9Y2YbBKi3clO_sZ2L_hQ",
      "target": "mCiYCbKIOVU34qil_q7Hg"
    },
    {
      "source": "j9Y2YbBKi3clO_sZ2L_hQ",
      "target": "ulwgDCQi_BYx5lmll7pzU"
    },
    {
      "source": "j9Y2YbBKi3clO_sZ2L_hQ",
      "target": "vpko5Kyf6BZ5MHpxXOKaf"
    },
    {
      "source": "j9Y2YbBKi3clO_sZ2L_hQ",
      "target": "s0RvufK2PLMXtlsn2KAUN"
    },
    {
      "source": "j9Y2YbBKi3clO_sZ2L_hQ",
      "target": "hjlkxYZS7Zf9En3IUS-Wm"
    },
    {
      "source": "hjlkxYZS7Zf9En3IUS-Wm",
      "target": "LQlzVxUxM3haWRwbhYHKY"
    },
    {
      "source": "hjlkxYZS7Zf9En3IUS-Wm",
      "target": "UyIwiIiKaa6LTQaqzbCam"
    },
    {
      "source": "UyIwiIiKaa6LTQaqzbCam",
      "target": "cBWJ6Duw99tSKr7U6OW3A"
    },
    {
      "source": "cBWJ6Duw99tSKr7U6OW3A",
      "target": "Mt5W1IvuHevNXVRlh7z26"
    },
    {
      "source": "cBWJ6Duw99tSKr7U6OW3A",
      "target": "EdJhuNhMSWjeVxGW-RZtL"
    },
    {
      "source": "EdJhuNhMSWjeVxGW-RZtL",
      "target": "igf9yp1lRdAlN5gyQ8HHC"
    },
    {
      "source": "EdJhuNhMSWjeVxGW-RZtL",
      "target": "C0rKd5Rr27Z1_GleoEZxF"
    },
    {
      "source": "EdJhuNhMSWjeVxGW-RZtL",
      "target": "WoXoVwkSqXTP5U8HtyJOL"
    },
    {
      "source": "EdJhuNhMSWjeVxGW-RZtL",
      "target": "XnvlRrOhdoMsiGwGEhBro"
    },
    {
      "source": "EdJhuNhMSWjeVxGW-RZtL",
      "target": "OErbfM-H3laFm47GCHNPI"
    },
    {
      "source": "EdJhuNhMSWjeVxGW-RZtL",
      "target": "isavRe4ANVn77ZX6gNSLH"
    },
    {
      "source": "EdJhuNhMSWjeVxGW-RZtL",
      "target": "l3oeo65FyV5HHvw5n_1wa"
    },
    {
      "source": "EdJhuNhMSWjeVxGW-RZtL",
      "target": "CxceVdaNCyKDhs0huDtcL"
    },
    {
      "source": "EdJhuNhMSWjeVxGW-RZtL",
      "target": "8yALyPVUZPtd7LX3GrO1e"
    },
    {
      "source": "8yALyPVUZPtd7LX3GrO1e",
      "target": "gdtI0H_PzzTj_aFQn_NeA"
    },
    {
      "source": "8yALyPVUZPtd7LX3GrO1e",
      "target": "TxWAznp1tUtZ1MvThf9M1"
    },
    {
      "source": "8yALyPVUZPtd7LX3GrO1e",
      "target": "5EVecZmvor09LjD7WR_Y9"
    },
    {
      "source": "8yALyPVUZPtd7LX3GrO1e",
      "target": "mOXyzdNn8W-9R99ffcnor"
    },
    {
      "source": "",
      "target": "sVXZrBCsiSzWBBYWTm-nQ"
    },
    {
      "source": "STQQbPa7PE3gbjMdL6P-t",
      "target": "sVXZrBCsiSzWBBYWTm-nQ"
    },
    {
      "source": "kc6buUsLAeZeUb4Tk0apM",
      "target": "sVXZrBCsiSzWBBYWTm-nQ"
    },
    {
      "source": "8yALyPVUZPtd7LX3GrO1e",
      "target": "sVXZrBCsiSzWBBYWTm-nQ"
    },
    {
      "source": "OaLmlfkZid7hKqJ9G8oNV",
      "target": "b6lCGw82qKpUmsxe1r1f5"
    }
  ]
}