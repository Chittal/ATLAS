{
  "nodes": [
    {
      "id": "GISOFMKvnBys0O0IMpz2J",
      "name": "Learn the Basics",
      "resources": {
        "description": "# Python\n\nPython is a high-level, interpreted, general-purpose programming language. Its design philosophy emphasizes code readability with the use of significant indentation. Python is dynamically-typed and garbage-collected.",
        "resources": [
          {
            "type": "course",
            "title": "Python Website",
            "url": "https://www.python.org/"
          },
          {
            "type": "article",
            "title": "Python - Wiki",
            "url": "https://en.wikipedia.org/wiki/Python_(programming_language"
          },
          {
            "type": "article",
            "title": "Tutorial Series: How to Code in Python",
            "url": "https://www.digitalocean.com/community/tutorials/how-to-write-your-first-python-3-program"
          },
          {
            "type": "article",
            "title": "Google's Python Class",
            "url": "https://developers.google.com/edu/python"
          },
          {
            "type": "video",
            "title": "Learn Python - Full Course",
            "url": "https://www.youtube.com/watch?v=4M87qBgpafk"
          },
          {
            "type": "article",
            "title": "Explore top posts about Python",
            "url": "https://app.daily.dev/tags/python?ref=roadmapsh"
          }
        ]
      }
    },
    {
      "id": "6xRncUs3_vxVbDur567QA",
      "name": "Basic Syntax",
      "resources": {
        "description": "# Basic Syntax\n\nSetup the environment for python and get started with the basics.",
        "resources": [
          {
            "type": "video",
            "title": "Python for Beginners - Learn Python in 1 Hour",
            "url": "https://www.youtube.com/watch?v=kqtD5dpn9C8"
          },
          {
            "type": "article",
            "title": "Python Basics",
            "url": "https://www.tutorialspoint.com/python/python_basic_syntax.htm"
          },
          {
            "type": "article",
            "title": "Learn X in Y Minutes / Python",
            "url": "https://learnxinyminutes.com/docs/python/"
          }
        ]
      }
    },
    {
      "id": "dEFLBGpiH6nbSMeR7ecaT",
      "name": "Variables and Data Types",
      "resources": {
        "description": "# Variables\n\nVariables are used to store information to be referenced and manipulated in a computer program. They also provide a way of labeling data with a descriptive name, so our programs can be understood more clearly by the reader and ourselves. It is helpful to think of variables as containers that hold information. Their sole purpose is to label and store data in memory. This data can then be used throughout your program.",
        "resources": [
          {
            "type": "article",
            "title": "Variables in Python",
            "url": "https://realpython.com/python-variables"
          },
          {
            "type": "article",
            "title": "Python for Beginners: Data Types",
            "url": "https://thenewstack.io/python-for-beginners-data-types/"
          },
          {
            "type": "video",
            "title": "Python Variables and Data Types",
            "url": "https://www.youtube.com/playlist?list=PLBlnK6fEyqRhN-sfWgCU1z_Qhakc1AGOn"
          }
        ]
      }
    },
    {
      "id": "NP1kjSk0ujU0Gx-ajNHlR",
      "name": "Conditionals",
      "resources": {
        "description": "# Conditionals\n\nConditional Statements in Python perform different actions depending on whether a specific condition evaluates to true or false. Conditional Statements are handled by *if-elif-else* statements and MATCH-CASE statements in Python.",
        "resources": [
          {
            "type": "article",
            "title": "Conditional Statements in Python",
            "url": "https://realpython.com/python-conditional-statements/"
          },
          {
            "type": "article",
            "title": "Python Conditional Statements",
            "url": "https://www.guru99.com/if-loop-python-conditional-structures.html"
          },
          {
            "type": "article",
            "title": "How to Use a Match Statement in Python",
            "url": "https://learnpython.com/blog/python-match-case-statement/"
          }
        ]
      }
    },
    {
      "id": "R9DQNc0AyAQ2HLpP4HOk6",
      "name": "Type Casting",
      "resources": {
        "description": "# Typecasting\n\nThe process of converting the value of one data type (integer, string, float, etc.) to another data type is called type conversion. Python has two types of type conversion: Implicit and Explicit.",
        "resources": [
          {
            "type": "article",
            "title": "Type Conversion and Casting",
            "url": "https://www.programiz.com/python-programming/type-conversion-and-casting"
          }
        ]
      }
    },
    {
      "id": "fNTb9y3zs1HPYclAmu_Wv",
      "name": "Exceptions",
      "resources": {
        "description": "# Exceptions\n\nPython exceptions are events that occur during the execution of a program and disrupt the normal flow of the program's instructions. When an exception is raised, it indicates that an error has occurred. Python provides a way to handle these exceptions using try-except blocks, allowing developers to manage errors gracefully and ensure the program can continue or exit smoothly.\n\n- [@official@Exceptions Documentation](https://docs.python.org/3/tutorial/errors.html#exceptions)\n- [@article@Python Exceptions: An Introduction](https://realpython.com/python-exceptions/)\n- [@article@Errors and Exceptions](https://docs.python.org/3/tutorial/errors.html)\n- [@article@Python Exception Handling](https://www.programiz.com/python-programming/exception-handling)\n- [@video@Exception Handling in Python](https://www.youtube.com/watch?v=V_NXT2-QIlE)",
        "resources": [
          {
            "type": "course",
            "title": "Exceptions Documentation",
            "url": "https://docs.python.org/3/tutorial/errors.html#exceptions"
          },
          {
            "type": "article",
            "title": "Python Exceptions: An Introduction",
            "url": "https://realpython.com/python-exceptions/"
          },
          {
            "type": "article",
            "title": "Errors and Exceptions",
            "url": "https://docs.python.org/3/tutorial/errors.html"
          },
          {
            "type": "article",
            "title": "Python Exception Handling",
            "url": "https://www.programiz.com/python-programming/exception-handling"
          },
          {
            "type": "video",
            "title": "Exception Handling in Python",
            "url": "https://www.youtube.com/watch?v=V_NXT2-QIlE"
          }
        ]
      }
    },
    {
      "id": "-DJgS6l2qngfwurExlmmT",
      "name": "Functions, Builtin Functions",
      "resources": {
        "description": "# Functions\n\nIn programming, a function is a reusable block of code that executes a certain functionality when it is called. Functions are integral parts of every programming language because they help make your code more modular and reusable. In Python, we define a function with the `def` keyword, then write the function identifier (name) followed by parentheses and a colon.\n\n## Example\n\n```python\ndef greet(name):\n    print(f\"Hello, {name}!\")\n\n\ngreet(\"Roadmap.sh\")\n```",
        "resources": [
          {
            "type": "course",
            "title": "Built-in Functions in Python",
            "url": "https://docs.python.org/3/library/functions.html"
          },
          {
            "type": "article",
            "title": "Defining Python Functions",
            "url": "https://realpython.com/defining-your-own-python-function/"
          }
        ]
      }
    },
    {
      "id": "UT_SR7G-LYtzqooWrEtF1",
      "name": "Lists",
      "resources": {
        "description": "# Lists, Tuples, Sets, and Dictionaries\n\n**Lists:** A list is just like dynamic sized arrays, declared in other languages (vector in C++ and ArrayList in Java). Lists need not be homogeneous always which makes it the most powerful tool in Python.\n\n**Tuple:** A Tuple is a collection of Python objects separated by commas. In some ways, a tuple is similar to a list in terms of indexing, nested objects, and repetition but a tuple is immutable, unlike lists that are mutable.\n\n**Set:** A Set is an unordered collection data type that is iterable, mutable, and has no duplicate elements. Python’s set class represents the mathematical notion of a set.\n\n**Dictionary:** In python, Dictionary is an ordered (since Py 3.7) [unordered (Py 3.6 & prior)] collection of data values, used to store data values like a map, which, unlike other Data Types that hold only a single value as an element, Dictionary holds key:value pair. Key-value is provided in the dictionary to make it more optimized.",
        "resources": [
          {
            "type": "video",
            "title": "Difference Between List, Tuple, Set and Dictionary in Python",
            "url": "https://www.youtube.com/watch?v=n0krwG38SHI"
          },
          {
            "type": "article",
            "title": "Tuples vs. Lists vs. Sets in Python",
            "url": "https://jerrynsh.com/tuples-vs-lists-vs-sets-in-python/"
          },
          {
            "type": "article",
            "title": "Python for Beginners: Lists",
            "url": "https://thenewstack.io/python-for-beginners-lists/"
          },
          {
            "type": "article",
            "title": "Python for Beginners: When and How to Use Tuples",
            "url": "https://thenewstack.io/python-for-beginners-when-and-how-to-use-tuples/"
          }
        ]
      }
    },
    {
      "id": "i7xIGiXU-k5UIKHIhQPjE",
      "name": "Tuples",
      "resources": {
        "description": "# Tuples\n\nTuples are immutable sequences, meaning that once a tuple is created, its elements cannot be changed. Tuples are often used to store related pieces of information. They are defined by placing the elements inside parentheses () separated by commas.\n\n- [@official@Tuples Documentation](https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences)\n- [@article@When and How to Use Tuples](https://thenewstack.io/python-for-beginners-when-and-how-to-use-tuples/)\n- [@article@Python's tuple Data Type: A Deep Dive With Examples](https://realpython.com/python-tuple/#getting-started-with-pythons-tuple-data-type)\n- [@video@why are Tuples even a thing?](https://www.youtube.com/watch?v=fR_D_KIAYrE)",
        "resources": [
          {
            "type": "course",
            "title": "Tuples Documentation",
            "url": "https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences"
          },
          {
            "type": "article",
            "title": "When and How to Use Tuples",
            "url": "https://thenewstack.io/python-for-beginners-when-and-how-to-use-tuples/"
          },
          {
            "type": "article",
            "title": "Python's tuple Data Type: A Deep Dive With Examples",
            "url": "https://realpython.com/python-tuple/#getting-started-with-pythons-tuple-data-type"
          },
          {
            "type": "video",
            "title": "why are Tuples even a thing?",
            "url": "https://www.youtube.com/watch?v=fR_D_KIAYrE"
          }
        ]
      }
    },
    {
      "id": "soZFqivM3YBuljeX6PoaX",
      "name": "Sets",
      "resources": {
        "description": "# Sets\n\nPython Set is an unordered collection of data types that is iterable, mutable, and has no duplicate elements. The order of elements in a set is undefined though it may consist of various elements. The major advantage of using a set, as opposed to a list, is that it has a highly optimized method for checking whether a specific element is contained in the set.",
        "resources": [
          {
            "type": "article",
            "title": "An In-Depth Guide to Working with Python Sets",
            "url": "https://learnpython.com/blog/python-sets/"
          },
          {
            "type": "video",
            "title": "Python Sets tutorial for Beginners",
            "url": "https://www.youtube.com/watch?v=t9j8lCUGZXo"
          }
        ]
      }
    },
    {
      "id": "bc9CL_HMT-R6nXO1eR-gP",
      "name": "Dictionaries",
      "resources": {
        "description": "# Dictionaries\n\nIn Python, a dictionary is a built-in data type that allows you to store key-value pairs. Each key in the dictionary is unique, and each key is associated with a value. Starting from Python 3.7, dictionaries maintain the order of items as they were added.",
        "resources": [
          {
            "type": "course",
            "title": "Dictionaries in Python",
            "url": "https://docs.python.org/3/tutorial/datastructures.html#dictionaries"
          },
          {
            "type": "article",
            "title": "Dictionaries in Python",
            "url": "https://realpython.com/python-dicts/"
          }
        ]
      }
    },
    {
      "id": "Dvy7BnNzK55qbh_SgOk8m",
      "name": "Loops",
      "resources": {
        "description": "# Loops\n\nLoops are used to execute a block of code repeatedly.",
        "resources": [
          {
            "type": "article",
            "title": "Python \"while\" Loops (Indefinite Iteration)",
            "url": "https://realpython.com/python-while-loop/"
          },
          {
            "type": "article",
            "title": "Python \"for\" Loops (Definite Iteration)",
            "url": "https://realpython.com/python-for-loop/#the-guts-of-the-python-for-loop"
          },
          {
            "type": "video",
            "title": "Python For Loops",
            "url": "https://www.youtube.com/watch?v=KWgYha0clzw"
          }
        ]
      }
    },
    {
      "id": "OPD4WdMO7q4gRZMcRCQh1",
      "name": "Arrays and Linked Lists",
      "resources": {
        "description": "# Arrays and Linked lists\n\nArrays store elements in contiguous memory locations, resulting in easily calculable addresses for the elements stored and this allows faster access to an element at a specific index. Linked lists are less rigid in their storage structure and elements are usually not stored in contiguous locations, hence they need to be stored with additional tags giving a reference to the next element. This difference in the data storage scheme decides which data structure would be more suitable for a given situation.",
        "resources": [
          {
            "type": "article",
            "title": "Arrays in Python",
            "url": "https://www.edureka.co/blog/arrays-in-python/"
          },
          {
            "type": "article",
            "title": "Linked List Python",
            "url": "https://realpython.com/linked-lists-python/"
          },
          {
            "type": "video",
            "title": "Array Data Structure | Illustrated Data Structures",
            "url": "https://www.youtube.com/watch?v=QJNwK2uJyGs"
          },
          {
            "type": "video",
            "title": "Linked List Data Structure | Illustrated Data Structures",
            "url": "https://www.youtube.com/watch?v=odW9FU8jPRQ"
          }
        ]
      }
    },
    {
      "id": "0NlRczh6ZEaFLlT6LORWz",
      "name": "Heaps, Stacks and Queues",
      "resources": {
        "description": "# Heaps Stacks and Queues\n\n**Stacks:** Operations are performed LIFO (last in, first out), which means that the last element added will be the first one removed. A stack can be implemented using an array or a linked list. If the stack runs out of memory, it’s called a stack overflow.\n\n**Queue:** Operations are performed FIFO (first in, first out), which means that the first element added will be the first one removed. A queue can be implemented using an array.\n\n**Heap:** A tree-based data structure in which the value of a parent node is ordered in a certain way with respect to the value of its child node(s). A heap can be either a min heap (the value of a parent node is less than or equal to the value of its children) or a max heap (the value of a parent node is greater than or equal to the value of its children).",
        "resources": [
          {
            "type": "article",
            "title": "Heaps, Stacks, Queues",
            "url": "https://stephanosterburg.gitbook.io/scrapbook/coding/coding-interview/data-structures/heaps-stacks-queues"
          },
          {
            "type": "video",
            "title": "Stack Data Structure | Illustrated Data Structures",
            "url": "https://www.youtube.com/watch?v=I5lq6sCuABE"
          },
          {
            "type": "video",
            "title": "Queue Data Structure | Illustrated Data Structures",
            "url": "https://www.youtube.com/watch?v=mDCi1lXd9hc"
          },
          {
            "type": "article",
            "title": "How to Implement Python Stack?",
            "url": "https://realpython.com/how-to-implement-python-stack/"
          },
          {
            "type": "article",
            "title": "Python Stacks, Queues, and Priority Queues in Practice",
            "url": "https://realpython.com/queue-in-python/"
          },
          {
            "type": "article",
            "title": "Heap Implementation in Python",
            "url": "https://www.educative.io/answers/heap-implementation-in-python"
          }
        ]
      }
    },
    {
      "id": "DG4fi1e5ec2BVckPLsTJS",
      "name": "Hash Tables",
      "resources": {
        "description": "# Hash Tables\n\nHash Table, Map, HashMap, Dictionary or Associative are all the names of the same data structure. It is a data structure that implements a set abstract data type, a structure that can map keys to values.",
        "resources": [
          {
            "type": "article",
            "title": "Build a Hash Table in Python",
            "url": "https://realpython.com/python-hash-table/"
          },
          {
            "type": "article",
            "title": "Hash Tables and Hashmaps in Python",
            "url": "https://www.edureka.co/blog/hash-tables-and-hashmaps-in-python/"
          },
          {
            "type": "video",
            "title": "Hash Table Data Structure | Illustrated Data Structures",
            "url": "https://www.youtube.com/watch?v=jalSiaIi8j4"
          }
        ]
      }
    },
    {
      "id": "uJIqgsqUbE62Tyo3K75Qx",
      "name": "Binary Search Tree",
      "resources": {
        "description": "# Binary Search Trees\n\nA binary search tree, also called an ordered or sorted binary tree, is a rooted binary tree data structure with the key of each internal node being greater than all the keys in the respective node's left subtree and less than the ones in its right subtree",
        "resources": [
          {
            "type": "video",
            "title": "Tree Data Structure | Illustrated Data Structures",
            "url": "https://www.youtube.com/watch?v=S2W3SXGPVyU"
          },
          {
            "type": "article",
            "title": "How to Implement Binary Search Tree in Python",
            "url": "https://web.archive.org/web/20230601181553/https://www.section.io/engineering-education/implementing-binary-search-tree-using-python/"
          },
          {
            "type": "article",
            "title": "Binary Search Tree in Python",
            "url": "https://www.pythonforbeginners.com/data-structures/binary-search-tree-in-python"
          }
        ]
      }
    },
    {
      "id": "kLBgy_nxxjE8SxdVi04bq",
      "name": "Recursion",
      "resources": {
        "description": "# Recursion\n\nRecursion is a method of solving a computational problem where the solution depends on solutions to smaller instances of the same problem. Recursion solves such recursive problems by using functions that call themselves from within their own code.",
        "resources": [
          {
            "type": "article",
            "title": "Recursion in Python: An Introduction",
            "url": "https://realpython.com/python-recursion/"
          },
          {
            "type": "article",
            "title": "Explore top posts about Recursion",
            "url": "https://app.daily.dev/tags/recursion?ref=roadmapsh"
          }
        ]
      }
    },
    {
      "id": "vvTmjcWCVclOPY4f_5uB0",
      "name": "Sorting Algorithms",
      "resources": {
        "description": "# Sorting Algorithms\n\nSorting refers to arranging data in a particular format. Sorting algorithm specifies the way to arrange data in a particular order. Most common orders are in numerical or lexicographical order. The importance of sorting lies in the fact that data searching can be optimized to a very high level, if data is stored in a sorted manner.",
        "resources": [
          {
            "type": "article",
            "title": "Sorting Algorithms in Python",
            "url": "https://realpython.com/sorting-algorithms-python/"
          },
          {
            "type": "article",
            "title": "Python - Sorting Algorithms",
            "url": "https://www.tutorialspoint.com/python_data_structure/python_sorting_algorithms.htm"
          },
          {
            "type": "article",
            "title": "Explore top posts about Algorithms",
            "url": "https://app.daily.dev/tags/algorithms?ref=roadmapsh"
          }
        ]
      }
    },
    {
      "id": "274uk28wzxn6EKWQzLpHs",
      "name": "Modules",
      "resources": {
        "description": "# Modules\n\nModules refer to a file containing Python statements and definitions. A file containing Python code, for example: `example.py`, is called a module, and its module name would be example. We use modules to break down large programs into small manageable and organized files. Furthermore, modules provide reusability of code.",
        "resources": [
          {
            "type": "course",
            "title": "Python Modules",
            "url": "https://docs.python.org/3/tutorial/modules.html"
          },
          {
            "type": "article",
            "title": "Modules in Python",
            "url": "https://www.programiz.com/python-programming/modules"
          }
        ]
      }
    },
    {
      "id": "JDDG4KfhtIlw1rkNCzUli",
      "name": "Learn the Basics",
      "resources": {
        "description": "# Python\n\nPython is a high-level, interpreted, general-purpose programming language. Its design philosophy emphasizes code readability with the use of significant indentation. Python is dynamically-typed and garbage-collected.",
        "resources": [
          {
            "type": "course",
            "title": "Python Website",
            "url": "https://www.python.org/"
          },
          {
            "type": "article",
            "title": "Python - Wiki",
            "url": "https://en.wikipedia.org/wiki/Python_(programming_language"
          },
          {
            "type": "article",
            "title": "Tutorial Series: How to Code in Python",
            "url": "https://www.digitalocean.com/community/tutorials/how-to-write-your-first-python-3-program"
          },
          {
            "type": "article",
            "title": "Google's Python Class",
            "url": "https://developers.google.com/edu/python"
          },
          {
            "type": "video",
            "title": "Learn Python - Full Course",
            "url": "https://www.youtube.com/watch?v=4M87qBgpafk"
          },
          {
            "type": "article",
            "title": "Explore top posts about Python",
            "url": "https://app.daily.dev/tags/python?ref=roadmapsh"
          }
        ]
      }
    },
    {
      "id": "VJSIbYJcy2MC6MOFBrqXi",
      "name": "Data Structures & Algorithms",
      "resources": {
        "description": "# Data Structures and Algorithms\n\nA data structure is a named location that can be used to store and organize data. And, an algorithm is a collection of steps to solve a particular problem. Learning data structures and algorithms allow us to write efficient and optimized computer programs.",
        "resources": [
          {
            "type": "article",
            "title": "Visit Dedicated DSA Roadmap",
            "url": "https://roadmap.sh/datastructures-and-algorithms"
          },
          {
            "type": "article",
            "title": "Learn DS & Algorithms",
            "url": "https://www.programiz.com/dsa"
          },
          {
            "type": "video",
            "title": "Data Structures Illustrated",
            "url": "https://www.youtube.com/playlist?list=PLkZYeFmDuaN2-KUIv-mvbjfKszIGJ4FaY"
          },
          {
            "type": "article",
            "title": "Explore top posts about Algorithms",
            "url": "https://app.daily.dev/tags/algorithms?ref=roadmapsh"
          }
        ]
      }
    },
    {
      "id": "kIuns7FOwapwtFLKo1phQ",
      "name": "Arrays and Linked Lists",
      "resources": {
        "description": "# Arrays and Linked lists\n\nArrays store elements in contiguous memory locations, resulting in easily calculable addresses for the elements stored and this allows faster access to an element at a specific index. Linked lists are less rigid in their storage structure and elements are usually not stored in contiguous locations, hence they need to be stored with additional tags giving a reference to the next element. This difference in the data storage scheme decides which data structure would be more suitable for a given situation.",
        "resources": [
          {
            "type": "article",
            "title": "Arrays in Python",
            "url": "https://www.edureka.co/blog/arrays-in-python/"
          },
          {
            "type": "article",
            "title": "Linked List Python",
            "url": "https://realpython.com/linked-lists-python/"
          },
          {
            "type": "video",
            "title": "Array Data Structure | Illustrated Data Structures",
            "url": "https://www.youtube.com/watch?v=QJNwK2uJyGs"
          },
          {
            "type": "video",
            "title": "Linked List Data Structure | Illustrated Data Structures",
            "url": "https://www.youtube.com/watch?v=odW9FU8jPRQ"
          }
        ]
      }
    },
    {
      "id": "rSfg5M65LyZldhrdWOr90",
      "name": "Heaps, Stacks and Queues",
      "resources": {
        "description": "# Heaps Stacks and Queues\n\n**Stacks:** Operations are performed LIFO (last in, first out), which means that the last element added will be the first one removed. A stack can be implemented using an array or a linked list. If the stack runs out of memory, it’s called a stack overflow.\n\n**Queue:** Operations are performed FIFO (first in, first out), which means that the first element added will be the first one removed. A queue can be implemented using an array.\n\n**Heap:** A tree-based data structure in which the value of a parent node is ordered in a certain way with respect to the value of its child node(s). A heap can be either a min heap (the value of a parent node is less than or equal to the value of its children) or a max heap (the value of a parent node is greater than or equal to the value of its children).",
        "resources": [
          {
            "type": "article",
            "title": "Heaps, Stacks, Queues",
            "url": "https://stephanosterburg.gitbook.io/scrapbook/coding/coding-interview/data-structures/heaps-stacks-queues"
          },
          {
            "type": "video",
            "title": "Stack Data Structure | Illustrated Data Structures",
            "url": "https://www.youtube.com/watch?v=I5lq6sCuABE"
          },
          {
            "type": "video",
            "title": "Queue Data Structure | Illustrated Data Structures",
            "url": "https://www.youtube.com/watch?v=mDCi1lXd9hc"
          },
          {
            "type": "article",
            "title": "How to Implement Python Stack?",
            "url": "https://realpython.com/how-to-implement-python-stack/"
          },
          {
            "type": "article",
            "title": "Python Stacks, Queues, and Priority Queues in Practice",
            "url": "https://realpython.com/queue-in-python/"
          },
          {
            "type": "article",
            "title": "Heap Implementation in Python",
            "url": "https://www.educative.io/answers/heap-implementation-in-python"
          }
        ]
      }
    },
    {
      "id": "0-m8jVuDKE8hX1QorKGTM",
      "name": "Hash Tables",
      "resources": {
        "description": "# Hash Tables\n\nHash Table, Map, HashMap, Dictionary or Associative are all the names of the same data structure. It is a data structure that implements a set abstract data type, a structure that can map keys to values.",
        "resources": [
          {
            "type": "article",
            "title": "Build a Hash Table in Python",
            "url": "https://realpython.com/python-hash-table/"
          },
          {
            "type": "article",
            "title": "Hash Tables and Hashmaps in Python",
            "url": "https://www.edureka.co/blog/hash-tables-and-hashmaps-in-python/"
          },
          {
            "type": "video",
            "title": "Hash Table Data Structure | Illustrated Data Structures",
            "url": "https://www.youtube.com/watch?v=jalSiaIi8j4"
          }
        ]
      }
    },
    {
      "id": "7NZlydjm4432vLY1InBS7",
      "name": "Binary Search Tree",
      "resources": {
        "description": "# Binary Search Trees\n\nA binary search tree, also called an ordered or sorted binary tree, is a rooted binary tree data structure with the key of each internal node being greater than all the keys in the respective node's left subtree and less than the ones in its right subtree",
        "resources": [
          {
            "type": "video",
            "title": "Tree Data Structure | Illustrated Data Structures",
            "url": "https://www.youtube.com/watch?v=S2W3SXGPVyU"
          },
          {
            "type": "article",
            "title": "How to Implement Binary Search Tree in Python",
            "url": "https://web.archive.org/web/20230601181553/https://www.section.io/engineering-education/implementing-binary-search-tree-using-python/"
          },
          {
            "type": "article",
            "title": "Binary Search Tree in Python",
            "url": "https://www.pythonforbeginners.com/data-structures/binary-search-tree-in-python"
          }
        ]
      }
    },
    {
      "id": "94KnPMQdNTOwQkUv37tAk",
      "name": "Recursion",
      "resources": {
        "description": "# Recursion\n\nRecursion is a method of solving a computational problem where the solution depends on solutions to smaller instances of the same problem. Recursion solves such recursive problems by using functions that call themselves from within their own code.",
        "resources": [
          {
            "type": "article",
            "title": "Recursion in Python: An Introduction",
            "url": "https://realpython.com/python-recursion/"
          },
          {
            "type": "article",
            "title": "Explore top posts about Recursion",
            "url": "https://app.daily.dev/tags/recursion?ref=roadmapsh"
          }
        ]
      }
    },
    {
      "id": "YNptpfK9qv2ovmkUXLkJT",
      "name": "Sorting Algorithms",
      "resources": {
        "description": "# Sorting Algorithms\n\nSorting refers to arranging data in a particular format. Sorting algorithm specifies the way to arrange data in a particular order. Most common orders are in numerical or lexicographical order. The importance of sorting lies in the fact that data searching can be optimized to a very high level, if data is stored in a sorted manner.",
        "resources": [
          {
            "type": "article",
            "title": "Sorting Algorithms in Python",
            "url": "https://realpython.com/sorting-algorithms-python/"
          },
          {
            "type": "article",
            "title": "Python - Sorting Algorithms",
            "url": "https://www.tutorialspoint.com/python_data_structure/python_sorting_algorithms.htm"
          },
          {
            "type": "article",
            "title": "Explore top posts about Algorithms",
            "url": "https://app.daily.dev/tags/algorithms?ref=roadmapsh"
          }
        ]
      }
    },
    {
      "id": "08XifLQ20c4FKI_4AWNBQ",
      "name": "Builtin",
      "resources": {
        "description": "# Builtin Modules\n\nPython has a rich standard library of built-in modules that provide a wide range of functionality. Some of the most commonly used built-in modules include: sys, os, math, datetime, random, re, itertools, etc.",
        "resources": [
          {
            "type": "course",
            "title": "Python Module Index",
            "url": "https://docs.python.org/3/py-modindex.html"
          },
          {
            "type": "article",
            "title": "Python Modules",
            "url": "https://www.digitalocean.com/community/tutorials/python-modules"
          },
          {
            "type": "article",
            "title": "Python - Built-In Modules",
            "url": "https://www.knowledgehut.com/tutorials/python-tutorial/python-built-in-modules"
          }
        ]
      }
    },
    {
      "id": "l7k0qTYe42wYBTlT2-1cy",
      "name": "Custom",
      "resources": {
        "description": "# Custom Modules\n\nModules refer to a file containing Python statements and definitions. A file containing Python code, for example: `example.py`, is called a module, and its module name would be example. We use modules to break down large programs into small manageable and organized files. Furthermore, modules provide reusability of code.",
        "resources": [
          {
            "type": "course",
            "title": "Python Modules",
            "url": "https://docs.python.org/3/tutorial/modules.html"
          },
          {
            "type": "article",
            "title": "Modules in Python",
            "url": "https://www.programiz.com/python-programming/modules"
          },
          {
            "type": "article",
            "title": "Python Modules and Packages",
            "url": "https://realpython.com/python-modules-packages/"
          }
        ]
      }
    },
    {
      "id": "aWHgAk959DPUZL46CeRiI",
      "name": "Lambdas",
      "resources": {
        "description": "# Lambdas\n\nPython Lambda Functions are anonymous function means that the function is without a name. As we already know that the def keyword is used to define a normal function in Python. Similarly, the lambda keyword is used to define an anonymous function in Python.",
        "resources": [
          {
            "type": "article",
            "title": "How to use Lambda functions",
            "url": "https://realpython.com/python-lambda/"
          },
          {
            "type": "video",
            "title": "Python Lambda Functions",
            "url": "https://www.youtube.com/watch?v=KR22jigJLok"
          }
        ]
      }
    },
    {
      "id": "pIluLJkySqn_gI_GykV6G",
      "name": "Decorators",
      "resources": {
        "description": "# Decorators\n\nDecorator is a design pattern in Python that allows a user to add new functionality to an existing object without modifying its structure. Decorators are usually called before the definition of a function you want to decorate.",
        "resources": [
          {
            "type": "article",
            "title": "Learn Decorators in Python",
            "url": "https://pythonbasics.org/decorators/"
          },
          {
            "type": "article",
            "title": "Python Decorators",
            "url": "https://www.datacamp.com/tutorial/decorators-python"
          },
          {
            "type": "video",
            "title": "Decorators in Python",
            "url": "https://www.youtube.com/watch?v=FXUUSfJO_J4"
          },
          {
            "type": "video",
            "title": "Python Decorators in 1 Minute",
            "url": "https://www.youtube.com/watch?v=BE-L7xu8pO4"
          }
        ]
      }
    },
    {
      "id": "aB1LSQjDEQb_BxueOcnxU",
      "name": "Iterators",
      "resources": {
        "description": "# Iterators\n\nAn iterator is an object that contains a countable number of values. An iterator is an object that can be iterated upon, meaning that you can traverse through all the values. Technically, in Python, an iterator is an object which implements the iterator protocol, which consist of the methods **iter**() and **next**() .",
        "resources": [
          {
            "type": "article",
            "title": "Python Iterators",
            "url": "https://www.programiz.com/python-programming/iterator"
          },
          {
            "type": "article",
            "title": "Iterators and Iterables in Python",
            "url": "https://realpython.com/python-iterators-iterables/"
          }
        ]
      }
    },
    {
      "id": "7t6mJBsaFMWPi7o9fbhhq",
      "name": "Regular Expressions",
      "resources": {
        "description": "# Regular Expressions\n\nA regular expression is a sequence of characters that specifies a search pattern in text. Usually such patterns are used by string-searching algorithms for \"find\" or \"find and replace\" operations on strings, or for input validation.",
        "resources": [
          {
            "type": "course",
            "title": "Regular Expressions in Python",
            "url": "https://docs.python.org/3/library/re.html"
          },
          {
            "type": "article",
            "title": "Python Regular Expressions",
            "url": "https://developers.google.com/edu/python/regular-expressions"
          },
          {
            "type": "article",
            "title": "Python - Regular Expressions",
            "url": "https://www.tutorialspoint.com/python/python_reg_expressions.htm"
          }
        ]
      }
    },
    {
      "id": "P_Di-XPSDITmU3xKQew8G",
      "name": "Object Oriented Programming",
      "resources": {
        "description": "# OOP\n\nIn Python, object-oriented Programming (OOPs) is a programming paradigm that uses objects and classes in programming. It aims to implement real-world entities like inheritance, polymorphism, encapsulation, etc., in programming. The main concept of OOPs is to bind the data and the functions that work on that together as a single unit so that no other part of the code can access this data.",
        "resources": [
          {
            "type": "article",
            "title": "Object Oriented Programming in Python",
            "url": "https://realpython.com/python3-object-oriented-programming/"
          },
          {
            "type": "video",
            "title": "Object Oriented Programming (OOP) In Python - Beginner Crash Course",
            "url": "https://www.youtube.com/watch?v=-pEs-Bss8Wc/"
          },
          {
            "type": "video",
            "title": "OOP in Python One Shot",
            "url": "https://www.youtube.com/watch?v=Ej_02ICOIgs"
          },
          {
            "type": "video",
            "title": "Python OOP Tutorial",
            "url": "https://www.youtube.com/watch?v=IbMDCwVm63M"
          }
        ]
      }
    },
    {
      "id": "AqwzR8dZKLQIoj_6KKZ3t",
      "name": "Classes",
      "resources": {
        "description": "# Classes\n\nA class is a user-defined blueprint or prototype from which objects are created. Classes provide a means of bundling data and functionality together. Creating a new class creates a new type of object, allowing new instances of that type to be made. Each class instance can have attributes attached to it for maintaining its state. Class instances can also have methods (defined by their class) for modifying their state.",
        "resources": [
          {
            "type": "course",
            "title": "Classes in Python",
            "url": "https://docs.python.org/3/tutorial/classes.html"
          },
          {
            "type": "video",
            "title": "Python OOP Tutorial",
            "url": "https://www.youtube.com/watch?v=ZDa-Z5JzLYM&list=PL-osiE80TeTsqhIuOqKhwlXsIBIdSeYtc"
          }
        ]
      }
    },
    {
      "id": "S0FLE70szSVUPI0CDEQK7",
      "name": "Inheritance",
      "resources": {
        "description": "# Inheritance\n\nInheritance is a fundamental concept in object-oriented programming (OOP) that allows one class to inherit the properties and behavior of another class.",
        "resources": []
      }
    },
    {
      "id": "zAS4YiEJ6VPsyABrkIG8i",
      "name": "Methods, Dunder",
      "resources": {
        "description": "# Methods and Dunder\n\nA method in python is somewhat similar to a function, except it is associated with object/classes. Methods in python are very similar to functions except for two major differences.\n\n- The method is implicitly used for an object for which it is called.\n- The method is accessible to data that is contained within the class.\n\nDunder or magic methods in Python are the methods that have two prefix and suffix underscores in the method name. Dunder here means “Double Under (Underscores)”. These are commonly used for operator overloading. Few examples for magic methods are: **`__init__`**, **`__add__`**, **`__len__`**, **`__repr__`** etc.",
        "resources": [
          {
            "type": "article",
            "title": "Method vs Function in Python",
            "url": "https://www.tutorialspoint.com/difference-between-method-and-function-in-python"
          },
          {
            "type": "article",
            "title": "Python - Magic or Dunder Methods",
            "url": "https://www.tutorialsteacher.com/python/magic-methods-in-python"
          }
        ]
      }
    },
    {
      "id": "qeCMw-sJ2FR4UxvU9DDzv",
      "name": "Package Managers",
      "resources": {
        "description": "# Package Managers\n\nPackage managers allow you to manage the dependencies (external code written by you or someone else) that your project needs to work correctly.\n\n`PyPI` and `Pip` are the most common contenders but there are some other options available as well.",
        "resources": [
          {
            "type": "tutorial",
            "title": "pypa/pipx",
            "url": "https://github.com/pypa/pipx"
          },
          {
            "type": "article",
            "title": "Explore top posts about Python",
            "url": "https://app.daily.dev/tags/python?ref=roadmapsh"
          }
        ]
      }
    },
    {
      "id": "1dfOTOGsOk5XE3bnZs8Ht",
      "name": "PyPI",
      "resources": {
        "description": "# PyPI\n\nPyPI, typically pronounced pie-pee-eye, is a repository containing several hundred thousand packages. These range from trivial Hello, World implementations to advanced deep learning libraries.",
        "resources": [
          {
            "type": "course",
            "title": "PyPI Website",
            "url": "https://pypi.org/"
          },
          {
            "type": "video",
            "title": "Getting Started with Pip and PyPI in Python",
            "url": "https://www.youtube.com/watch?v=bPSfNKvhooA"
          },
          {
            "type": "article",
            "title": "How to Publish an Open-Source Python Package to PyPI",
            "url": "https://realpython.com/pypi-publish-python-package/"
          },
          {
            "type": "article",
            "title": "Explore top posts about Python",
            "url": "https://app.daily.dev/tags/python?ref=roadmapsh"
          }
        ]
      }
    },
    {
      "id": "iVhQnp6hpgVZDNJ0XoVra",
      "name": "Pip",
      "resources": {
        "description": "# Pip\n\nThe standard package manager for Python is pip. It allows you to install and manage packages that aren’t part of the Python standard library.",
        "resources": [
          {
            "type": "course",
            "title": "pip Documentation",
            "url": "https://pip.pypa.io/en/stable/installation/"
          },
          {
            "type": "article",
            "title": "Using Pythons pip to Manage Your Projects Dependencies",
            "url": "https://realpython.com/what-is-pip/"
          },
          {
            "type": "article",
            "title": "Explore top posts about PIP",
            "url": "https://app.daily.dev/tags/pip?ref=roadmapsh"
          }
        ]
      }
    },
    {
      "id": "uh67D1u-Iv5cZamRgFEJg",
      "name": "Conda",
      "resources": {
        "description": "# Conda\n\nConda is an open source package management system and environment management system that runs on Windows, macOS, and Linux. Conda quickly installs, runs and updates packages and their dependencies. Conda easily creates, saves, loads and switches between environments on your local computer. It was created for Python programs, but it can package and distribute software for any language.",
        "resources": [
          {
            "type": "course",
            "title": "Conda Documentation",
            "url": "https://docs.conda.io/en/latest/"
          }
        ]
      }
    },
    {
      "id": "uXd2B01GVBEQNXQE8RATT",
      "name": "Poetry",
      "resources": {
        "description": "# Poetry\n\nPoetry is a dependency management and packaging tool for Python that runs on Windows, macOS, and Linux. Poetry efficiently installs, manages, and updates packages and their dependencies. Poetry seamlessly creates, saves, loads, and switches between project environments on your local computer. It is designed specifically for Python projects, providing a streamlined workflow for managing dependencies, virtual environments, and building packages.\n\nPoetry as a package manager helps you find and install packages. If you need a specific version of a package or a different version of Python, Poetry handles both dependency management and virtual environments effortlessly. With just a few commands, you can set up a completely isolated environment to run a different version of Python or package configuration, while maintaining your usual development environment. Poetry’s lock file ensures consistent installs across different environments, enhancing reproducibility and stability of your projects.",
        "resources": [
          {
            "type": "course",
            "title": "Poetry Docs",
            "url": "https://python-poetry.org/docs/"
          },
          {
            "type": "video",
            "title": "Python Poetry - Basics",
            "url": "https://www.youtube.com/watch?v=Ji2XDxmXSOM"
          }
        ]
      }
    },
    {
      "id": "4gtmtYWYRWqwLdZRL0XMg",
      "name": "List Comprehensions",
      "resources": {
        "description": "# List Comprehensions\n\nList comprehensions are a concise way to create a list using a single line of code in Python. They are a powerful tool for creating and manipulating lists, and they can be used to simplify and shorten code.",
        "resources": [
          {
            "type": "course",
            "title": "Python List Comprehensions",
            "url": "https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions"
          },
          {
            "type": "article",
            "title": "What Exactly are List Comprehensions in Python? - CodeGuage",
            "url": "https://www.codeguage.com/courses/python/lists-list-comprehensions"
          },
          {
            "type": "article",
            "title": "Python List Comprehensions Quiz - CodeGuage",
            "url": "https://www.codeguage.com/courses/python/lists-list-comprehensions-quiz"
          }
        ]
      }
    },
    {
      "id": "jnLIVRrWxcX3yq3Op91Vr",
      "name": "Generator Expressions",
      "resources": {
        "description": "# Generator Expressions\n\nGenerator expressions are a concise way to create a generator using a single line of code in Python. They are similar to list comprehensions, but instead of creating a list, they create a generator object that produces the values on-demand, as they are needed. Generator expressions are a useful tool for efficiently producing large sequence of values, as they allow you to create the generator without creating the entire sequence in memory at once. This tends to use less memory, especially for large sequences.",
        "resources": [
          {
            "type": "article",
            "title": "Python Generator Expressions",
            "url": "https://www.pythontutorial.net/advanced-python/python-generator-expressions/"
          },
          {
            "type": "article",
            "title": "List Comprehensions in Python and Generator Expressions",
            "url": "https://djangostars.com/blog/list-comprehensions-and-generator-expressions/"
          }
        ]
      }
    },
    {
      "id": "4GU5HNi3W8yFkImVY9ZpW",
      "name": "Paradigms",
      "resources": {
        "description": "# Python Paradigms\n\nPython is a multi-paradigm programming language, which means that it supports several programming paradigms. Some of the main paradigms supported by Python are:\n\n- Imperative programming: This paradigm focuses on telling the computer what to do, step by step. Python supports imperative programming with features such as variables, loops, and control structures.\n- Object-oriented programming (OOP): This paradigm is based on the idea of objects and their interactions. Python supports OOP with features such as classes, inheritance, and polymorphism.\n- Functional programming: This paradigm is based on the idea of functions as first-class citizens, and it emphasizes the use of pure functions and immutable data. Python supports functional programming with features such as higher-order functions, lambda expressions, and generators.\n- Aspect-oriented programming: This paradigm is based on the idea of separating cross-cutting concerns from the main functionality of a program. Python does not have built-in support for aspect-oriented programming, but it can be achieved using libraries or language extensions.",
        "resources": [
          {
            "type": "article",
            "title": "Python Paradigms",
            "url": "https://opensource.com/article/19/10/python-programming-paradigms"
          },
          {
            "type": "video",
            "title": "Learn Functional Programming - Python Course",
            "url": "https://www.youtube.com/watch?v=5QZYGU0C2OA"
          }
        ]
      }
    },
    {
      "id": "KAXF2kUAOvtBZhY8G9rkI",
      "name": "Context Manager",
      "resources": {
        "description": "# Context Manager\n\nContext Managers are a construct in Python that allows you to set up context for a block of code, and then automatically clean up or release resources when the block is exited. It is most commonly used with the `with` statement.",
        "resources": [
          {
            "type": "course",
            "title": "Context Libraries",
            "url": "https://docs.python.org/3/library/contextlib.html"
          },
          {
            "type": "article",
            "title": "Context Managers in Python",
            "url": "https://www.freecodecamp.org/news/context-managers-in-python/"
          },
          {
            "type": "article",
            "title": "Context Managers",
            "url": "https://book.pythontips.com/en/latest/context_managers.html"
          }
        ]
      }
    },
    {
      "id": "0-ShORjGnQlAdcwjtxdEB",
      "name": "Learn a Framework",
      "resources": {
        "description": "# Python Frameworks\n\nFrameworks automate the common implementation of common solutions which gives the flexibility to the users to focus on the application logic instead of the basic routine processes. Frameworks make the life of web developers easier by giving them a structure for app development. They provide common patterns in a web application that are fast, reliable and easily maintainable.",
        "resources": [
          {
            "type": "article",
            "title": "Pyscript: A Browser-Based Python Framework",
            "url": "https://thenewstack.io/pyscript-a-browser-based-python-framework/"
          },
          {
            "type": "article",
            "title": "Explore top posts about Python",
            "url": "https://app.daily.dev/tags/python?ref=roadmapsh"
          }
        ]
      }
    },
    {
      "id": "DHtskqATeAVKgaazdhXKD",
      "name": "Pyramid",
      "resources": {
        "description": "# Pyramid\n\nPyramid is a general, open source, web application development framework built in python. It allows python developer to create web applications with ease. Pyramid is backed by the enterprise knowledge Management System KARL (a George Soros project).",
        "resources": [
          {
            "type": "course",
            "title": "Pyramid Website",
            "url": "https://trypyramid.com/"
          },
          {
            "type": "course",
            "title": "Pyramid Documentation",
            "url": "https://trypyramid.com/documentation.html"
          },
          {
            "type": "article",
            "title": "Pyramid Framework Introduction",
            "url": "https://www.tutorialspoint.com/python_web_development_libraries/python_web_development_libraries_pyramid_framework.htm"
          }
        ]
      }
    },
    {
      "id": "7zcpXN3krnS3tMRWVNIVe",
      "name": "Plotly Dash",
      "resources": {
        "description": "# Plotly Dash\n\nPlotly Dash is a Python framework that allows you to build analytical web applications. It's a high-level library that enables you to create interactive, web-based data visualization dashboards without requiring extensive knowledge of web development.",
        "resources": [
          {
            "type": "course",
            "title": "Plotly Dash Documentation",
            "url": "https://dash.plotly.com/"
          },
          {
            "type": "course",
            "title": "20 Minutes Tutorial",
            "url": "http://dash.plotly.com/tutorial"
          }
        ]
      }
    },
    {
      "id": "InUJIGmTnf0X4cSoLuCEQ",
      "name": "gevent",
      "resources": {
        "description": "# gevent\n\ngevent is a Python library that provides a high-level interface to the event loop.\nIt is based on non-blocking IO (libevent/libev) and lightweight greenlets. Non-blocking IO means requests waiting for network IO won't block other requests; greenlets mean we can continue to write code in synchronous style.",
        "resources": [
          {
            "type": "course",
            "title": "gevent Website",
            "url": "http://www.gevent.org/"
          },
          {
            "type": "tutorial",
            "title": "gevent/gevent",
            "url": "https://github.com/gevent/gevent"
          },
          {
            "type": "article",
            "title": "gevent For the Working Python Developer",
            "url": "https://sdiehl.github.io/gevent-tutorial/"
          }
        ]
      }
    },
    {
      "id": "IBVAvFtN4mnIPbIuyUvEb",
      "name": "aiohttp",
      "resources": {
        "description": "# AIOHTTP\n\naiohttp is a Python 3.5+ library that provides a simple and powerful asynchronous HTTP client and server implementation.",
        "resources": [
          {
            "type": "course",
            "title": "aiohttp docs",
            "url": "https://docs.aiohttp.org/en/stable/"
          },
          {
            "type": "video",
            "title": "Python Asyncio, Requests, Aiohttp | Make faster API Calls",
            "url": "https://www.youtube.com/watch?v=nFn4_nA_yk8"
          },
          {
            "type": "article",
            "title": "Creating a RESTful API with Python and aiohttp",
            "url": "https://tutorialedge.net/python/create-rest-api-python-aiohttp/"
          }
        ]
      }
    },
    {
      "id": "zey2C6BdzsHJAlb_K3qrP",
      "name": "Tornado",
      "resources": {
        "description": "# Tornado\n\nTornado is a scalable, non-blocking web server and web application framework written in Python. It was developed for use by FriendFeed; the company was acquired by Facebook in 2009 and Tornado was open-sourced soon after.",
        "resources": [
          {
            "type": "course",
            "title": "Tornado Website",
            "url": "https://www.tornadoweb.org/"
          },
          {
            "type": "article",
            "title": "A Step-by-Step Tutorial on Python Tornado",
            "url": "https://phrase.com/blog/posts/tornado-web-framework-i18n/"
          },
          {
            "type": "video",
            "title": "Tornado Python Framework",
            "url": "https://www.youtube.com/watch?v=-gJ21qzpieA"
          }
        ]
      }
    },
    {
      "id": "9RGpqsj9jHz0_-r7EvRcw",
      "name": "Sanic",
      "resources": {
        "description": "# Sanic\n\nSanic is a Python 3.7+ web server and web framework that&#39;s written to go fast. It allows the usage of the async/await syntax added in Python 3.5, which makes your code non-blocking and speedy.",
        "resources": [
          {
            "type": "course",
            "title": "Sanic Website",
            "url": "https://sanic.dev/en/"
          }
        ]
      }
    },
    {
      "id": "XeQSmvAsGSTi8dd7QVHxn",
      "name": "Fast API",
      "resources": {
        "description": "# FastAPI\n\nFastAPI is a Web framework for developing RESTful APIs in Python. FastAPI is based on Pydantic and type hints to validate, serialize, and deserialize data and automatically auto-generate OpenAPI documents.\n\n- [@official@FastAPI Documentation](https://fastapi.tiangolo.com/)\n- [@video@Create an API with Fast-API (Full 19 Hour Course)](https://www.youtube.com/watch?v=0sOvCWFmrtA)\n- [@feed@Explore top posts about FastAPI](https://app.daily.dev/tags/fastapi?ref=roadmapsh)",
        "resources": [
          {
            "type": "course",
            "title": "FastAPI Documentation",
            "url": "https://fastapi.tiangolo.com/"
          },
          {
            "type": "video",
            "title": "Create an API with Fast-API (Full 19 Hour Course)",
            "url": "https://www.youtube.com/watch?v=0sOvCWFmrtA"
          },
          {
            "type": "article",
            "title": "Explore top posts about FastAPI",
            "url": "https://app.daily.dev/tags/fastapi?ref=roadmapsh"
          }
        ]
      }
    },
    {
      "id": "x1V8GjdjANTnhP6YXMbgC",
      "name": "Django",
      "resources": {
        "description": "# Django\n\nDjango is a free and open-source, Python-based web framework that follows the model–template–views architectural pattern. It is maintained by the Django Software Foundation, an independent organization established in the US as a 501 non-profit",
        "resources": [
          {
            "type": "course",
            "title": "Django Website",
            "url": "https://www.djangoproject.com/"
          },
          {
            "type": "course",
            "title": "Getting Started",
            "url": "https://www.djangoproject.com/start/"
          },
          {
            "type": "article",
            "title": "Is Django Synchronous or Asynchronous?",
            "url": "https://stackoverflow.com/questions/58548089/django-is-synchronous-or-asynchronous"
          },
          {
            "type": "video",
            "title": "Python Django Tutorial for Beginners",
            "url": "https://www.youtube.com/watch?v=rHux0gMZ3Eg"
          },
          {
            "type": "article",
            "title": "Explore top posts about Django",
            "url": "https://app.daily.dev/tags/django?ref=roadmapsh"
          }
        ]
      }
    },
    {
      "id": "HKsGyRzntjh1UbRZSWh_4",
      "name": "Flask",
      "resources": {
        "description": "# Flask\n\nFlask is a micro web framework written in Python. It is classified as a microframework because it does not require particular tools or libraries. It has no database abstraction layer, form validation, or any other components where pre-existing third-party libraries provide common functions. Instead, it provides flexibility by requiring you to choose and integrate the best libraries for your project's needs.",
        "resources": [
          {
            "type": "course",
            "title": "Flask Website",
            "url": "https://flask.palletsprojects.com/"
          },
          {
            "type": "course",
            "title": "Flask Tutorial",
            "url": "https://flask.palletsprojects.com/en/3.0.x/tutorial/"
          },
          {
            "type": "article",
            "title": "Explore top posts about Flask",
            "url": "https://app.daily.dev/tags/flask?ref=roadmapsh"
          }
        ]
      }
    },
    {
      "id": "u4nRzWQ4zhDFMOrZ2I_uJ",
      "name": "Concurrency",
      "resources": {
        "description": "# Concurrency\n\nConcurrency in Python allows multiple tasks to be executed simultaneously using different approaches. GIL (Global Interpreter Lock) limits thread execution, making multithreading less efficient for computational tasks, but suitable for I/O. Multiprocessing, using the multiprocessing module, allows multiple cores to be utilized, providing true parallelism. Asynchrony via asyncio is optimal for I/O operations, allowing thousands of connections to be processed simultaneously without blocking. The choice of approach depends on the nature of the task.\n\nLearn more about concurrency using the following resources:\n\n- [@official@Concurrent Execution](https://docs.python.org/3/library/concurrency.html)\n- [@article@Python Concurrency](https://realpython.com/python-concurrency/)",
        "resources": [
          {
            "type": "course",
            "title": "Concurrent Execution",
            "url": "https://docs.python.org/3/library/concurrency.html"
          },
          {
            "type": "article",
            "title": "Python Concurrency",
            "url": "https://realpython.com/python-concurrency/"
          }
        ]
      }
    },
    {
      "id": "bS7WeVKm2kEElu3sBKcIC",
      "name": "GIL",
      "resources": {
        "description": "# GIL\n\nGIL is a mechanism that allows only one thread to execute Python code at a time. This limitation is related to memory management in CPython and can reduce the efficiency of multithreaded applications on multi-core systems.\n\nLearn more about it using the following resources:\n\n- [@article@What is GIL?](https://realpython.com/python-gil/)",
        "resources": [
          {
            "type": "article",
            "title": "What is GIL?",
            "url": "https://realpython.com/python-gil/"
          }
        ]
      }
    },
    {
      "id": "UIx0XYaOgXXlYbbQtjiPq",
      "name": "Threading",
      "resources": {
        "description": "# Threading\n\nMultithreading allows multiple threads within a single process. However, because of GIL, threads cannot run in parallel on different cores, which makes multithreading suitable for I/O tasks (e.g., network requests) but not for computational tasks.",
        "resources": [
          {
            "type": "course",
            "title": "Python Threading Library",
            "url": "https://docs.python.org/3/library/threading.html"
          },
          {
            "type": "article",
            "title": "Introduction to Threading in Python",
            "url": "https://realpython.com/intro-to-python-threading/"
          }
        ]
      }
    },
    {
      "id": "HSY5OUc_M5S6OcFXPRtkx",
      "name": "Multiprocessing",
      "resources": {
        "description": "# Multiprocessing\n\nMultiprocessing utilizes multiple processes, each with its own GIL. This allows full utilization of multiple processor cores, which is effective for computationally intensive tasks. Python's multiprocessing module supports creating processes and exchanging data between them.\n\nLearn more about multiprocessing with the following resources:\n\n- [@official@Python Documentation](https://docs.python.org/3/library/multiprocessing.html)\n- [@article@Multiprocessing in Python with Example](https://www.digitalocean.com/community/tutorials/python-multiprocessing-example)\n- [@article@Multiprocessing in Python](https://realpython.com/python-multiprocessing/)",
        "resources": [
          {
            "type": "course",
            "title": "Python Documentation",
            "url": "https://docs.python.org/3/library/multiprocessing.html"
          },
          {
            "type": "article",
            "title": "Multiprocessing in Python with Example",
            "url": "https://www.digitalocean.com/community/tutorials/python-multiprocessing-example"
          },
          {
            "type": "article",
            "title": "Multiprocessing in Python",
            "url": "https://realpython.com/python-multiprocessing/"
          }
        ]
      }
    },
    {
      "id": "Mow7RvropbC4ZGDpcGZmw",
      "name": "Asynchrony",
      "resources": {
        "description": "# Asynchrony\n\nAsynchronous programming, supported by asyncio, allows code to be executed without blocking, using async and await. This is especially useful for I/O tasks such as networking or file manipulation, allowing thousands of connections to be handled without blocking the main thread.",
        "resources": [
          {
            "type": "course",
            "title": "Python AsyncIO library",
            "url": "https://docs.python.org/3/library/asyncio.html"
          },
          {
            "type": "article",
            "title": "Async IO in Python: A Complete Walkthrough",
            "url": "https://realpython.com/async-io-python/"
          }
        ]
      }
    },
    {
      "id": "p3Frfs6oxpuciUzeCEsvb",
      "name": "uv",
      "resources": {
        "description": "# uv\n\nuv is an \"extremely fast\" python package installer and resolver.",
        "resources": [
          {
            "type": "tutorial",
            "title": "astral-sh/uv",
            "url": "https://github.com/astral-sh/uv"
          }
        ]
      }
    },
    {
      "id": "GHKAY9gOykEbxkEeR30wL",
      "name": "pyproject.toml",
      "resources": {
        "description": "# pyproject.toml\n\nThis file is used to define the project configuration and dependencies. It is a configuration file that contains metadata about the project, such as its name, version, dependencies, and build settings. The `pyproject.toml` file is used by tools like `poetry` and `flit` to manage Python projects and their dependencies.",
        "resources": [
          {
            "type": "course",
            "title": "Writing pyproject.toml files",
            "url": "https://packaging.python.org/en/latest/guides/writing-pyproject-toml/"
          }
        ]
      }
    },
    {
      "id": "IWq-tfkz-pSC1ztZl60vM",
      "name": "Pipenv",
      "resources": {
        "description": "# pipenv\n\nPipeline Environment (pipenv) is a tool that aims to bring the best of all packaging worlds (bundled, requirements.txt, setup.py, setup.cfg, etc.) to the Python world. It automatically creates and manages a virtualenv for your projects, as well as adds/removes packages from your Pipfile as you install/uninstall packages. It also generates the ever-important Pipfile.lock, which is used to produce deterministic builds.",
        "resources": [
          {
            "type": "course",
            "title": "Pipenv Documentation",
            "url": "https://pipenv.pypa.io/en/latest/"
          }
        ]
      }
    },
    {
      "id": "_IXXTSwQOgYzYIUuKVWNE",
      "name": "virtualenv",
      "resources": {
        "description": "# virtualenv\n\n`virtualenv` is a tool to create isolated Python environments. It creates a folder which contains all the necessary executables to use the packages that a Python project would need.",
        "resources": [
          {
            "type": "course",
            "title": "Virtual Environments",
            "url": "https://virtualenv.pypa.io/en/latest/"
          }
        ]
      }
    },
    {
      "id": "N5VaKMbgQ0V_BC5tadV65",
      "name": "pyenv",
      "resources": {
        "description": "# pyenv\n\npyenv is a tool for managing multiple versions of the Python programming language on Unix-like systems. It works by setting environment variables to point to the directory where the desired version of Python is installed. This allows you to switch between different versions of Python without having to modify your system's default Python installation.",
        "resources": [
          {
            "type": "tutorial",
            "title": "pyenv/pyenv",
            "url": "https://github.com/pyenv/pyenv"
          }
        ]
      }
    },
    {
      "id": "1PXApuUpPmJjgi12cmWo4",
      "name": "Static Typing",
      "resources": {
        "description": "# Static Typing\n\nStatic typing can be a powerful tool to help you catch bugs before they happen. It can also help you understand the code you're working with, and make it easier to maintain and refactor.",
        "resources": [
          {
            "type": "course",
            "title": "Static Typing in Python",
            "url": "https://typing.readthedocs.io/en/latest/index.html"
          }
        ]
      }
    },
    {
      "id": "W3VALz5evFo1qqkQbMN1R",
      "name": "Pydantic",
      "resources": {
        "description": "# Pydantic\n\nPydantic is a python library for data validation and settings management using python type annotations.",
        "resources": [
          {
            "type": "course",
            "title": "Pydantic Documentation",
            "url": "https://docs.pydantic.dev/latest/"
          }
        ]
      }
    },
    {
      "id": "gIcJ3bUVQXqO1Wx4gUKd5",
      "name": "mypy",
      "resources": {
        "description": "# mypy\n\nmypy is an optional static type checker for Python that aims to combine the benefits of dynamic (or \"duck\") typing and static typing. Mypy combines the expressive power and convenience of Python with a powerful type system and compile-time type checking. Mypy type checks standard Python programs; run them using any Python VM with basically no runtime overhead.",
        "resources": [
          {
            "type": "course",
            "title": "mypy documentation",
            "url": "https://mypy-lang.org/"
          },
          {
            "type": "tutorial",
            "title": "python/mypy",
            "url": "https://github.com/python/mypy"
          }
        ]
      }
    },
    {
      "id": "1q9HWgu9jDTK757hTNOmE",
      "name": "pyright",
      "resources": {
        "description": "# pyright\n\npyright is a static type checker for Python. It is a Microsoft product and is written in TypeScript. It is a language server that uses the Language Server Protocol (LSP) to communicate with the editor. It is a good alternative to mypy and pytype.",
        "resources": [
          {
            "type": "course",
            "title": "Pyright Documentation",
            "url": "https://microsoft.github.io/pyright/"
          }
        ]
      }
    },
    {
      "id": "9mFR_ueXbIB2IrkqU2s85",
      "name": "pyre",
      "resources": {
        "description": "# pyre\n\npyre is a static type checker for Python. It is a tool that helps you find type errors in your Python code. Pyre is designed to be fast, scalable, and easy to use. It is used at Facebook to help developers catch type errors before they make it to production.",
        "resources": [
          {
            "type": "course",
            "title": "pyre Documentation",
            "url": "https://pyre-check.org/"
          }
        ]
      }
    },
    {
      "id": "0F0ppU_ClIUKZ23Q6BVZp",
      "name": "Code Formatting",
      "resources": {
        "description": "# Code Formatting\n\nPython code formatting is crucial for maintaining readability, consistency, and reducing errors. Black is a code formatter for Python. It is a tool that automatically formats Python code to adhere to the PEP 8 style guide. It is a great tool to use in your Python projects to ensure that your code is formatted consistently and correctly.",
        "resources": [
          {
            "type": "course",
            "title": "Pylint for Python",
            "url": "https://www.pylint.org/"
          },
          {
            "type": "course",
            "title": "Black Documentation",
            "url": "https://black.readthedocs.io/en/stable/"
          }
        ]
      }
    },
    {
      "id": "6cB0pvUO1-gvCtgqozP-Q",
      "name": "ruff",
      "resources": {
        "description": "# ruff\n\nAn extremely fast Python linter and code formatter, written in Rust.\n\n- [@official@Ruff documentation](https://docs.astral.sh/ruff/)",
        "resources": [
          {
            "type": "course",
            "title": "Ruff documentation",
            "url": "https://docs.astral.sh/ruff/"
          }
        ]
      }
    },
    {
      "id": "DS6nuAUhUYcqiJDmQisKM",
      "name": "black",
      "resources": {
        "description": "# black\n\nblack is a code formatter for Python. It is a tool that automatically formats Python code to adhere to the PEP 8 style guide. It is a great tool to use in your Python projects to ensure that your code is formatted consistently and correctly.\n\n- [@official@Getting Started with Black](https://black.readthedocs.io/en/stable/getting_started.html)\n- [@official@Black Documentation](https://black.readthedocs.io/en/stable/)",
        "resources": [
          {
            "type": "course",
            "title": "Getting Started with Black",
            "url": "https://black.readthedocs.io/en/stable/getting_started.html"
          },
          {
            "type": "course",
            "title": "Black Documentation",
            "url": "https://black.readthedocs.io/en/stable/"
          }
        ]
      }
    },
    {
      "id": "tsh_vbhzKz1-H9Vh69tsK",
      "name": "yapf",
      "resources": {
        "description": "# yapf\n\nyapf is a formatter for Python files. It is a tool that automatically formats Python code to conform to the PEP 8 style guide. It is similar to black but has more configuration options.",
        "resources": [
          {
            "type": "tutorial",
            "title": "google/yapf",
            "url": "https://github.com/google/yapf"
          }
        ]
      }
    },
    {
      "id": "maYNuTKYyZndxk1z29-UY",
      "name": "Sphinx",
      "resources": {
        "description": "# sphinx\n\nSphinx is a tool that makes it easy to create intelligent and beautiful documentation, written by Georg Brandl and licensed under the BSD license.",
        "resources": [
          {
            "type": "course",
            "title": "Sphinx Website",
            "url": "https://www.sphinx-doc.org/en/master/"
          }
        ]
      }
    },
    {
      "id": "_94NrQ3quc4t_PPOsFSN0",
      "name": "Common Packages",
      "resources": {
        "description": "# Common Packages and Modules\n\nPython has a rich ecosystem of packages and modules that can be used to get the most out of the language. A package is essentially a directory that contains multiple modules and subpackages. A module is a single file that contains a collection of related functions, classes, and variables. Modules are the basic building blocks of Python code organization. A module can be thought of as a container that holds a set of related code.",
        "resources": [
          {
            "type": "course",
            "title": "requests",
            "url": "https://docs.python-requests.org/en/latest/"
          },
          {
            "type": "course",
            "title": "pathlib",
            "url": "https://docs.python.org/3/library/pathlib.html"
          },
          {
            "type": "course",
            "title": "asyncio",
            "url": "https://docs.python.org/3/library/asyncio.html"
          },
          {
            "type": "course",
            "title": "dataclasses",
            "url": "https://docs.python.org/3/library/dataclasses.html"
          },
          {
            "type": "course",
            "title": "python-dotenv",
            "url": "https://pypi.org/project/python-dotenv/"
          },
          {
            "type": "course",
            "title": "numpy",
            "url": "https://numpy.org/doc/stable/"
          },
          {
            "type": "course",
            "title": "pandas",
            "url": "https://pandas.pydata.org/docs/"
          }
        ]
      }
    },
    {
      "id": "WQOYjuwKIWB2meea4JnsV",
      "name": "Testing",
      "resources": {
        "description": "# Testing\n\nTesting in programming means checking if your code works as expected. It's a systematic way to find and fix errors (bugs) before your code goes live. Imagine building a beautiful house without checking if the walls are straight or the roof doesn't leak—that's what coding without testing can feel like!",
        "resources": [
          {
            "type": "course",
            "title": "Unit Testing in Python",
            "url": "https://docs.python.org/3/library/unittest.html"
          },
          {
            "type": "article",
            "title": "Python Testing Tutorial",
            "url": "https://realpython.com/python-testing/"
          }
        ]
      }
    },
    {
      "id": "aVclygxoA9ePU5IxaORSH",
      "name": "doctest",
      "resources": {
        "description": "# Doctest\n\nPython’s standard library comes equipped with a test framework module called doctest. The doctest module programmatically searches Python code for pieces of text within comments that look like interactive Python sessions. Then, the module executes those sessions to confirm that the code referenced by a doctest runs as expected.",
        "resources": [
          {
            "type": "course",
            "title": "Doctest Module",
            "url": "https://docs.python.org/3/library/doctest.html"
          },
          {
            "type": "article",
            "title": "How To Write Doctests in Python",
            "url": "https://www.digitalocean.com/community/tutorials/how-to-write-doctests-in-python"
          }
        ]
      }
    },
    {
      "id": "SSnzpijHLO5_l7DNEoMfx",
      "name": "nose",
      "resources": {
        "description": "# Nose\n\nNose is another opensource testing framework that extends `unittest` to provide a more flexible testing framework. Note that Nose is no longer maintained and `pytest` is considered the replacement.",
        "resources": [
          {
            "type": "course",
            "title": "Introduction to Nose",
            "url": "https://nose.readthedocs.io/en/latest/"
          },
          {
            "type": "article",
            "title": "Getting Started With Nose In Python",
            "url": "https://www.lambdatest.com/blog/selenium-python-nose-tutorial/"
          }
        ]
      }
    },
    {
      "id": "3FDwJpesfelEyJrNWtm0V",
      "name": "pytest",
      "resources": {
        "description": "# pytest\n\npytest is a mature full-featured Python testing tool that helps you write better programs.",
        "resources": [
          {
            "type": "course",
            "title": "Pytest Docs",
            "url": "https://docs.pytest.org/"
          },
          {
            "type": "article",
            "title": "Pytest Tutorial",
            "url": "https://www.tutorialspoint.com/pytest/index.htm"
          },
          {
            "type": "article",
            "title": "Effective Python Testing With Pytest",
            "url": "https://realpython.com/pytest-python-testing/"
          },
          {
            "type": "article",
            "title": "Explore top posts about Python",
            "url": "https://app.daily.dev/tags/python?ref=roadmapsh"
          }
        ]
      }
    },
    {
      "id": "b4he_RO17C3ScNeUd6v2b",
      "name": "unittest / pyUnit",
      "resources": {
        "description": "# PyUnit / Unittest\n\nPyUnit is an easy way to create unit testing programs and UnitTests with Python. (Note that docs.python.org uses the name \"unittest\", which is also the module name.)",
        "resources": [
          {
            "type": "course",
            "title": "PyUnit Docs",
            "url": "https://wiki.python.org/moin/PyUnit%C2%A0"
          },
          {
            "type": "article",
            "title": "How To Use unittest to Write a Test Case for a Function in Python",
            "url": "https://www.digitalocean.com/community/tutorials/how-to-use-unittest-to-write-a-test-case-for-a-function-in-python"
          },
          {
            "type": "article",
            "title": "A Gentle Introduction to Unit Testing in Python",
            "url": "https://machinelearningmastery.com/a-gentle-introduction-to-unit-testing-in-python/"
          }
        ]
      }
    },
    {
      "id": "o1wi39VnjnFfWIC8XcuAK",
      "name": "typing",
      "resources": {
        "description": "# Typing\n\nTyping is a module in Python that provides runtime support for type hints. The typing module defines a standard set of names that can be used to describe types in the Python language. The typing module was added to the standard library in Python 3.5.\n\n- [@official@Typing Module](https://docs.python.org/3/library/typing.html)",
        "resources": [
          {
            "type": "course",
            "title": "Typing Module",
            "url": "https://docs.python.org/3/library/typing.html"
          }
        ]
      }
    },
    {
      "id": "jPFOiwbqfaGshaGDBWb5x",
      "name": "tox",
      "resources": {
        "description": "# Tox\n\nTox is a tool for automating test environment management and testing against multiple interpreter configurations. It is particularly useful for Python codebase that need to support multiple versions of Python.\n\nLearn more about tox from the following resources:\n\n- [@official@Tox Documentation](https://tox.wiki/en/)",
        "resources": [
          {
            "type": "course",
            "title": "Tox Documentation",
            "url": "https://tox.wiki/en/"
          }
        ]
      }
    }
  ],
  "edges": [
    {
      "source": "",
      "target": "GV_zWF6rSWg5bqgiXhOEf"
    },
    {
      "source": "",
      "target": "GV_zWF6rSWg5bqgiXhOEf"
    },
    {
      "source": "",
      "target": "GV_zWF6rSWg5bqgiXhOEf"
    },
    {
      "source": "hIQe_B-68ENL-GFg6GmnD",
      "target": "GISOFMKvnBys0O0IMpz2J"
    },
    {
      "source": "GISOFMKvnBys0O0IMpz2J",
      "target": "6xRncUs3_vxVbDur567QA"
    },
    {
      "source": "GISOFMKvnBys0O0IMpz2J",
      "target": "dEFLBGpiH6nbSMeR7ecaT"
    },
    {
      "source": "GISOFMKvnBys0O0IMpz2J",
      "target": "NP1kjSk0ujU0Gx-ajNHlR"
    },
    {
      "source": "GISOFMKvnBys0O0IMpz2J",
      "target": "Dvy7BnNzK55qbh_SgOk8m"
    },
    {
      "source": "GISOFMKvnBys0O0IMpz2J",
      "target": "R9DQNc0AyAQ2HLpP4HOk6"
    },
    {
      "source": "GISOFMKvnBys0O0IMpz2J",
      "target": "fNTb9y3zs1HPYclAmu_Wv"
    },
    {
      "source": "GISOFMKvnBys0O0IMpz2J",
      "target": "-DJgS6l2qngfwurExlmmT"
    },
    {
      "source": "GISOFMKvnBys0O0IMpz2J",
      "target": "UT_SR7G-LYtzqooWrEtF1"
    },
    {
      "source": "GISOFMKvnBys0O0IMpz2J",
      "target": "bc9CL_HMT-R6nXO1eR-gP"
    },
    {
      "source": "VJSIbYJcy2MC6MOFBrqXi",
      "target": "OPD4WdMO7q4gRZMcRCQh1"
    },
    {
      "source": "VJSIbYJcy2MC6MOFBrqXi",
      "target": "274uk28wzxn6EKWQzLpHs"
    },
    {
      "source": "P_Di-XPSDITmU3xKQew8G",
      "target": "qeCMw-sJ2FR4UxvU9DDzv"
    },
    {
      "source": "qeCMw-sJ2FR4UxvU9DDzv",
      "target": "uXd2B01GVBEQNXQE8RATT"
    },
    {
      "source": "GISOFMKvnBys0O0IMpz2J",
      "target": "VJSIbYJcy2MC6MOFBrqXi"
    },
    {
      "source": "7t6mJBsaFMWPi7o9fbhhq",
      "target": "P_Di-XPSDITmU3xKQew8G"
    },
    {
      "source": "0-ShORjGnQlAdcwjtxdEB",
      "target": "u4nRzWQ4zhDFMOrZ2I_uJ"
    },
    {
      "source": "P_Di-XPSDITmU3xKQew8G",
      "target": "AqwzR8dZKLQIoj_6KKZ3t"
    },
    {
      "source": "u4nRzWQ4zhDFMOrZ2I_uJ",
      "target": "HSY5OUc_M5S6OcFXPRtkx"
    },
    {
      "source": "1PXApuUpPmJjgi12cmWo4",
      "target": "W3VALz5evFo1qqkQbMN1R"
    },
    {
      "source": "0F0ppU_ClIUKZ23Q6BVZp",
      "target": "tsh_vbhzKz1-H9Vh69tsK"
    },
    {
      "source": "0F0ppU_ClIUKZ23Q6BVZp",
      "target": "DS6nuAUhUYcqiJDmQisKM"
    },
    {
      "source": "0F0ppU_ClIUKZ23Q6BVZp",
      "target": "6cB0pvUO1-gvCtgqozP-Q"
    },
    {
      "source": "jKeTTySc4iyJY29xLqNNQ",
      "target": "WQOYjuwKIWB2meea4JnsV"
    },
    {
      "source": "WQOYjuwKIWB2meea4JnsV",
      "target": "jPFOiwbqfaGshaGDBWb5x"
    },
    {
      "source": "WQOYjuwKIWB2meea4JnsV",
      "target": "b4he_RO17C3ScNeUd6v2b"
    },
    {
      "source": "WQOYjuwKIWB2meea4JnsV",
      "target": "aVclygxoA9ePU5IxaORSH"
    },
    {
      "source": "WQOYjuwKIWB2meea4JnsV",
      "target": "3FDwJpesfelEyJrNWtm0V"
    },
    {
      "source": "WQOYjuwKIWB2meea4JnsV",
      "target": "GV_zWF6rSWg5bqgiXhOEf"
    }
  ]
}