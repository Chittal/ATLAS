{
  "nodes": [
    {
      "id": "0EevuyZiyty3X3Jzpjl4y",
      "name": "Components",
      "resources": {
        "description": "# Components\n\nComponents allow us to split the UI into independent and reusable pieces, and think about each piece in isolation.",
        "resources": [
          {
            "type": "course",
            "title": "Components Basics",
            "url": "https://vuejs.org/guide/essentials/component-basics.html"
          },
          {
            "type": "course",
            "title": "Components in Depth",
            "url": "https://vuejs.org/guide/components/registration.html"
          }
        ]
      }
    },
    {
      "id": "y9ToYDix-koRbR6FLydFw",
      "name": "create-vue",
      "resources": {
        "description": "# create-vue\n\ncreate-vue is a CLI tool that helps you create a new Vue project with a single command. It is a simple and easy-to-use tool that saves you time and effort when setting up a new Vue project.\n\nLearn more using the following resources:\n\n- [@opensource@vuejs/create-vue](https://github.com/vuejs/create-vue)\n- [@official@Quick Start | Vue.js](https://vuejs.org/guide/quick-start.html)\n- [@feed@Explore top posts about Vue.js](https://app.daily.dev/tags/vuejs?ref=roadmapsh)",
        "resources": [
          {
            "type": "tutorial",
            "title": "vuejs/create-vue",
            "url": "https://github.com/vuejs/create-vue"
          },
          {
            "type": "course",
            "title": "Quick Start | Vue.js",
            "url": "https://vuejs.org/guide/quick-start.html"
          },
          {
            "type": "article",
            "title": "Explore top posts about Vue.js",
            "url": "https://app.daily.dev/tags/vuejs?ref=roadmapsh"
          }
        ]
      }
    },
    {
      "id": "VNBRlJkdH6NOOzGXUrbZK",
      "name": "Single File Components",
      "resources": {
        "description": "# Single File Components\n\nVue Single-File Components (a.k.a. `*.vue` files, abbreviated as SFC) is a special file format that allows us to encapsulate the template, logic, and styling of a Vue component in a single file.",
        "resources": [
          {
            "type": "course",
            "title": "Single File Components",
            "url": "https://vuejs.org/guide/scaling-up/sfc.html"
          }
        ]
      }
    },
    {
      "id": "2HhKifjuDcP3eKpanRMEQ",
      "name": "Component Registration",
      "resources": {
        "description": "# Component Registration\n\nA Vue component needs to be \"registered\" so that Vue knows where to locate its implementation when it is encountered in a template. There are two ways to register components: global and local.",
        "resources": [
          {
            "type": "course",
            "title": "Component Registration",
            "url": "https://vuejs.org/guide/components/registration.html"
          }
        ]
      }
    },
    {
      "id": "raEfI4GLMW2fOucka07VE",
      "name": "Props",
      "resources": {
        "description": "# Props\n\nIf we are building a blog, we will likely need a component representing a blog post. We want all the blog posts to share the same visual layout, but with different content. Such a component won't be useful unless you can pass data to it, such as the title and content of the specific post we want to display. That's where props come in.\n\nProps are custom attributes you can register on a component.",
        "resources": [
          {
            "type": "course",
            "title": "Props Basics",
            "url": "https://vuejs.org/guide/essentials/component-basics.html#passing-props"
          },
          {
            "type": "course",
            "title": "Props in Depth",
            "url": "https://vuejs.org/guide/components/props.html"
          }
        ]
      }
    },
    {
      "id": "X0J3ogH3W8EQe68tLfcGL",
      "name": "Events",
      "resources": {
        "description": "# Events\n\nAs we develop our applications we may need to communicate with the parent component in order to notify of some actions e.g. when a user clicks on a button. In order to do this we need to use events.",
        "resources": [
          {
            "type": "course",
            "title": "Listening to Events",
            "url": "https://vuejs.org/guide/essentials/component-basics.html#listening-to-events"
          },
          {
            "type": "course",
            "title": "Events in Detail",
            "url": "https://vuejs.org/guide/components/events.html"
          }
        ]
      }
    },
    {
      "id": "swpyZFUO4UO3mW8Bvf1Te",
      "name": "v-model",
      "resources": {
        "description": "# v-model\n\nv-model is a directive that allows you to create two-way data bindings on form input, textarea, and select elements. It automatically picks the correct way to update the element based on the input type.",
        "resources": [
          {
            "type": "course",
            "title": "Vue.js Guide",
            "url": "https://vuejs.org/guide/components/v-model.html#component-v-model"
          }
        ]
      }
    },
    {
      "id": "4S5fVFsFDMbq05ld7n0sF",
      "name": "Attribute Inheritance",
      "resources": {
        "description": "# Attribute Inheritance\n\nAttribute inheritance aka \"fallthrough attributes\" is a feature of Vue.js that allows you to inherit attributes from a parent component.",
        "resources": [
          {
            "type": "course",
            "title": "Fallthrough Attributes",
            "url": "https://vuejs.org/guide/components/attrs.html"
          }
        ]
      }
    },
    {
      "id": "VlcYnTHW5d4J_zLYupvu5",
      "name": "Templates",
      "resources": {
        "description": "# Templates\n\nVue uses an HTML-based template syntax that allows you to declaratively bind the rendered DOM to the underlying component instance's data. All Vue templates are syntactically valid HTML that can be parsed by spec-compliant browsers and HTML parsers.",
        "resources": [
          {
            "type": "course",
            "title": "Template Syntax",
            "url": "https://vuejs.org/guide/essentials/template-syntax.html"
          }
        ]
      }
    },
    {
      "id": "CGdw3PqLRb9OqFU5SqmE1",
      "name": "Directives",
      "resources": {
        "description": "# Directives\n\nDirectives are special attributes with the `v-` prefix. Vue provides a number of built-in directives.",
        "resources": [
          {
            "type": "course",
            "title": "Directives Documentation",
            "url": "https://vuejs.org/guide/essentials/template-syntax.html#directives"
          },
          {
            "type": "course",
            "title": "Built-in Directives",
            "url": "https://vuejs.org/api/built-in-directives.html"
          }
        ]
      }
    },
    {
      "id": "OpJ2NMKCGXQezpzURE45R",
      "name": "API Styles",
      "resources": {
        "description": "# API Styles\n\nThough Vue 2 supported many approaches to writing components, only one approach, the \"Options API\", was built in and accessible without plugins. Vue 3, retains the Options API (OAPI), and adds in the Composition API (CAPI). Composition API itself is actually a part of the Options API, but moves most of the component logic into a setup function. This led to a 3rd approach to writing components being built in called \"script/setup\", which removes much of the boilerplate from Composition API. These approaches are not mutually exclusive. Each component in your project can use any of these approaches, however for consistency it is recommended to stick primarily to one, and only deviate to one of the others when you have a good reason.",
        "resources": [
          {
            "type": "article",
            "title": "The Difference Between the Composition API and Options API in Vue",
            "url": "https://fjolt.com/article/vue-composition-api-vs-options-api"
          }
        ]
      }
    },
    {
      "id": "PPUU3Rb73aCpT4zcyvlJE",
      "name": "Options API",
      "resources": {
        "description": "# Options API\n\nVue offers many approaches for how to write components, including the Options API. It is the only API that is available in all versions of Vue. Its primary focus is on providing a consistent, clean, and organized aproach to writing component logic. Each part of a component's logic is given a dedicated section (data, methods, computed, props, life-cycle hooks, etc). By putting the logic in the correct section it has access to the features of the framework automatically. With the official Vue ESLint plugin the order of these sections can be enforced across all components allowing developers to predicatably locate any part of the component, even if they've never looked at the file before.",
        "resources": [
          {
            "type": "course",
            "title": "TypeScript with Options API",
            "url": "https://vuejs.org/guide/typescript/options-api.html"
          },
          {
            "type": "course",
            "title": "Options API Documentation",
            "url": "https://vuejs.org/api/#options-api"
          }
        ]
      }
    },
    {
      "id": "a0qwdQTunxEjQ9A5wpF-q",
      "name": "Composition API",
      "resources": {
        "description": "# Composition API\n\nVue offers many approaches for how to write components, including the \"Composition API\", which is most commonly used via \"Script Setup\". This approach is based around pulling in low level atomic functions used by Vue's reactivity engine. By composing these low level functions together, you can craft your own system for writing components. One feature this allows for is extending reactivity outside of components. This means you can extract your custom functions for reuse in multiple components. When reusing reactive logic, your functions are called \"composables\".",
        "resources": [
          {
            "type": "course",
            "title": "TypeScript with Composition API",
            "url": "https://vuejs.org/guide/typescript/composition-api.html"
          },
          {
            "type": "course",
            "title": "Composition API FAQ",
            "url": "https://vuejs.org/guide/extras/composition-api-faq.html"
          },
          {
            "type": "course",
            "title": "Composition API",
            "url": "https://vuejs.org/api/#composition-api"
          },
          {
            "type": "article",
            "title": "Vue 3 Composition API",
            "url": "https://www.thisdot.co/blog/vue-3-composition-api-ref-and-reactive"
          },
          {
            "type": "article",
            "title": "Explore top posts about Vue.js",
            "url": "https://app.daily.dev/tags/vuejs?ref=roadmapsh"
          }
        ]
      }
    },
    {
      "id": "qRm08uDZW-D8QDc-9sPX8",
      "name": "App Configurations",
      "resources": {
        "description": "# App Configurations\n\nEvery application instance exposes a `config` object that contains the configuration settings for that application. You can modify its properties before mounting your application.",
        "resources": [
          {
            "type": "course",
            "title": "Vue.js Documentation",
            "url": "https://vuejs.org/api/application.html#app-config"
          }
        ]
      }
    },
    {
      "id": "ftqDoGpwqqWQnu4NQSsMk",
      "name": "Rendering Lists",
      "resources": {
        "description": "# Rendering Lists\n\nWe can use the `v-for` directive to render a list of items based on an array. The `v-for` directive requires a special syntax in the form of `item in items`, where `items` is the source data array and `item` is an alias for the array element being iterated on.",
        "resources": [
          {
            "type": "course",
            "title": "Rendering Lists in Vue.js",
            "url": "https://vuejs.org/guide/essentials/list.html"
          }
        ]
      }
    },
    {
      "id": "1oIt_5OK-t2WaCgaYt9A8",
      "name": "Error / Warn Handler",
      "resources": {
        "description": "# Error / Warn Handler\n\nDebugging in Vue.js involves identifying and fixing issues in your Vue applications. It’s an essential part of the development process, and there are several tools and techniques you can use to effectively debug your Vue code.",
        "resources": [
          {
            "type": "course",
            "title": "Debugging Documentation",
            "url": "https://vuejs.org/v2/cookbook/debugging-in-vscode.html"
          }
        ]
      }
    },
    {
      "id": "gihxGgt177BK_EYsAfpx9",
      "name": "Global Properties",
      "resources": {
        "description": "# Global Properties\n\nGlobal properties allows you to add properties or methods that can be accessed throughout your application. This is particularly useful for sharing functionality or data across components without the need to pass props explicitly.",
        "resources": [
          {
            "type": "course",
            "title": "Application API - globalProperties",
            "url": "https://vuejs.org/api/application.html#app-config-globalproperties"
          },
          {
            "type": "article",
            "title": "Vue.js Global Properties",
            "url": "https://blog.logrocket.com/vue-js-globalproperties/"
          }
        ]
      }
    },
    {
      "id": "f7N4pAp_jBlT8_8owAcbG",
      "name": "Performance",
      "resources": {
        "description": "# Vue.js Performance Optimization Overview\n\nKey areas to improve Vue.js performance include lazy loading components to minimize initial load times, optimizing rendering to prevent unnecessary re-renders, implementing efficient state management using modern libraries like Pinia, reducing the bundle size by code splitting and tree shaking, utilizing virtual scrolling for large lists and tables, continuously monitoring performance to detect potential bottlenecks, and minimizing dependencies to decrease overall load.",
        "resources": [
          {
            "type": "article",
            "title": "How to Optimize Performance in Vue.js Applications: Beginner to Advanced Guide",
            "url": "https://dev.to/delia_code/how-to-optimize-performance-in-vuejs-applications-beginner-to-advanced-guide-53db"
          },
          {
            "type": "article",
            "title": "Vue Directives Basics",
            "url": "https://vuejs.org/guide/best-practices/performance.html"
          },
          {
            "type": "article",
            "title": "Pinia Documentation",
            "url": "https://pinia.vuejs.org/"
          },
          {
            "type": "article",
            "title": "Webpack Documentation",
            "url": "https://webpack.js.org/"
          },
          {
            "type": "article",
            "title": "Vue Virtual Scroller",
            "url": "https://github.com/Akryum/vue-virtual-scroller"
          },
          {
            "type": "article",
            "title": "Vue Devtools Documentation",
            "url": "https://devtools.vuejs.org/"
          },
          {
            "type": "article",
            "title": "Vue Best Practices",
            "url": "https://vuejs.org/guide/best-practices/overview.html"
          }
        ]
      }
    },
    {
      "id": "tU4Umtnfu01t9gLlnlK6b",
      "name": "Conditional Rendering",
      "resources": {
        "description": "# Conditional Rendering\n\nThe directive `v-if` is used to conditionally render a block. The block will only be rendered if the directive's expression returns a truthy value.",
        "resources": [
          {
            "type": "course",
            "title": "Conditional Rendering",
            "url": "https://vuejs.org/guide/essentials/conditional.html"
          }
        ]
      }
    },
    {
      "id": "NCIzs3jbQTv1xXhAaGfZN",
      "name": "v-text",
      "resources": {
        "description": "# v-text\n\nThe `v-text` directive is used to set the textContent property of an element. It's important to note that when using this directive it will overwrite the HTML content inside the element.\nThe expected input is a string, so it's important to wrap any text in single quotes.\n\n## Example\n\n```html\n<template>\n  <p v-text=\"'I am some text'\"></p>\n</template>\n```",
        "resources": [
          {
            "type": "course",
            "title": "v-text Documentation",
            "url": "https://vuejs.org/api/built-in-directives.html#v-text"
          }
        ]
      }
    },
    {
      "id": "bZxtIBeIfeUcR32LZWrPW",
      "name": "v-html",
      "resources": {
        "description": "# v-html\n\nThe `v-html` directive is similar to the `v-text` directive, but the difference is that `v-html` renders its content as HTML. This means that if you pass an HTML element it will be rendered as an element and not plain text. Since the content is render as HTML, it can pose a security risk if the content contains malicious JavaScript code. For this reason you should never use this directive in combination with user input, unless the input is first properly sanitized.\n\n## Example\n\n```html\n<template>\n  <p v-html=\"'<h1>Text</h1>'\"></p>\n</template>\n```",
        "resources": [
          {
            "type": "course",
            "title": "v-html Documentation",
            "url": "https://vuejs.org/api/built-in-directives.html#v-html"
          }
        ]
      }
    },
    {
      "id": "_TlbGTKFCMO0wdLbC6xHX",
      "name": "v-show",
      "resources": {
        "description": "# v-show\n\n`v-show` is similar to `v-if` in that it allows you to conditionally render components. However, it does not remove the component from the DOM and merely toggles its `display` CSS property to be `hidden`. It also does not work with `v-else-if` oe `v-else`. Prefer `v-show` over `v-if` if the component's visibility needs to change often, and `v-if` if not.",
        "resources": [
          {
            "type": "course",
            "title": "Vue Conditional Rendering",
            "url": "https://vuejs.org/guide/essentials/conditional.html#v-show"
          }
        ]
      }
    },
    {
      "id": "xHj3W9Ig3MVuVlGyXchaP",
      "name": "v-if",
      "resources": {
        "description": "# v-if\n\nConditionally render an element or a template fragment based on the truthy-ness of the expression value. When a `v-if` element is toggled, the element and its contained directives / components are destroyed and re-constructed. If the initial condition is falsy, then the inner content won't be rendered at all.\n\n## Example\n\n```html\n<h1 v-if=\"awesome\">Vue is awesome!</h1>\n```",
        "resources": [
          {
            "type": "course",
            "title": "v-if Documentation",
            "url": "https://vuejs.org/api/built-in-directives.html#v-if"
          }
        ]
      }
    },
    {
      "id": "0CtAZQcFJexMiJfZ-mofv",
      "name": "v-else",
      "resources": {
        "description": "# v-else\n\nThe `v-else` conditionally renders an element or a template fragment as a function in case the `v-if` does not fulfil the condition.",
        "resources": [
          {
            "type": "course",
            "title": "v-else Documentation",
            "url": "https://vuejs.org/api/built-in-directives.html#v-else"
          }
        ]
      }
    },
    {
      "id": "a9caVhderJaVo0v14w8WB",
      "name": "v-else-if",
      "resources": {
        "description": "# v-else-if\n\nThis directive is used to add additional conditions to a v-if and v-else block.",
        "resources": [
          {
            "type": "course",
            "title": "v-else-if Documentation",
            "url": "https://vuejs.org/api/built-in-directives.html#v-else-if"
          }
        ]
      }
    },
    {
      "id": "3ftwRjQ9e1-qDT9BV53zr",
      "name": "v-for",
      "resources": {
        "description": "# v-for\n\nThe `v-for` directive is used to render an HTML element, a block of elements, or even a component based on an array, an object, or a set number of times.\nWhen using this directive it is important to assign a unique key to each item to avoid issues and improve performance. This directive follows the `item in items` syntax.\n\n## Example\n\n```html\n<script setup>\n  import { ref } from 'vue';\n  const foods = ref([\n    {id: 1, name: \"apple\"},\n    {id: 2, name: \"pear\"},\n    {id: 3, name: \"pizza\"}\n  ]);\n</script>\n\n<template>\n  <p v-for=\"food in foods\" :key=\"food.id\">{{ food.name }}</p>\n</template>\n```",
        "resources": [
          {
            "type": "course",
            "title": "v-for Documentation",
            "url": "https://vuejs.org/guide/essentials/list#v-for"
          }
        ]
      }
    },
    {
      "id": "hVuRmhXVP65IPtuHTORjJ",
      "name": "v-on",
      "resources": {
        "description": "# v-on\n\nThe v-on directive is placed on an element to attach an event listener. To attach an event listener with v-on we need to provide the event type, and any modifier, and a method or expression that should run when that event occurs.",
        "resources": [
          {
            "type": "course",
            "title": "v-on Documentation",
            "url": "https://vuejs.org/api/built-in-directives.html#v-on"
          }
        ]
      }
    },
    {
      "id": "cuM9q9vYy8JpZPGeBffd1",
      "name": "v-bind",
      "resources": {
        "description": "# v-bind\n\nThe `v-bind` directive dynamically binds an HTML attribute to data. The shorthand for this directive is `:`\n\n## Example\n\n```html\n<script setup>\n  import { ref } from 'vue';\n  const image_url = ref(\"path/to/image.png\")\n</script>\n\n<template>\n  <img :src=\"image_url\" />\n</template>\n```",
        "resources": [
          {
            "type": "course",
            "title": "v-bind Documentation",
            "url": "https://vuejs.org/api/built-in-directives.html#v-bind"
          }
        ]
      }
    },
    {
      "id": "cxu2Wbt306SxM4JKQQqnL",
      "name": "v-model",
      "resources": {
        "description": "# v-model\n\nThe v-model directive in Vue.js is used for creating two-way data bindings on form input elements, such as `<input>`, `<textarea>`, and `<select>`. This means that the data can be updated in the component when the user inputs something, and the UI will update if the data in the component changes.\n\n- [@official@Form Input Bindings](https://vuejs.org/guide/essentials/forms.html)",
        "resources": [
          {
            "type": "course",
            "title": "Form Input Bindings",
            "url": "https://vuejs.org/guide/essentials/forms.html"
          }
        ]
      }
    },
    {
      "id": "m9pQ3daR3KiwRATcQysHA",
      "name": "v-slot",
      "resources": {
        "description": "# v-slot\n\nThe v-slot directive to define slots in components, allowing you to pass and render content dynamically inside a component.\n\nFor named slots, you use v-slot with a specific slot name. This lets you pass different content to different parts of a component:\n\n```html\n<template>\n  <custom-component>\n    <template v-slot:header>\n      <h1>Header Content</h1>\n    </template>\n    <template v-slot:footer>\n      <p>Footer Content</p>\n    </template>\n  </custom-component>\n</template>\n```\n\nThe shorthand for `v-slot` is `#`, for example `v-slot:header` becomes `#header`.",
        "resources": [
          {
            "type": "course",
            "title": "v-slot documentation",
            "url": "https://vuejs.org/api/built-in-directives.html#v-slot"
          }
        ]
      }
    },
    {
      "id": "5k9CrbzhNy9iiS6ez2UE6",
      "name": "v-once",
      "resources": {
        "description": "# v-once\n\nThe `v-once` directive makes an HTML element render only once, skipping every future update.\n\n## Example\n\n```html\n<script setup>\n  import { ref } from 'vue';\n  const input = ref(\"Some Text\");\n</script>\n\n<template>\n  <input v-model=\"input\">\n  <p v-once>{{ input }}</p>\n</template>\n```\n\nIn this example the **p** element will not change its text even if the input variable is changed through the **input** element.",
        "resources": [
          {
            "type": "course",
            "title": "v-once Documentation",
            "url": "https://vuejs.org/api/built-in-directives.html#v-once"
          }
        ]
      }
    },
    {
      "id": "mlsrhioiEkqnRIL6O3hNa",
      "name": "v-pre",
      "resources": {
        "description": "# v-pre\n\nThe `v-pre` directive makes an element render its content as-is, skipping its compilation. The most common use case is when displaying raw mustache syntax.\n\n## Example\n\n```html\n<script setup>\n  import { ref } from 'vue';\n  const text = ref(\"Some Text\")\n</script>\n\n<template>\n  <p v-pre >{{ text }}</p>\n</template>\n```\n\nThe **p** element will display: `{{ text }}` and not `Some Text` because the compilation is skipped.",
        "resources": [
          {
            "type": "course",
            "title": "v-pre Documentation",
            "url": "https://vuejs.org/api/built-in-directives.html#v-pre"
          }
        ]
      }
    },
    {
      "id": "RrSekP8Ub01coegMwLP6a",
      "name": "v-cloak",
      "resources": {
        "description": "# v-cloak\n\nThe v-cloak directive is used to prevent the uncompiled Vue template from being visible while the Vue instance is still loading. It temporarily hides the content until Vue has finished compiling the template. The v-cloak directive remains until the component instance is mounted.\n\n```html\n<div v-cloak>\n  {{ message }}\n</div>\n```\n\nCombined with CSS, you can hide elements with v-cloak until they are ready.\n\n```css\n[v-cloak] {\n  display: none;\n}\n```\n\nThe `<div>` will not be visible until the compilation is done.",
        "resources": [
          {
            "type": "course",
            "title": "v-cloak Documentation",
            "url": "https://vuejs.org/api/built-in-directives.html#v-cloak"
          }
        ]
      }
    },
    {
      "id": "RRPhAxIqvAcjZIcLe_N8-",
      "name": "Optimizing Renders",
      "resources": {
        "description": "# Optimizing Renders\n\nOptimizing rendering is crucial for ensuring a smooth and efficient user experience across all your frontend projects. Sluggish webpages can lead to frustration for users, and potentially cause them to entirely abandon your web application. This issue comes up most often in single-page applications (SPAs), where the entirety of your application is loaded within a single webpage, and updates to it are handled dynamically without needing a full reload of the webpage.",
        "resources": [
          {
            "type": "article",
            "title": "Optimizing Rendering in Vue",
            "url": "https://blog.logrocket.com/optimizing-rendering-vue/"
          }
        ]
      }
    },
    {
      "id": "dxwKfBxd5KYVkfEPMdHp-",
      "name": "Debugging",
      "resources": {
        "description": "# Debugging\n\nDebugging in Vue.js involves identifying and fixing issues in your Vue applications. It’s an essential part of the development process, and there are several tools and techniques you can use to effectively debug your Vue code.",
        "resources": [
          {
            "type": "course",
            "title": "Debugging Documentation",
            "url": "https://vuejs.org/v2/cookbook/debugging-in-vscode.html"
          }
        ]
      }
    },
    {
      "id": "WiGG9_4G5y-AVA9byw6_g",
      "name": "Lifecycle Hooks",
      "resources": {
        "description": "# Lifecycle Hooks\n\nEach Vue component instance goes through a series of initialization steps when it's created - for example, it needs to set up data observation, compile the template, mount the instance to the DOM, and update the DOM when data changes. Along the way, it also runs functions called lifecycle hooks, giving users the opportunity to add their own code at specific stages.",
        "resources": [
          {
            "type": "course",
            "title": "Life Cycle Hooks",
            "url": "https://vuejs.org/guide/essentials/lifecycle.html"
          },
          {
            "type": "article",
            "title": "The Lifecycles of Vue.js",
            "url": "https://dev.to/amolikvivian/the-lifecycles-of-vue-js-lhh"
          },
          {
            "type": "article",
            "title": "Explore top posts about React Hooks",
            "url": "https://app.daily.dev/tags/react-hooks?ref=roadmapsh"
          }
        ]
      }
    },
    {
      "id": "PQu4TyJOfCEaafW5th0e4",
      "name": "Forms Handling",
      "resources": {
        "description": "# Forms Handling\n\nYou can use the `v-model` directive to create two-way data bindings on form input elements. It automatically picks the correct way to update the element based on the input type.",
        "resources": [
          {
            "type": "course",
            "title": "Form Input Bindings",
            "url": "https://vuejs.org/guide/essentials/forms.html"
          },
          {
            "type": "video",
            "title": "Vue JS 3 Tutorial - Form Handling",
            "url": "https://www.youtube.com/watch?v=T-AE-GtSlN4"
          },
          {
            "type": "article",
            "title": "A complete guide to forms in Vue.js",
            "url": "https://blog.logrocket.com/an-imperative-guide-to-forms-in-vue-js-2/"
          }
        ]
      }
    },
    {
      "id": "NfB3HlZ3uwYK5xszvV50b",
      "name": "Input Bindings",
      "resources": {
        "description": "# Input Bindings\n\nInput bindings are a way to bind user input to a component's data. This allows the component to react to user input and update its state accordingly. Input bindings are typically used with form elements such as text inputs, checkboxes, and select dropdowns.",
        "resources": [
          {
            "type": "course",
            "title": "Input Bindings",
            "url": "https://vuejs.org/guide/essentials/forms"
          }
        ]
      }
    },
    {
      "id": "gMFndBcrTC6FtGryqN6dX",
      "name": "v-model",
      "resources": {
        "description": "# v-model\n\nThe v-model directive in Vue.js is used for creating two-way data bindings on form input elements, such as `<input>`, `<textarea>`, and `<select>`. This means that the data can be updated in the component when the user inputs something, and the UI will update if the data in the component changes.\n\n- [@official@Form Input Bindings](https://vuejs.org/guide/essentials/forms.html)",
        "resources": [
          {
            "type": "course",
            "title": "Form Input Bindings",
            "url": "https://vuejs.org/guide/essentials/forms.html"
          }
        ]
      }
    },
    {
      "id": "dSfrFLr8wKkLAOMJwtCTr",
      "name": "Modifiers",
      "resources": {
        "description": "# Modifiers\n\nModifiers are special suffixes that can be added to directives (such as v-model and v-bind) to alter their behavior. Modifiers allow you to specify additional functionality or constraints to the binding, making it more flexible and powerful.",
        "resources": [
          {
            "type": "course",
            "title": "Modifiers",
            "url": "https://vuejs.org/guide/essentials/forms.html#modifiers"
          }
        ]
      }
    },
    {
      "id": "4p6Gh2fMPA8hls_mWa5HR",
      "name": "Event Handling",
      "resources": {
        "description": "# Events Handling\n\nWhen you build a dynamic website with Vue you'll most likely want it to be able to respond to events. For example, if a user clicks a button, submits a form, or even just moves their mouse, you may want your Vue site to respond somehow.",
        "resources": [
          {
            "type": "course",
            "title": "Event Handling in Vue.js",
            "url": "https://vuejs.org/guide/essentials/event-handling.html"
          }
        ]
      }
    },
    {
      "id": "b7iXwtUnELg_ShbCyTrNA",
      "name": "Binding Events",
      "resources": {
        "description": "# Binding Events\n\nVue.js is an open-source Model–View–ViewModel front-end JavaScript framework for building user interfaces and single-page applications. Vue.js has many own directives for DOM manipulation such as v-bind, v-on, v-model, etc. Binding events is an essential part of creating interactive applications. You can bind events using the v-on directive or its shorthand, the @ symbol.",
        "resources": [
          {
            "type": "course",
            "title": "Binding Events",
            "url": "https://vuejs.org/guide/essentials/event-handling"
          }
        ]
      }
    },
    {
      "id": "gVahaZNPktQuqdukFEbQH",
      "name": "Inline / Method Handlers",
      "resources": {
        "description": "# Inline / Method Handlers\n\nIn Vue.js, **inline handlers** are defined directly in the template using expressions, making them suitable for simple tasks. For example, you might use an inline handler to increment a counter. **Method handlers**, on the other hand, are defined in the `methods` option and are better for more complex logic or when reusing functionality across multiple components. They improve code readability and maintainability.",
        "resources": [
          {
            "type": "course",
            "title": "Inline Handlers",
            "url": "https://vuejs.org/guide/essentials/event-handling#inline-handlers"
          },
          {
            "type": "course",
            "title": "Method Handlers",
            "url": "https://vuejs.org/guide/essentials/event-handling#method-handlers"
          }
        ]
      }
    },
    {
      "id": "Aaf7eA-5sbAD5Cs1MbdTQ",
      "name": "Event Modifiers",
      "resources": {
        "description": "# Event Modifiers\n\nIn Vue.js, event modifiers are special postfixes that you can add to event handlers to control the behavior of events more easily. They help simplify common tasks such as stopping propagation, preventing default actions, and ensuring that the event is triggered only under certain conditions.",
        "resources": [
          {
            "type": "course",
            "title": "Event Modifiers",
            "url": "https://vuejs.org/guide/essentials/event-handling#event-modifiers"
          },
          {
            "type": "article",
            "title": "Event Modifiers in Vue.js",
            "url": "https://www.freecodecamp.org/news/how-event-handling-works-in-vue-3-guide-for-devs/"
          }
        ]
      }
    },
    {
      "id": "BXw36wqhmi3gExXwFCIBd",
      "name": "Key Modifiers",
      "resources": {
        "description": "# Key Modifiers\n\nInput bindings are a way to bind user input to a component's data. This allows the component to react to user input and update its state accordingly. Input bindings are typically used with form elements such as text inputs, checkboxes, and select dropdowns.",
        "resources": [
          {
            "type": "course",
            "title": "Key Modifiers",
            "url": "https://vuejs.org/guide/essentials/event-handling#key-modifiers"
          }
        ]
      }
    },
    {
      "id": "x0wl2Qz2LTP4Q2tThKAt3",
      "name": "Mouse Button Modifiers",
      "resources": {
        "description": "# Mouse Button Modifiers\n\nMouse button modifiers are a type of modifier that can be used with event handlers to specify which mouse button or buttons should trigger the event. These modifiers allow you to customize the behavior of event handlers, such as v-on:click, to respond to specific mouse button clicks.",
        "resources": [
          {
            "type": "course",
            "title": "Mouse Button Modifiers",
            "url": "https://vuejs.org/guide/essentials/event-handling#mouse-button-modifiers"
          },
          {
            "type": "article",
            "title": "Button Modifiers",
            "url": "https://medium.com/evolve-you/vue-3-keyboard-and-mouse-a4866d7d0e8"
          }
        ]
      }
    },
    {
      "id": "Bx1Atxcf15AEaA1BiSIc6",
      "name": "Computed Properties",
      "resources": {
        "description": "# Computed Properties\n\nIn-template expressions are very convenient, but they are meant for simple operations. Putting too much logic in your templates can make them bloated and hard to maintain. Computed properties allow us to simplify the complex logic that includes reactive data.",
        "resources": [
          {
            "type": "course",
            "title": "Computed Properties",
            "url": "https://vuejs.org/guide/essentials/computed.html#computed-properties"
          }
        ]
      }
    },
    {
      "id": "Re7tv1U0LxYqE5ShFxQSf",
      "name": "Async Components",
      "resources": {
        "description": "# Async Components\n\nIn large applications, we may need to divide the app into smaller chunks and only load a component from the server when it's needed. To make that possible, Vue has a `defineAsyncComponent` function.",
        "resources": [
          {
            "type": "course",
            "title": "Async Components",
            "url": "https://vuejs.org/guide/components/async.html"
          }
        ]
      }
    },
    {
      "id": "SGsd08ZTu4H76s8cfbCKe",
      "name": "Teleport Components",
      "resources": {
        "description": "# Teleport Components\n\nSometimes we may run into the following scenario: a part of a component's template belongs to it logically, but from a visual standpoint, it should be displayed somewhere else in the DOM, outside of the Vue application. This is where the `<Teleport>` component comes in.",
        "resources": [
          {
            "type": "course",
            "title": "Teleport Components",
            "url": "https://vuejs.org/guide/built-ins/teleport.html"
          }
        ]
      }
    },
    {
      "id": "xwVbhOpQMPPB4G-lhro0B",
      "name": "Provide / Inject",
      "resources": {
        "description": "# Provide / Inject\n\nUsually, when we need to pass data from the parent to a child component, we use props. However, imagine the case where we have a large component tree, and a deeply nested component needs something from a distant ancestor component. With only props, we would have to pass the same prop across the entire parent chain. We can solve props drilling with `provide` and `inject`.",
        "resources": [
          {
            "type": "course",
            "title": "Provide / Inject in Vue.js",
            "url": "https://vuejs.org/guide/components/provide-inject.html"
          }
        ]
      }
    },
    {
      "id": "br1r8KIf5KInY5mk2xhA6",
      "name": "Custom Directives",
      "resources": {
        "description": "# Custom Directives\n\nSo far you may have covered two forms of code reuse in Vue: components and composables. Components are the main building blocks, while composables are focused on reusing stateful logic. Custom directives, on the other hand, are mainly intended for reusing logic that involves low-level DOM access on plain elements.",
        "resources": [
          {
            "type": "course",
            "title": "Custom Directives",
            "url": "https://vuejs.org/guide/reusability/custom-directives.html"
          },
          {
            "type": "course",
            "title": "Composables",
            "url": "https://vuejs.org/guide/reusability/composables.html"
          },
          {
            "type": "course",
            "title": "Components",
            "url": "https://vuejs.org/guide/essentials/component-basics.html"
          }
        ]
      }
    },
    {
      "id": "_Nc8ivQrdpKuf8MwaV-K7",
      "name": "Plugins",
      "resources": {
        "description": "# Plugins\n\nPlugins are self-contained code that usually add app-level functionality to Vue.",
        "resources": [
          {
            "type": "course",
            "title": "Plugins in Vue.js",
            "url": "https://vuejs.org/guide/reusability/plugins.html"
          },
          {
            "type": "article",
            "title": "How to Write Your Own Vue.js Plugin",
            "url": "https://www.linode.com/docs/guides/how-to-write-vue-js-plugins/"
          }
        ]
      }
    },
    {
      "id": "kdlXhbw_a81xdZtyK-pVa",
      "name": "Watchers",
      "resources": {
        "description": "# Watchers\n\nComputed properties allow us to declaratively compute derived values. However, there are cases where we need to perform \"side effects\" in reaction to state changes - for example, mutating the DOM, or changing another piece of state based on the result of an async operation. With Composition API, we can use the watch function to trigger a callback whenever a piece of reactive state changes.",
        "resources": [
          {
            "type": "course",
            "title": "Watchers in Vue.js",
            "url": "https://vuejs.org/guide/essentials/watchers.html"
          }
        ]
      }
    },
    {
      "id": "jkX66izOHVWqtyd6KZ0K6",
      "name": "Slots",
      "resources": {
        "description": "# Slots\n\nIn some cases, we may want to pass a template fragment to a child component, and let the child component render the fragment within its own template. The `<slot>` element is a slot outlet that indicates where the parent-provided slot content should be rendered.",
        "resources": [
          {
            "type": "course",
            "title": "Slots in Vue.js",
            "url": "https://vuejs.org/guide/components/slots.html"
          }
        ]
      }
    },
    {
      "id": "SWpWg5J5N9ZfY_DaIigA5",
      "name": "Transition",
      "resources": {
        "description": "# Transition\n\nVue offers two built-in components that can help work with transitions and animations in response to changing state:\n\n- `<Transition>` for applying animations when an element or component is entering and leaving the DOM. This is covered on this page.\n- `<TransitionGroup>` for applying animations when an element or component is inserted into, removed from, or moved within a `v-for` list. This is covered in the next chapter.",
        "resources": [
          {
            "type": "course",
            "title": "Transition Component",
            "url": "https://vuejs.org/guide/built-ins/transition.html#transition"
          }
        ]
      }
    },
    {
      "id": "HjzOYjS-7ZEBvElRJ8uN2",
      "name": "Transition Group",
      "resources": {
        "description": "# Transition Group\n\n`<TransitionGroup>` is a built-in component designed for animating the insertion, removal, and order change of elements or components that are rendered in a list.",
        "resources": [
          {
            "type": "course",
            "title": "TransitionGroup Component",
            "url": "https://vuejs.org/guide/built-ins/transition-group.html"
          }
        ]
      }
    },
    {
      "id": "Z9szBPFXfqK_KsvzkR-rf",
      "name": "VueUse",
      "resources": {
        "description": "# VueUse\n\nVueUse is a collection of utility functions based on Composition API. It has over 200+ functions, is tree-shakable, has first-class TypeScript support, and has a small bundle size. VueUse is a great choice for adding common utilities to your Vue 3 projects.",
        "resources": [
          {
            "type": "course",
            "title": "VueUse",
            "url": "https://vueuse.org/"
          }
        ]
      }
    },
    {
      "id": "ixRG0xfEp4BmyvCR0mtoR",
      "name": "Routing",
      "resources": {
        "description": "# Routing\n\nRouting is an essential concept in Single Page Applications (SPA). When your application is divided into separated logical sections, and all of them are under their own URL, your users can easily share links among each other.",
        "resources": [
          {
            "type": "course",
            "title": "Routing in Vue.js",
            "url": "https://vuejs.org/guide/scaling-up/routing.html"
          },
          {
            "type": "course",
            "title": "The Vue Router",
            "url": "https://router.vuejs.org/"
          }
        ]
      }
    },
    {
      "id": "COxkmvqe9jFtV9WtGjfbh",
      "name": "Vue Router",
      "resources": {
        "description": "# Vue Router\n\nVue Router is the official router for Vue.js which allows creating static/dynamic routes, has support for navigation interception, allows for component based configuration and much more.",
        "resources": [
          {
            "type": "course",
            "title": "The Vue Router",
            "url": "https://router.vuejs.org/"
          },
          {
            "type": "article",
            "title": "Explore top posts about Vue.js",
            "url": "https://app.daily.dev/tags/vuejs?ref=roadmapsh"
          },
          {
            "type": "video",
            "title": "The Vue Router",
            "url": "https://www.youtube.com/watch?v=juocv4AtrHo"
          }
        ]
      }
    },
    {
      "id": "izGdctxP_OvQNvaMwVIrh",
      "name": "Forms",
      "resources": {
        "description": "# Forms\n\nApart from the built-in form-binding support, there are several options available that allow for handling forms and data in much convenient manner.",
        "resources": [
          {
            "type": "course",
            "title": "Form Input Bindings",
            "url": "https://vuejs.org/guide/essentials/forms.html"
          },
          {
            "type": "article",
            "title": "User Inputs in Vue 3",
            "url": "https://vueschool.io/lessons/user-inputs-vue-devtools-in-vue-3?friend=vuejs"
          }
        ]
      }
    },
    {
      "id": "BXz1utB_2eYzFvzSbFKx0",
      "name": "FormKit",
      "resources": {
        "description": "# Formkit\n\nFormKit helps build forms faster by simplifying form structure, generation, validation, theming, submission, error handling, and more.",
        "resources": [
          {
            "type": "course",
            "title": "Formkit Documentation",
            "url": "https://formkit.com/"
          }
        ]
      }
    },
    {
      "id": "_Fmp8_z4SKWfKUE80_fqb",
      "name": "Vee Validate",
      "resources": {
        "description": "# Vee validate\n\nOpenSource plugin to handle form validations in Vue.js",
        "resources": [
          {
            "type": "tutorial",
            "title": "logarem/vee-validate",
            "url": "https://github.com/logaretm/vee-validate"
          },
          {
            "type": "course",
            "title": "Vee Website: Vee Validate",
            "url": "https://vee-validate.logaretm.com/v4/"
          }
        ]
      }
    },
    {
      "id": "6U_CAhAY_jyj_4Mzj_HL_",
      "name": "Vuelidate",
      "resources": {
        "description": "# Vuelidate\n\nSimple, lightweight model-based validation for Vue.js.",
        "resources": [
          {
            "type": "course",
            "title": "Vuelidate Website",
            "url": "https://vuelidate.js.org/"
          },
          {
            "type": "tutorial",
            "title": "vuelidate/vuelidate",
            "url": "https://github.com/vuelidate/vuelidate"
          }
        ]
      }
    },
    {
      "id": "Cm6mqXYp-G4mGfPxuU73_",
      "name": "SSR",
      "resources": {
        "description": "# Server-side rendering\n\nServer-side rendering refers to the process that the service side completes the HTML structure splicing of the page, sends it to the browser, and then binds the status and events for it to become a fully interactive page.",
        "resources": [
          {
            "type": "article",
            "title": "What is Server Side Rendering (SSR)?",
            "url": "https://www.educative.io/answers/what-is-server-side-rendering"
          },
          {
            "type": "article",
            "title": "When should I Server-Side Render?",
            "url": "https://medium.com/@mbleigh/when-should-i-server-side-render-c2a383ff2d0f"
          },
          {
            "type": "article",
            "title": "Server-Side Rendering (SSR)",
            "url": "https://vuejs.org/guide/scaling-up/ssr.html"
          },
          {
            "type": "video",
            "title": "What is Server Side Rendering (SSR) for Web Development?",
            "url": "https://www.youtube.com/watch?v=okvg3MRAPs0"
          },
          {
            "type": "article",
            "title": "Explore top posts about Web Development",
            "url": "https://app.daily.dev/tags/webdev?ref=roadmapsh"
          }
        ]
      }
    },
    {
      "id": "822tGnM9jOkYh9aNlosPr",
      "name": "SSG",
      "resources": {
        "description": "# Static Site Generators\n\nA static site generator is a tool that generates a full static HTML website based on raw data and a set of templates. Essentially, a static site generator automates the task of coding individual HTML pages and gets those pages ready to serve to users ahead of time. Because these HTML pages are pre-built, they can load very quickly in users' browsers.",
        "resources": [
          {
            "type": "article",
            "title": "What is a Static Site Generator?",
            "url": "https://www.cloudflare.com/learning/performance/static-site-generator/"
          },
          {
            "type": "article",
            "title": "Next.js SSG",
            "url": "https://nextjs.org/docs/advanced-features/static-html-export"
          },
          {
            "type": "article",
            "title": "Gatsby SSG",
            "url": "https://www.gatsbyjs.com/docs/glossary/static-site-generator/"
          },
          {
            "type": "article",
            "title": "SSG — An 11ty, Vite And JAM Sandwich",
            "url": "https://www.smashingmagazine.com/2021/10/building-ssg-11ty-vite-jam-sandwich/"
          },
          {
            "type": "article",
            "title": "Explore top posts about Web Development",
            "url": "https://app.daily.dev/tags/webdev?ref=roadmapsh"
          }
        ]
      }
    },
    {
      "id": "f2udJnT2q5eDmBZ_OKtmi",
      "name": "Quasar",
      "resources": {
        "description": "# Quasar\n\nQuasar Framework is an open-source Vue.js based framework for building apps, with a single codebase, and deploy it on the Web as a SPA, PWA, SSR, to a Mobile App, using Cordova for iOS & Android, and to a Desktop App, using Electron for Mac, Windows, and Linux.",
        "resources": [
          {
            "type": "course",
            "title": "Quasar",
            "url": "https://quasar.dev/"
          },
          {
            "type": "video",
            "title": "Quasar Framework: Vue.js Cross Platform App",
            "url": "https://www.youtube.com/watch?v=opmng7llVJ0&list=PLAiDzIdBfy8iu_MZrq3IPuSFcRgCQ0iL0"
          },
          {
            "type": "video",
            "title": "How to Build an App using Quasar Framework",
            "url": "https://www.youtube.com/watch?v=czJIuHyPPXo"
          }
        ]
      }
    },
    {
      "id": "8xZxTLYq5m5_nkGh2lfUt",
      "name": "Nuxt.js",
      "resources": {
        "description": "# Nuxt.js\n\nNuxt.js is a free and open source JavaScript library based on Vue.js, Node.js, Webpack and Babel.js. Nuxt is inspired by Next.js, which is a framework of similar purpose, based on React.js.",
        "resources": [
          {
            "type": "course",
            "title": "Nuxt Website",
            "url": "https://nuxt.com/"
          },
          {
            "type": "course",
            "title": "Nuxt Docs",
            "url": "https://nuxt.com/docs/getting-started/introduction"
          },
          {
            "type": "course",
            "title": "Nuxt Examples",
            "url": "https://nuxt.com/docs/examples/essentials/hello-world"
          },
          {
            "type": "article",
            "title": "Get Started with Nuxt",
            "url": "https://explorers.netlify.com/learn/get-started-with-nuxt"
          },
          {
            "type": "article",
            "title": "Nuxt.js Fundamentals",
            "url": "https://vueschool.io/courses/nuxtjs-fundamentals"
          },
          {
            "type": "article",
            "title": "Explore top posts about JavaScript",
            "url": "https://app.daily.dev/tags/javascript?ref=roadmapsh"
          }
        ]
      }
    },
    {
      "id": "_46COO0FGaFuCYwqaRRWy",
      "name": "VitePress",
      "resources": {
        "description": "# Vitepress\n\nVitepress is a static site generator that is built on top of Vite. It is a lightweight and fast static site generator that is designed to work with Vue 3. Vitepress is a great choice for building documentation sites, blogs, and other static sites.",
        "resources": [
          {
            "type": "course",
            "title": "Vitepress Website",
            "url": "https://vitepress.dev/"
          }
        ]
      }
    },
    {
      "id": "LjEAviRMtPLwUUlfcof1h",
      "name": "Vitest",
      "resources": {
        "description": "# Vitest\n\nVitest is a fast Vite-native unit test framework with out-of-box ESM and TypeScript support. It Works on React, Vue, Svelte and more projects created with Vite.",
        "resources": [
          {
            "type": "course",
            "title": "Vitest Website",
            "url": "https://vitest.dev/"
          },
          {
            "type": "video",
            "title": "Testing with Vitest",
            "url": "https://www.youtube.com/watch?v=cM_AeQHzlGg"
          }
        ]
      }
    },
    {
      "id": "p5bUvgr_3H-A55ZnEExk8",
      "name": "Vue Testing Library",
      "resources": {
        "description": "# Vue Testing Library\n\nThe Vue Testing Library is a very lightweight solution for testing Vue components. Its primary guiding principle is: The more your tests resemble the way your software is used, the more confidence they can give you.",
        "resources": [
          {
            "type": "course",
            "title": "Getting Started with Vue Testing Library",
            "url": "https://testing-library.com/docs/vue-testing-library/intro/"
          },
          {
            "type": "article",
            "title": "Explore top posts about Testing",
            "url": "https://app.daily.dev/tags/testing?ref=roadmapsh"
          }
        ]
      }
    },
    {
      "id": "JbMKUVDMUygjXXmhndHVs",
      "name": "Cypress",
      "resources": {
        "description": "# Cypress\n\nCypress framework is a JavaScript-based end-to-end testing framework built on top of Mocha – a feature-rich JavaScript test framework running on and in the browser, making asynchronous testing simple and convenient. It also uses a BDD/TDD assertion library and a browser to pair with any JavaScript testing framework.",
        "resources": [
          {
            "type": "course",
            "title": "Cypress Website",
            "url": "https://www.cypress.io/"
          },
          {
            "type": "course",
            "title": "Cypress Documentation",
            "url": "https://docs.cypress.io/guides/overview/why-cypress#Other"
          },
          {
            "type": "video",
            "title": "Cypress End-to-End Testing",
            "url": "https://www.youtube.com/watch?v=7N63cMKosIE"
          },
          {
            "type": "article",
            "title": "Explore top posts about Cypress",
            "url": "https://app.daily.dev/tags/cypress?ref=roadmapsh"
          }
        ]
      }
    },
    {
      "id": "zqcE3bTnymdepV-Yc8qBl",
      "name": "Playwright",
      "resources": {
        "description": "# Playwright\n\nPlaywright Test was created specifically to accommodate the needs of end-to-end testing. Playwright supports all modern rendering engines including Chromium, WebKit, and Firefox. Test on Windows, Linux, and macOS, locally or on CI, headless or headed with native mobile emulation of Google Chrome for Android and Mobile Safari.Playwright leverages the DevTools protocol to write powerful, stable automated tests.Playwright can actually see into and control the browser rather than relying on a middle translation layer, it allows for the simulation of more insightful and relevant user scenarios.",
        "resources": [
          {
            "type": "course",
            "title": "Playwright Website",
            "url": "https://playwright.dev/"
          },
          {
            "type": "article",
            "title": "Playwright Tutorial: Learn Basics and Setup",
            "url": "https://www.browserstack.com/guide/playwright-tutorial"
          }
        ]
      }
    },
    {
      "id": "TkzlmJ85O-e-KfMhTBwry",
      "name": "Tailwind CSS",
      "resources": {
        "description": "# Tailwind CSS\n\nCSS Framework that provides atomic CSS classes to help you style components e.g. `flex`, `pt-4`, `text-center` and `rotate-90` that can be composed to build any design, directly in your markup.",
        "resources": [
          {
            "type": "course",
            "title": "Tailwind Website",
            "url": "https://tailwindcss.com"
          },
          {
            "type": "video",
            "title": "Tailwind CSS Full Course for Beginners",
            "url": "https://www.youtube.com/watch?v=lCxcTsOHrjo"
          },
          {
            "type": "video",
            "title": "Tailwind CSS Crash Course",
            "url": "https://www.youtube.com/watch?v=UBOj6rqRUME"
          },
          {
            "type": "video",
            "title": "Should You Use Tailwind CSS?",
            "url": "https://www.youtube.com/watch?v=hdGsFpZ0J2E"
          },
          {
            "type": "video",
            "title": "Official Screencasts",
            "url": "https://www.youtube.com/c/TailwindLabs/videos"
          },
          {
            "type": "article",
            "title": "Explore top posts about CSS",
            "url": "https://app.daily.dev/tags/css?ref=roadmapsh"
          }
        ]
      }
    },
    {
      "id": "VNclt_QQthWb2u4xWI_uY",
      "name": "Vuetify",
      "resources": {
        "description": "# Vuetify\n\nVuetify is a Vue UI Library with beautifully handcrafted Material Components. No design skills required — everything you need to create amazing applications is at your fingertips.",
        "resources": [
          {
            "type": "course",
            "title": "Vuetify Website",
            "url": "https://vuetifyjs.com/en/"
          },
          {
            "type": "course",
            "title": "Getting Started with Vuetify",
            "url": "https://vuetifyjs.com/en/getting-started/installation/"
          },
          {
            "type": "article",
            "title": "Explore top posts about Vue.js",
            "url": "https://app.daily.dev/tags/vuejs?ref=roadmapsh"
          },
          {
            "type": "video",
            "title": "Vuetify: Create an App with Vue JS - in 30 MINUTES!",
            "url": "https://www.youtube.com/watch?v=CjXgoYo86yY"
          }
        ]
      }
    },
    {
      "id": "NMIh8rqLM5P-Uk65uHATn",
      "name": "Element UI",
      "resources": {
        "description": "# Element UI\n\nElement UI is another Vue.js component library with several built-in components to style your Vue.js applications.",
        "resources": [
          {
            "type": "course",
            "title": "Element UI Website",
            "url": "https://element-plus.org/en-US/"
          },
          {
            "type": "course",
            "title": "Getting Started - Element UI",
            "url": "https://element-plus.org/en-US/guide/design.html"
          }
        ]
      }
    },
    {
      "id": "9AwVtwIv6TfP9F4ulz2F0",
      "name": "State Management",
      "resources": {
        "description": "# State Management\n\nApplication state management is the process of maintaining knowledge of an application's inputs across multiple related data flows that form a complete business transaction -- or a session -- to understand the condition of the app at any given moment. In computer science, an input is information put into the program by the user and state refers to the condition of an application according to its stored inputs -- saved as variables or constants. State can also be described as the collection of preserved information that forms a complete session.",
        "resources": [
          {
            "type": "course",
            "title": "State Management",
            "url": "https://vuejs.org/guide/scaling-up/state-management.html"
          },
          {
            "type": "article",
            "title": "What is State Management?",
            "url": "https://www.techtarget.com/searchapparchitecture/definition/state-management"
          }
        ]
      }
    },
    {
      "id": "NIvjyhtTFC1gomtGQT_2t",
      "name": "Pinia",
      "resources": {
        "description": "# Pinia\n\nPinia is a store library for Vue.js, and can be used in Vue 2 and Vue 3, with the same API, except in SSR and its installation. It allows state sharing between pages and components around the application. As the documentation says, it is extensible, intuitive (by organization), has devtools support (in Vue.js devtools), inferred typed state even in javascript and more. In Pinia you can access, mutate, replace, use getters that works like computed, use actions, etc. The library is recommended by the official Vue.js documentation.",
        "resources": [
          {
            "type": "course",
            "title": "Pinia Documentation",
            "url": "https://pinia.vuejs.org/"
          },
          {
            "type": "video",
            "title": "Learn Pinia in 30Minutes",
            "url": "https://www.youtube.com/watch?v=JGC7aAC-3y8"
          }
        ]
      }
    },
    {
      "id": "ZLlz0Azfze-8k3z8HnVvE",
      "name": "API Calls",
      "resources": {
        "description": "# API Calls\n\nThere are several options available to make API calls from your Vue.js applications.",
        "resources": [
          {
            "type": "article",
            "title": "How To Make API calls in Vue.JS Applications",
            "url": "https://medium.com/bb-tutorials-and-thoughts/how-to-make-api-calls-in-vue-js-applications-43e017d4dc86"
          },
          {
            "type": "article",
            "title": "How to Use RapidAPI Client with Vue.js",
            "url": "https://rapidapi.com/guides/fetch-api-with-vue"
          }
        ]
      }
    },
    {
      "id": "l2Rl6OQbL7kYvPlpYCZ0Z",
      "name": "Apollo",
      "resources": {
        "description": "# Apollo\n\nApollo is a platform for building a unified graph, a communication layer that helps you manage the flow of data between your application clients (such as web and native apps) and your back-end services.",
        "resources": [
          {
            "type": "course",
            "title": "Apollo Website",
            "url": "https://www.apollographql.com"
          },
          {
            "type": "course",
            "title": "Apollo Docs",
            "url": "https://www.apollographql.com/docs/"
          },
          {
            "type": "video",
            "title": "Apollo's YouTube Channel",
            "url": "https://www.youtube.com/c/ApolloGraphQL/"
          },
          {
            "type": "video",
            "title": "GraphQL With React Tutorial - Apollo Client",
            "url": "https://www.youtube.com/watch?v=YyUWW04HwKY"
          },
          {
            "type": "article",
            "title": "Explore top posts about Apollo",
            "url": "https://app.daily.dev/tags/apollo?ref=roadmapsh"
          }
        ]
      }
    },
    {
      "id": "n5IlN-wv4k0r16CvhoSpD",
      "name": "Axios",
      "resources": {
        "description": "# Axios\n\nAxios is a client HTTP API based on the XMLHttpRequest interface provided by browsers. The most common way for frontend programs to communicate with servers is through the HTTP protocol. You are probably familiar with the Fetch API and the XMLHttpRequest interface, which allows you to fetch resources and make HTTP requests.",
        "resources": [
          {
            "type": "course",
            "title": "Getting Started with Axios",
            "url": "https://axios-http.com/docs/intro"
          },
          {
            "type": "article",
            "title": "How to make HTTP requests with Axios",
            "url": "https://blog.logrocket.com/how-to-make-http-requests-like-a-pro-with-axios/#why"
          },
          {
            "type": "article",
            "title": "Explore top posts about Axios",
            "url": "https://app.daily.dev/tags/axios?ref=roadmapsh"
          }
        ]
      }
    },
    {
      "id": "ufnt87swK61kxShLuVc1-",
      "name": "fetch",
      "resources": {
        "description": "# Fetch\n\nThe `fetch()` method in JavaScript is used to request to the server and load the information on the webpages. The request can be of any APIs that return the data of the format JSON or XML. This method returns a promise.",
        "resources": [
          {
            "type": "article",
            "title": "Fetch - MDN",
            "url": "https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch"
          },
          {
            "type": "article",
            "title": "Network Request - Fetch",
            "url": "https://javascript.info/fetch"
          }
        ]
      }
    },
    {
      "id": "WSq_cDKQPZa_qmQlIdGXg",
      "name": "Tanstack Query",
      "resources": {
        "description": "# TanStack Query\n\nTanStack Query is a data fetching and caching library for Vue.js and React. It is a part of the TanStack ecosystem.",
        "resources": [
          {
            "type": "course",
            "title": "Tanstack Query Website",
            "url": "https://tanstack.com/query"
          }
        ]
      }
    },
    {
      "id": "3RwIO-S8-xOYKNmfwk0pf",
      "name": "Mobile Apps",
      "resources": {
        "description": "# Mobile Apps\n\nBuilding a mobile application with Vue.js is not impossible. In fact, you can build production-ready apps that look and feel like native mobile apps with Vue.js.",
        "resources": [
          {
            "type": "article",
            "title": "Comparing Vue.js mobile app development frameworks",
            "url": "https://blog.logrocket.com/comparing-vue-js-mobile-app-development-frameworks/#whyusevuejstobuildmobileapps"
          },
          {
            "type": "article",
            "title": "Native Script + Vue",
            "url": "https://nativescript-vue.org/"
          },
          {
            "type": "article",
            "title": "Explore top posts about Mobile Development",
            "url": "https://app.daily.dev/tags/mobile?ref=roadmapsh"
          }
        ]
      }
    },
    {
      "id": "IsNzCdS05tbAK0D1zz0Sf",
      "name": "Capacitor",
      "resources": {
        "description": "# Capacitor\n\nSince Vue.js is a web framework, it does not natively support mobile app development. So how do we get access to native mobile features such as the camera and geolocation? Ionic has an official native runtime called Capacitor. With Capacitor’s plugin, you can access the native API of the device your app is running on and build truly native mobile application with Ionic Vue.",
        "resources": [
          {
            "type": "article",
            "title": "Building Cross-Platform Apps with Capacitor and Vue.js",
            "url": "https://blog.logrocket.com/building-cross-platform-apps-with-capacitor-and-vue-js/"
          },
          {
            "type": "article",
            "title": "Building Mobile Apps With Capacitor And Vue.js",
            "url": "https://www.smashingmagazine.com/2018/07/mobile-apps-capacitor-vue-js/"
          }
        ]
      }
    }
  ],
  "edges": [
    {
      "source": "",
      "target": "GV_zWF6rSWg5bqgiXhOEf"
    },
    {
      "source": "",
      "target": "GV_zWF6rSWg5bqgiXhOEf"
    },
    {
      "source": "",
      "target": "GV_zWF6rSWg5bqgiXhOEf"
    },
    {
      "source": "iogwMmOvub2ZF4zgg6WyF",
      "target": "XDvH2t3AJGevS17uM8TO6"
    },
    {
      "source": "XDvH2t3AJGevS17uM8TO6",
      "target": "kPzzrnb2DRHlJ7piaywDe"
    },
    {
      "source": "kPzzrnb2DRHlJ7piaywDe",
      "target": "y9ToYDix-koRbR6FLydFw"
    },
    {
      "source": "kPzzrnb2DRHlJ7piaywDe",
      "target": "0EevuyZiyty3X3Jzpjl4y"
    },
    {
      "source": "0EevuyZiyty3X3Jzpjl4y",
      "target": "2HhKifjuDcP3eKpanRMEQ"
    },
    {
      "source": "0EevuyZiyty3X3Jzpjl4y",
      "target": "VNBRlJkdH6NOOzGXUrbZK"
    },
    {
      "source": "0EevuyZiyty3X3Jzpjl4y",
      "target": "swpyZFUO4UO3mW8Bvf1Te"
    },
    {
      "source": "0EevuyZiyty3X3Jzpjl4y",
      "target": "4S5fVFsFDMbq05ld7n0sF"
    },
    {
      "source": "0EevuyZiyty3X3Jzpjl4y",
      "target": "VlcYnTHW5d4J_zLYupvu5"
    },
    {
      "source": "VlcYnTHW5d4J_zLYupvu5",
      "target": "CGdw3PqLRb9OqFU5SqmE1"
    },
    {
      "source": "CGdw3PqLRb9OqFU5SqmE1",
      "target": "aIYgUc_hEIZx_2P3OhCNh"
    },
    {
      "source": "CGdw3PqLRb9OqFU5SqmE1",
      "target": "_dQbXoFTJHaOARTWDUeHY"
    },
    {
      "source": "_dQbXoFTJHaOARTWDUeHY",
      "target": "tU4Umtnfu01t9gLlnlK6b"
    },
    {
      "source": "_dQbXoFTJHaOARTWDUeHY",
      "target": "qRm08uDZW-D8QDc-9sPX8"
    },
    {
      "source": "qRm08uDZW-D8QDc-9sPX8",
      "target": "1oIt_5OK-t2WaCgaYt9A8"
    },
    {
      "source": "qRm08uDZW-D8QDc-9sPX8",
      "target": "gihxGgt177BK_EYsAfpx9"
    },
    {
      "source": "qRm08uDZW-D8QDc-9sPX8",
      "target": "f7N4pAp_jBlT8_8owAcbG"
    },
    {
      "source": "OpJ2NMKCGXQezpzURE45R",
      "target": "PPUU3Rb73aCpT4zcyvlJE"
    },
    {
      "source": "OpJ2NMKCGXQezpzURE45R",
      "target": "a0qwdQTunxEjQ9A5wpF-q"
    },
    {
      "source": "WiGG9_4G5y-AVA9byw6_g",
      "target": "PQu4TyJOfCEaafW5th0e4"
    },
    {
      "source": "PQu4TyJOfCEaafW5th0e4",
      "target": "NfB3HlZ3uwYK5xszvV50b"
    },
    {
      "source": "PQu4TyJOfCEaafW5th0e4",
      "target": "gMFndBcrTC6FtGryqN6dX"
    },
    {
      "source": "PQu4TyJOfCEaafW5th0e4",
      "target": "dSfrFLr8wKkLAOMJwtCTr"
    },
    {
      "source": "PQu4TyJOfCEaafW5th0e4",
      "target": "4p6Gh2fMPA8hls_mWa5HR"
    },
    {
      "source": "4p6Gh2fMPA8hls_mWa5HR",
      "target": "b7iXwtUnELg_ShbCyTrNA"
    },
    {
      "source": "4p6Gh2fMPA8hls_mWa5HR",
      "target": "Bx1Atxcf15AEaA1BiSIc6"
    },
    {
      "source": "Bx1Atxcf15AEaA1BiSIc6",
      "target": "A5p6pqSOtLJybt4LrZ1St"
    },
    {
      "source": "A5p6pqSOtLJybt4LrZ1St",
      "target": "Re7tv1U0LxYqE5ShFxQSf"
    },
    {
      "source": "A5p6pqSOtLJybt4LrZ1St",
      "target": "SGsd08ZTu4H76s8cfbCKe"
    },
    {
      "source": "A5p6pqSOtLJybt4LrZ1St",
      "target": "xwVbhOpQMPPB4G-lhro0B"
    },
    {
      "source": "A5p6pqSOtLJybt4LrZ1St",
      "target": "br1r8KIf5KInY5mk2xhA6"
    },
    {
      "source": "A5p6pqSOtLJybt4LrZ1St",
      "target": "_Nc8ivQrdpKuf8MwaV-K7"
    },
    {
      "source": "A5p6pqSOtLJybt4LrZ1St",
      "target": "kdlXhbw_a81xdZtyK-pVa"
    },
    {
      "source": "A5p6pqSOtLJybt4LrZ1St",
      "target": "jkX66izOHVWqtyd6KZ0K6"
    },
    {
      "source": "A5p6pqSOtLJybt4LrZ1St",
      "target": "YTzOdnGWNKTjk8T1fcaiO"
    },
    {
      "source": "YTzOdnGWNKTjk8T1fcaiO",
      "target": "HOPgVo3xf0ZN8DmU9BDpo"
    },
    {
      "source": "HOPgVo3xf0ZN8DmU9BDpo",
      "target": "Z9szBPFXfqK_KsvzkR-rf"
    },
    {
      "source": "YTzOdnGWNKTjk8T1fcaiO",
      "target": "ixRG0xfEp4BmyvCR0mtoR"
    },
    {
      "source": "ixRG0xfEp4BmyvCR0mtoR",
      "target": "COxkmvqe9jFtV9WtGjfbh"
    },
    {
      "source": "ixRG0xfEp4BmyvCR0mtoR",
      "target": "izGdctxP_OvQNvaMwVIrh"
    },
    {
      "source": "izGdctxP_OvQNvaMwVIrh",
      "target": "BXz1utB_2eYzFvzSbFKx0"
    },
    {
      "source": "izGdctxP_OvQNvaMwVIrh",
      "target": "Cm6mqXYp-G4mGfPxuU73_"
    },
    {
      "source": "Cm6mqXYp-G4mGfPxuU73_",
      "target": "822tGnM9jOkYh9aNlosPr"
    },
    {
      "source": "822tGnM9jOkYh9aNlosPr",
      "target": "8xZxTLYq5m5_nkGh2lfUt"
    },
    {
      "source": "822tGnM9jOkYh9aNlosPr",
      "target": "_46COO0FGaFuCYwqaRRWy"
    },
    {
      "source": "Cm6mqXYp-G4mGfPxuU73_",
      "target": "8xZxTLYq5m5_nkGh2lfUt"
    },
    {
      "source": "Cm6mqXYp-G4mGfPxuU73_",
      "target": "sg9IjWWorT2lLEnUek-q5"
    },
    {
      "source": "q1PayNkcJHU43QCdChAXt",
      "target": "9AwVtwIv6TfP9F4ulz2F0"
    },
    {
      "source": "9AwVtwIv6TfP9F4ulz2F0",
      "target": "NIvjyhtTFC1gomtGQT_2t"
    },
    {
      "source": "9AwVtwIv6TfP9F4ulz2F0",
      "target": "ZLlz0Azfze-8k3z8HnVvE"
    },
    {
      "source": "ZLlz0Azfze-8k3z8HnVvE",
      "target": "l2Rl6OQbL7kYvPlpYCZ0Z"
    },
    {
      "source": "ZLlz0Azfze-8k3z8HnVvE",
      "target": "3RwIO-S8-xOYKNmfwk0pf"
    },
    {
      "source": "3RwIO-S8-xOYKNmfwk0pf",
      "target": "IsNzCdS05tbAK0D1zz0Sf"
    },
    {
      "source": "3RwIO-S8-xOYKNmfwk0pf",
      "target": "GV_zWF6rSWg5bqgiXhOEf"
    }
  ]
}